# Command: create_new_customer, Args: (), Kwargs: {'username': 'anonymous', 'first_name': 'Anon', 'last_name': 'Ymous', 'email': 'anon.ymous@store.com', 'balance': 1, 'card_number': 'NoCardNumber', 'logger': <Logger donknabberello.Mocker (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <Customer: Anon Ymous (anonymous)>)
# Issued at: 2025-01-23 19:59:08.060280
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <Customer: Anon Ymous (anonymous)>)
StoreHelper.create_new_customer(*(), **{'username': 'anonymous', 'first_name': 'Anon', 'last_name': 'Ymous', 'email': 'anon.ymous@store.com', 'balance': 1, 'card_number': 'NoCardNumber', 'logger': <Logger donknabberello.Mocker (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '2005702', 'name': 'Alesto Cruspies überzogene Erdnüsse Paprika', 'resell_price': 1.5, 'discount': 0, 'logger': <Logger donknabberello.Mocker (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct: Alesto Cruspies überzogene Erdnüsse Paprika (2005702) [0]>)
# Issued at: 2025-01-23 19:59:08.093228
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct: Alesto Cruspies überzogene Erdnüsse Paprika (2005702) [0]>)
StoreHelper.get_or_create_product(*(), **{'ean': '2005702', 'name': 'Alesto Cruspies überzogene Erdnüsse Paprika', 'resell_price': 1.5, 'discount': 0, 'logger': <Logger donknabberello.Mocker (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '2005672', 'name': 'Alesto Erdnüsse pikant gewürzt', 'resell_price': 1.5, 'discount': 0, 'logger': <Logger donknabberello.Mocker (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct: Alesto Erdnüsse pikant gewürzt (2005672) [0]>)
# Issued at: 2025-01-23 19:59:08.131721
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct: Alesto Erdnüsse pikant gewürzt (2005672) [0]>)
StoreHelper.get_or_create_product(*(), **{'ean': '2005672', 'name': 'Alesto Erdnüsse pikant gewürzt', 'resell_price': 1.5, 'discount': 0, 'logger': <Logger donknabberello.Mocker (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '2005726', 'name': 'Alesto Studentenfutter Classic', 'resell_price': 2.5, 'discount': 0, 'logger': <Logger donknabberello.Mocker (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct: Alesto Studentenfutter Classic (2005726) [0]>)
# Issued at: 2025-01-23 19:59:08.163896
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct: Alesto Studentenfutter Classic (2005726) [0]>)
StoreHelper.get_or_create_product(*(), **{'ean': '2005726', 'name': 'Alesto Studentenfutter Classic', 'resell_price': 2.5, 'discount': 0, 'logger': <Logger donknabberello.Mocker (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '20772970', 'name': 'Alesto Nussmix mit Makadamia', 'resell_price': 3.2, 'discount': 0, 'logger': <Logger donknabberello.Mocker (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct: Alesto Nussmix mit Makadamia (20772970) [0]>)
# Issued at: 2025-01-23 19:59:08.199727
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct: Alesto Nussmix mit Makadamia (20772970) [0]>)
StoreHelper.get_or_create_product(*(), **{'ean': '20772970', 'name': 'Alesto Nussmix mit Makadamia', 'resell_price': 3.2, 'discount': 0, 'logger': <Logger donknabberello.Mocker (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '250047238', 'name': 'Alesto Nuts Royal', 'resell_price': 3.2, 'discount': 0, 'logger': <Logger donknabberello.Mocker (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct: Alesto Nuts Royal (250047238) [0]>)
# Issued at: 2025-01-23 19:59:08.232114
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct: Alesto Nuts Royal (250047238) [0]>)
StoreHelper.get_or_create_product(*(), **{'ean': '250047238', 'name': 'Alesto Nuts Royal', 'resell_price': 3.2, 'discount': 0, 'logger': <Logger donknabberello.Mocker (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '20559625', 'name': 'Alesto Nussmix mit Pistazie', 'resell_price': 3.2, 'discount': 0, 'logger': <Logger donknabberello.Mocker (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct: Alesto Nussmix mit Pistazie (20559625) [0]>)
# Issued at: 2025-01-23 19:59:08.272382
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct: Alesto Nussmix mit Pistazie (20559625) [0]>)
StoreHelper.get_or_create_product(*(), **{'ean': '20559625', 'name': 'Alesto Nussmix mit Pistazie', 'resell_price': 3.2, 'discount': 0, 'logger': <Logger donknabberello.Mocker (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '20815394', 'name': 'Alesto Nuss-Frucht-Mix', 'resell_price': 2.5, 'discount': 0, 'logger': <Logger donknabberello.Mocker (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct: Alesto Nuss-Frucht-Mix (20815394) [0]>)
# Issued at: 2025-01-23 19:59:08.305558
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct: Alesto Nuss-Frucht-Mix (20815394) [0]>)
StoreHelper.get_or_create_product(*(), **{'ean': '20815394', 'name': 'Alesto Nuss-Frucht-Mix', 'resell_price': 2.5, 'discount': 0, 'logger': <Logger donknabberello.Mocker (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '20815400', 'name': 'Alesto Cashew-Cranberry-Mix', 'resell_price': 2.5, 'discount': 0, 'logger': <Logger donknabberello.Mocker (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct: Alesto Cashew-Cranberry-Mix (20815400) [0]>)
# Issued at: 2025-01-23 19:59:08.340905
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct: Alesto Cashew-Cranberry-Mix (20815400) [0]>)
StoreHelper.get_or_create_product(*(), **{'ean': '20815400', 'name': 'Alesto Cashew-Cranberry-Mix', 'resell_price': 2.5, 'discount': 0, 'logger': <Logger donknabberello.Mocker (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '20333737', 'name': 'Alesto Cashew-Erdnuss-Mix (Honig Salz)', 'resell_price': 2.5, 'discount': 0, 'logger': <Logger donknabberello.Mocker (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct: Alesto Cashew-Erdnuss-Mix (Honig Salz) (20333737) [0]>)
# Issued at: 2025-01-23 19:59:08.373113
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct: Alesto Cashew-Erdnuss-Mix (Honig Salz) (20333737) [0]>)
StoreHelper.get_or_create_product(*(), **{'ean': '20333737', 'name': 'Alesto Cashew-Erdnuss-Mix (Honig Salz)', 'resell_price': 2.5, 'discount': 0, 'logger': <Logger donknabberello.Mocker (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '409920000442', 'name': 'SnackFun Teigumantelte Erdnüsse', 'resell_price': 1.5, 'discount': 0, 'logger': <Logger donknabberello.Mocker (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct: SnackFun Teigumantelte Erdnüsse (409920000442) [0]>)
# Issued at: 2025-01-23 19:59:08.405866
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct: SnackFun Teigumantelte Erdnüsse (409920000442) [0]>)
StoreHelper.get_or_create_product(*(), **{'ean': '409920000442', 'name': 'SnackFun Teigumantelte Erdnüsse', 'resell_price': 1.5, 'discount': 0, 'logger': <Logger donknabberello.Mocker (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '409920000466', 'name': 'SnackFun Teigumantelte Erdnüsse (Wasabi)', 'resell_price': 1.5, 'discount': 0, 'logger': <Logger donknabberello.Mocker (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct: SnackFun Teigumantelte Erdnüsse (Wasabi) (409920000466) [0]>)
# Issued at: 2025-01-23 19:59:08.441683
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct: SnackFun Teigumantelte Erdnüsse (Wasabi) (409920000466) [0]>)
StoreHelper.get_or_create_product(*(), **{'ean': '409920000466', 'name': 'SnackFun Teigumantelte Erdnüsse (Wasabi)', 'resell_price': 1.5, 'discount': 0, 'logger': <Logger donknabberello.Mocker (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4099200046686', 'name': 'SnackFun Pistazien (gesalzen)', 'resell_price': 4.5, 'discount': 0, 'logger': <Logger donknabberello.Mocker (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct: SnackFun Pistazien (gesalzen) (4099200046686) [0]>)
# Issued at: 2025-01-23 19:59:08.479150
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct: SnackFun Pistazien (gesalzen) (4099200046686) [0]>)
StoreHelper.get_or_create_product(*(), **{'ean': '4099200046686', 'name': 'SnackFun Pistazien (gesalzen)', 'resell_price': 4.5, 'discount': 0, 'logger': <Logger donknabberello.Mocker (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4099200046687', 'name': 'SnackFun Pistazien (ungesalzen)', 'resell_price': 4.5, 'discount': 0, 'logger': <Logger donknabberello.Mocker (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct: SnackFun Pistazien (ungesalzen) (4099200046687) [0]>)
# Issued at: 2025-01-23 19:59:08.517570
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct: SnackFun Pistazien (ungesalzen) (4099200046687) [0]>)
StoreHelper.get_or_create_product(*(), **{'ean': '4099200046687', 'name': 'SnackFun Pistazien (ungesalzen)', 'resell_price': 4.5, 'discount': 0, 'logger': <Logger donknabberello.Mocker (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4099200046754', 'name': 'SnackFun Macadamia', 'resell_price': 3.5, 'discount': 0, 'logger': <Logger donknabberello.Mocker (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct: SnackFun Macadamia (4099200046754) [0]>)
# Issued at: 2025-01-23 19:59:08.564517
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct: SnackFun Macadamia (4099200046754) [0]>)
StoreHelper.get_or_create_product(*(), **{'ean': '4099200046754', 'name': 'SnackFun Macadamia', 'resell_price': 3.5, 'discount': 0, 'logger': <Logger donknabberello.Mocker (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4099200046730', 'name': 'SnackFun Erdnüsse', 'resell_price': 3.2, 'discount': 0, 'logger': <Logger donknabberello.Mocker (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct: SnackFun Erdnüsse (4099200046730) [0]>)
# Issued at: 2025-01-23 19:59:08.613696
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct: SnackFun Erdnüsse (4099200046730) [0]>)
StoreHelper.get_or_create_product(*(), **{'ean': '4099200046730', 'name': 'SnackFun Erdnüsse', 'resell_price': 3.2, 'discount': 0, 'logger': <Logger donknabberello.Mocker (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4104420026681', 'name': 'Bio Natura Cashew-Cranberry', 'resell_price': 4.5, 'discount': 0, 'logger': <Logger donknabberello.Mocker (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct: Bio Natura Cashew-Cranberry (4104420026681) [0]>)
# Issued at: 2025-01-23 19:59:08.648919
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct: Bio Natura Cashew-Cranberry (4104420026681) [0]>)
StoreHelper.get_or_create_product(*(), **{'ean': '4104420026681', 'name': 'Bio Natura Cashew-Cranberry', 'resell_price': 4.5, 'discount': 0, 'logger': <Logger donknabberello.Mocker (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4061462405839', 'name': 'Bio Natura Studentenfutter', 'resell_price': 4.5, 'discount': 0, 'logger': <Logger donknabberello.Mocker (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct: Bio Natura Studentenfutter (4061462405839) [0]>)
# Issued at: 2025-01-23 19:59:08.687775
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct: Bio Natura Studentenfutter (4061462405839) [0]>)
StoreHelper.get_or_create_product(*(), **{'ean': '4061462405839', 'name': 'Bio Natura Studentenfutter', 'resell_price': 4.5, 'discount': 0, 'logger': <Logger donknabberello.Mocker (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4047247108225', 'name': 'Asia-Snack Shogun Mix', 'resell_price': 2.0, 'discount': 0, 'logger': <Logger donknabberello.Mocker (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct: Asia-Snack Shogun Mix (4047247108225) [0]>)
# Issued at: 2025-01-23 19:59:08.721615
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct: Asia-Snack Shogun Mix (4047247108225) [0]>)
StoreHelper.get_or_create_product(*(), **{'ean': '4047247108225', 'name': 'Asia-Snack Shogun Mix', 'resell_price': 2.0, 'discount': 0, 'logger': <Logger donknabberello.Mocker (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4099200143286', 'name': 'ZZM Apfelchips', 'resell_price': 3.7, 'discount': 0, 'logger': <Logger donknabberello.Mocker (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct: ZZM Apfelchips (4099200143286) [0]>)
# Issued at: 2025-01-23 19:59:08.756657
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct: ZZM Apfelchips (4099200143286) [0]>)
StoreHelper.get_or_create_product(*(), **{'ean': '4099200143286', 'name': 'ZZM Apfelchips', 'resell_price': 3.7, 'discount': 0, 'logger': <Logger donknabberello.Mocker (DEBUG)>})

# Command: restock_product, Args: ('2005702', 2, 0.99, <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {'auth_user': <User: anonymous>, 'used_store_equity': False}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 2 x Alesto Cruspies überzogene Erdnüsse Paprika restocked.>)
# Issued at: 2025-01-23 19:59:08.847762
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 2 x Alesto Cruspies überzogene Erdnüsse Paprika restocked.>)
StoreHelper.restock_product(*('2005702', 2, 0.99, <Logger donknabberello.Mocker (DEBUG)>), **{'auth_user': <User: anonymous>, 'used_store_equity': False})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('1.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 1.50>)
# Issued at: 2025-01-23 19:59:08.929239
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 1.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('1.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('2005702', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Cruspies überzogene Erdnüsse Paprika (2005702) [1] = 1.50€>)
# Issued at: 2025-01-23 19:59:09.199223
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Cruspies überzogene Erdnüsse Paprika (2005702) [1] = 1.50€>)
StoreHelper.customer_purchase(*('2005702', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('1.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 1.50>)
# Issued at: 2025-01-23 19:59:09.283246
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 1.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('1.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('2005702', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Cruspies überzogene Erdnüsse Paprika (2005702) [0] = 1.50€>)
# Issued at: 2025-01-23 19:59:09.531162
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Cruspies überzogene Erdnüsse Paprika (2005702) [0] = 1.50€>)
StoreHelper.customer_purchase(*('2005702', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: restock_product, Args: ('2005672', 2, 0.89, <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {'auth_user': <User: anonymous>, 'used_store_equity': False}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 2 x Alesto Erdnüsse pikant gewürzt restocked.>)
# Issued at: 2025-01-23 19:59:09.622308
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 2 x Alesto Erdnüsse pikant gewürzt restocked.>)
StoreHelper.restock_product(*('2005672', 2, 0.89, <Logger donknabberello.Mocker (DEBUG)>), **{'auth_user': <User: anonymous>, 'used_store_equity': False})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('1.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 1.50>)
# Issued at: 2025-01-23 19:59:09.735062
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 1.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('1.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('2005672', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Erdnüsse pikant gewürzt (2005672) [1] = 1.50€>)
# Issued at: 2025-01-23 19:59:09.982033
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Erdnüsse pikant gewürzt (2005672) [1] = 1.50€>)
StoreHelper.customer_purchase(*('2005672', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('1.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 1.50>)
# Issued at: 2025-01-23 19:59:10.049710
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 1.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('1.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('2005672', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Erdnüsse pikant gewürzt (2005672) [0] = 1.50€>)
# Issued at: 2025-01-23 19:59:10.321953
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Erdnüsse pikant gewürzt (2005672) [0] = 1.50€>)
StoreHelper.customer_purchase(*('2005672', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: restock_product, Args: ('20333737', 2, 1.99, <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {'auth_user': <User: anonymous>, 'used_store_equity': False}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 2 x Alesto Cashew-Erdnuss-Mix (Honig Salz) restocked.>)
# Issued at: 2025-01-23 19:59:10.460887
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 2 x Alesto Cashew-Erdnuss-Mix (Honig Salz) restocked.>)
StoreHelper.restock_product(*('20333737', 2, 1.99, <Logger donknabberello.Mocker (DEBUG)>), **{'auth_user': <User: anonymous>, 'used_store_equity': False})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
# Issued at: 2025-01-23 19:59:10.574203
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('20333737', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Cashew-Erdnuss-Mix (Honig Salz) (20333737) [1] = 2.50€>)
# Issued at: 2025-01-23 19:59:10.793951
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Cashew-Erdnuss-Mix (Honig Salz) (20333737) [1] = 2.50€>)
StoreHelper.customer_purchase(*('20333737', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
# Issued at: 2025-01-23 19:59:10.869013
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('20333737', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Cashew-Erdnuss-Mix (Honig Salz) (20333737) [0] = 2.50€>)
# Issued at: 2025-01-23 19:59:11.145753
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Cashew-Erdnuss-Mix (Honig Salz) (20333737) [0] = 2.50€>)
StoreHelper.customer_purchase(*('20333737', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: restock_product, Args: ('2005672', 2, 2.59, <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {'auth_user': <User: anonymous>, 'used_store_equity': False}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 2 x Alesto Erdnüsse pikant gewürzt restocked.>)
# Issued at: 2025-01-23 19:59:11.249185
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 2 x Alesto Erdnüsse pikant gewürzt restocked.>)
StoreHelper.restock_product(*('2005672', 2, 2.59, <Logger donknabberello.Mocker (DEBUG)>), **{'auth_user': <User: anonymous>, 'used_store_equity': False})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('1.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 1.50>)
# Issued at: 2025-01-23 19:59:11.327153
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 1.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('1.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('2005672', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Erdnüsse pikant gewürzt (2005672) [1] = 1.50€>)
# Issued at: 2025-01-23 19:59:11.556247
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Erdnüsse pikant gewürzt (2005672) [1] = 1.50€>)
StoreHelper.customer_purchase(*('2005672', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('1.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 1.50>)
# Issued at: 2025-01-23 19:59:11.620399
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 1.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('1.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('2005672', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Erdnüsse pikant gewürzt (2005672) [0] = 1.50€>)
# Issued at: 2025-01-23 19:59:11.875056
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Erdnüsse pikant gewürzt (2005672) [0] = 1.50€>)
StoreHelper.customer_purchase(*('2005672', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: restock_product, Args: ('250047238', 2, 2.65, <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {'auth_user': <User: anonymous>, 'used_store_equity': False}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 2 x Alesto Nuts Royal restocked.>)
# Issued at: 2025-01-23 19:59:11.964431
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 2 x Alesto Nuts Royal restocked.>)
StoreHelper.restock_product(*('250047238', 2, 2.65, <Logger donknabberello.Mocker (DEBUG)>), **{'auth_user': <User: anonymous>, 'used_store_equity': False})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('3.20'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.20>)
# Issued at: 2025-01-23 19:59:12.051434
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.20>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('3.20'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('250047238', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nuts Royal (250047238) [1] = 3.20€>)
# Issued at: 2025-01-23 19:59:12.300688
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nuts Royal (250047238) [1] = 3.20€>)
StoreHelper.customer_purchase(*('250047238', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('3.20'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.20>)
# Issued at: 2025-01-23 19:59:12.361455
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.20>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('3.20'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('250047238', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nuts Royal (250047238) [0] = 3.20€>)
# Issued at: 2025-01-23 19:59:12.643969
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nuts Royal (250047238) [0] = 3.20€>)
StoreHelper.customer_purchase(*('250047238', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: restock_product, Args: ('2005726', 1, 1.99, <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {'auth_user': <User: anonymous>, 'used_store_equity': False}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 1 x Alesto Studentenfutter Classic restocked.>)
# Issued at: 2025-01-23 19:59:12.746012
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 1 x Alesto Studentenfutter Classic restocked.>)
StoreHelper.restock_product(*('2005726', 1, 1.99, <Logger donknabberello.Mocker (DEBUG)>), **{'auth_user': <User: anonymous>, 'used_store_equity': False})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
# Issued at: 2025-01-23 19:59:12.847464
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('2005726', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Studentenfutter Classic (2005726) [0] = 2.50€>)
# Issued at: 2025-01-23 19:59:13.081127
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Studentenfutter Classic (2005726) [0] = 2.50€>)
StoreHelper.customer_purchase(*('2005726', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: restock_product, Args: ('20772970', 2, 2.59, <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {'auth_user': <User: anonymous>, 'used_store_equity': False}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 2 x Alesto Nussmix mit Makadamia restocked.>)
# Issued at: 2025-01-23 19:59:13.184648
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 2 x Alesto Nussmix mit Makadamia restocked.>)
StoreHelper.restock_product(*('20772970', 2, 2.59, <Logger donknabberello.Mocker (DEBUG)>), **{'auth_user': <User: anonymous>, 'used_store_equity': False})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('3.20'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.20>)
# Issued at: 2025-01-23 19:59:13.273290
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.20>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('3.20'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('20772970', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nussmix mit Makadamia (20772970) [1] = 3.20€>)
# Issued at: 2025-01-23 19:59:13.794675
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nussmix mit Makadamia (20772970) [1] = 3.20€>)
StoreHelper.customer_purchase(*('20772970', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('3.20'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.20>)
# Issued at: 2025-01-23 19:59:13.869049
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.20>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('3.20'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('20772970', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nussmix mit Makadamia (20772970) [0] = 3.20€>)
# Issued at: 2025-01-23 19:59:14.099135
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nussmix mit Makadamia (20772970) [0] = 3.20€>)
StoreHelper.customer_purchase(*('20772970', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: restock_product, Args: ('250047238', 4, 2.65, <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {'auth_user': <User: anonymous>, 'used_store_equity': False}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 4 x Alesto Nuts Royal restocked.>)
# Issued at: 2025-01-23 19:59:14.196261
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 4 x Alesto Nuts Royal restocked.>)
StoreHelper.restock_product(*('250047238', 4, 2.65, <Logger donknabberello.Mocker (DEBUG)>), **{'auth_user': <User: anonymous>, 'used_store_equity': False})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('3.20'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.20>)
# Issued at: 2025-01-23 19:59:14.318334
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.20>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('3.20'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('250047238', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nuts Royal (250047238) [3] = 3.20€>)
# Issued at: 2025-01-23 19:59:14.566936
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nuts Royal (250047238) [3] = 3.20€>)
StoreHelper.customer_purchase(*('250047238', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('3.20'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.20>)
# Issued at: 2025-01-23 19:59:14.630139
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.20>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('3.20'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('250047238', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nuts Royal (250047238) [2] = 3.20€>)
# Issued at: 2025-01-23 19:59:14.884146
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nuts Royal (250047238) [2] = 3.20€>)
StoreHelper.customer_purchase(*('250047238', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('3.20'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.20>)
# Issued at: 2025-01-23 19:59:14.944445
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.20>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('3.20'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('250047238', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nuts Royal (250047238) [1] = 3.20€>)
# Issued at: 2025-01-23 19:59:15.202340
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nuts Royal (250047238) [1] = 3.20€>)
StoreHelper.customer_purchase(*('250047238', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('3.20'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.20>)
# Issued at: 2025-01-23 19:59:15.271175
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.20>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('3.20'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('250047238', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nuts Royal (250047238) [0] = 3.20€>)
# Issued at: 2025-01-23 19:59:15.576759
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nuts Royal (250047238) [0] = 3.20€>)
StoreHelper.customer_purchase(*('250047238', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: restock_product, Args: ('20559625', 2, 2.59, <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {'auth_user': <User: anonymous>, 'used_store_equity': False}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 2 x Alesto Nussmix mit Pistazie restocked.>)
# Issued at: 2025-01-23 19:59:15.687408
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 2 x Alesto Nussmix mit Pistazie restocked.>)
StoreHelper.restock_product(*('20559625', 2, 2.59, <Logger donknabberello.Mocker (DEBUG)>), **{'auth_user': <User: anonymous>, 'used_store_equity': False})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('3.20'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.20>)
# Issued at: 2025-01-23 19:59:15.771816
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.20>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('3.20'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('20559625', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nussmix mit Pistazie (20559625) [1] = 3.20€>)
# Issued at: 2025-01-23 19:59:16.020747
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nussmix mit Pistazie (20559625) [1] = 3.20€>)
StoreHelper.customer_purchase(*('20559625', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('3.20'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.20>)
# Issued at: 2025-01-23 19:59:16.091444
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.20>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('3.20'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('20559625', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nussmix mit Pistazie (20559625) [0] = 3.20€>)
# Issued at: 2025-01-23 19:59:16.364216
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nussmix mit Pistazie (20559625) [0] = 3.20€>)
StoreHelper.customer_purchase(*('20559625', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: restock_product, Args: ('20815394', 2, 1.99, <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {'auth_user': <User: anonymous>, 'used_store_equity': False}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 2 x Alesto Nuss-Frucht-Mix restocked.>)
# Issued at: 2025-01-23 19:59:16.455321
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 2 x Alesto Nuss-Frucht-Mix restocked.>)
StoreHelper.restock_product(*('20815394', 2, 1.99, <Logger donknabberello.Mocker (DEBUG)>), **{'auth_user': <User: anonymous>, 'used_store_equity': False})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
# Issued at: 2025-01-23 19:59:16.554662
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('20815394', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nuss-Frucht-Mix (20815394) [1] = 2.50€>)
# Issued at: 2025-01-23 19:59:16.787802
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nuss-Frucht-Mix (20815394) [1] = 2.50€>)
StoreHelper.customer_purchase(*('20815394', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
# Issued at: 2025-01-23 19:59:16.854046
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('20815394', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nuss-Frucht-Mix (20815394) [0] = 2.50€>)
# Issued at: 2025-01-23 19:59:17.129910
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nuss-Frucht-Mix (20815394) [0] = 2.50€>)
StoreHelper.customer_purchase(*('20815394', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: restock_product, Args: ('20333737', 2, 1.99, <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {'auth_user': <User: anonymous>, 'used_store_equity': False}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 2 x Alesto Cashew-Erdnuss-Mix (Honig Salz) restocked.>)
# Issued at: 2025-01-23 19:59:17.250064
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 2 x Alesto Cashew-Erdnuss-Mix (Honig Salz) restocked.>)
StoreHelper.restock_product(*('20333737', 2, 1.99, <Logger donknabberello.Mocker (DEBUG)>), **{'auth_user': <User: anonymous>, 'used_store_equity': False})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
# Issued at: 2025-01-23 19:59:17.352480
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('20333737', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Cashew-Erdnuss-Mix (Honig Salz) (20333737) [1] = 2.50€>)
# Issued at: 2025-01-23 19:59:17.605011
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Cashew-Erdnuss-Mix (Honig Salz) (20333737) [1] = 2.50€>)
StoreHelper.customer_purchase(*('20333737', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
# Issued at: 2025-01-23 19:59:17.675998
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('20333737', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Cashew-Erdnuss-Mix (Honig Salz) (20333737) [0] = 2.50€>)
# Issued at: 2025-01-23 19:59:17.941610
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Cashew-Erdnuss-Mix (Honig Salz) (20333737) [0] = 2.50€>)
StoreHelper.customer_purchase(*('20333737', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: restock_product, Args: ('409920000442', 4, 0.99, <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {'auth_user': <User: anonymous>, 'used_store_equity': False}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 4 x SnackFun Teigumantelte Erdnüsse restocked.>)
# Issued at: 2025-01-23 19:59:18.035388
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 4 x SnackFun Teigumantelte Erdnüsse restocked.>)
StoreHelper.restock_product(*('409920000442', 4, 0.99, <Logger donknabberello.Mocker (DEBUG)>), **{'auth_user': <User: anonymous>, 'used_store_equity': False})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('1.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 1.50>)
# Issued at: 2025-01-23 19:59:18.121075
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 1.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('1.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('409920000442', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x SnackFun Teigumantelte Erdnüsse (409920000442) [3] = 1.50€>)
# Issued at: 2025-01-23 19:59:18.363263
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x SnackFun Teigumantelte Erdnüsse (409920000442) [3] = 1.50€>)
StoreHelper.customer_purchase(*('409920000442', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('1.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 1.50>)
# Issued at: 2025-01-23 19:59:18.444023
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 1.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('1.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('409920000442', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x SnackFun Teigumantelte Erdnüsse (409920000442) [2] = 1.50€>)
# Issued at: 2025-01-23 19:59:18.731577
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x SnackFun Teigumantelte Erdnüsse (409920000442) [2] = 1.50€>)
StoreHelper.customer_purchase(*('409920000442', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('1.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 1.50>)
# Issued at: 2025-01-23 19:59:18.793090
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 1.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('1.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('409920000442', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x SnackFun Teigumantelte Erdnüsse (409920000442) [1] = 1.50€>)
# Issued at: 2025-01-23 19:59:19.054772
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x SnackFun Teigumantelte Erdnüsse (409920000442) [1] = 1.50€>)
StoreHelper.customer_purchase(*('409920000442', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('1.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 1.50>)
# Issued at: 2025-01-23 19:59:19.113517
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 1.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('1.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('409920000442', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x SnackFun Teigumantelte Erdnüsse (409920000442) [0] = 1.50€>)
# Issued at: 2025-01-23 19:59:19.392545
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x SnackFun Teigumantelte Erdnüsse (409920000442) [0] = 1.50€>)
StoreHelper.customer_purchase(*('409920000442', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: restock_product, Args: ('4099200046686', 3, 3.74, <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {'auth_user': <User: anonymous>, 'used_store_equity': False}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 3 x SnackFun Pistazien (gesalzen) restocked.>)
# Issued at: 2025-01-23 19:59:19.489249
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 3 x SnackFun Pistazien (gesalzen) restocked.>)
StoreHelper.restock_product(*('4099200046686', 3, 3.74, <Logger donknabberello.Mocker (DEBUG)>), **{'auth_user': <User: anonymous>, 'used_store_equity': False})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('4.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 4.50>)
# Issued at: 2025-01-23 19:59:19.572979
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 4.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('4.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('4099200046686', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x SnackFun Pistazien (gesalzen) (4099200046686) [2] = 4.50€>)
# Issued at: 2025-01-23 19:59:19.804825
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x SnackFun Pistazien (gesalzen) (4099200046686) [2] = 4.50€>)
StoreHelper.customer_purchase(*('4099200046686', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('4.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 4.50>)
# Issued at: 2025-01-23 19:59:19.872968
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 4.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('4.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('4099200046686', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x SnackFun Pistazien (gesalzen) (4099200046686) [1] = 4.50€>)
# Issued at: 2025-01-23 19:59:20.149278
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x SnackFun Pistazien (gesalzen) (4099200046686) [1] = 4.50€>)
StoreHelper.customer_purchase(*('4099200046686', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('4.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 4.50>)
# Issued at: 2025-01-23 19:59:20.212010
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 4.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('4.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('4099200046686', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x SnackFun Pistazien (gesalzen) (4099200046686) [0] = 4.50€>)
# Issued at: 2025-01-23 19:59:20.494292
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x SnackFun Pistazien (gesalzen) (4099200046686) [0] = 4.50€>)
StoreHelper.customer_purchase(*('4099200046686', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: restock_product, Args: ('4099200046687', 1, 3.74, <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {'auth_user': <User: anonymous>, 'used_store_equity': False}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 1 x SnackFun Pistazien (ungesalzen) restocked.>)
# Issued at: 2025-01-23 19:59:20.599119
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 1 x SnackFun Pistazien (ungesalzen) restocked.>)
StoreHelper.restock_product(*('4099200046687', 1, 3.74, <Logger donknabberello.Mocker (DEBUG)>), **{'auth_user': <User: anonymous>, 'used_store_equity': False})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('4.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 4.50>)
# Issued at: 2025-01-23 19:59:20.685204
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 4.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('4.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('4099200046687', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x SnackFun Pistazien (ungesalzen) (4099200046687) [0] = 4.50€>)
# Issued at: 2025-01-23 19:59:20.957461
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x SnackFun Pistazien (ungesalzen) (4099200046687) [0] = 4.50€>)
StoreHelper.customer_purchase(*('4099200046687', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: restock_product, Args: ('4099200046754', 3, 2.79, <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {'auth_user': <User: anonymous>, 'used_store_equity': False}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 3 x SnackFun Macadamia restocked.>)
# Issued at: 2025-01-23 19:59:21.075668
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 3 x SnackFun Macadamia restocked.>)
StoreHelper.restock_product(*('4099200046754', 3, 2.79, <Logger donknabberello.Mocker (DEBUG)>), **{'auth_user': <User: anonymous>, 'used_store_equity': False})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('3.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.50>)
# Issued at: 2025-01-23 19:59:21.182521
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('3.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('4099200046754', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x SnackFun Macadamia (4099200046754) [2] = 3.50€>)
# Issued at: 2025-01-23 19:59:21.506991
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x SnackFun Macadamia (4099200046754) [2] = 3.50€>)
StoreHelper.customer_purchase(*('4099200046754', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('3.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.50>)
# Issued at: 2025-01-23 19:59:21.708519
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('3.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('4099200046754', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x SnackFun Macadamia (4099200046754) [1] = 3.50€>)
# Issued at: 2025-01-23 19:59:21.944779
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x SnackFun Macadamia (4099200046754) [1] = 3.50€>)
StoreHelper.customer_purchase(*('4099200046754', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('3.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.50>)
# Issued at: 2025-01-23 19:59:22.009129
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('3.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('4099200046754', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x SnackFun Macadamia (4099200046754) [0] = 3.50€>)
# Issued at: 2025-01-23 19:59:22.274877
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x SnackFun Macadamia (4099200046754) [0] = 3.50€>)
StoreHelper.customer_purchase(*('4099200046754', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: restock_product, Args: ('4099200046730', 2, 2.69, <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {'auth_user': <User: anonymous>, 'used_store_equity': False}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 2 x SnackFun Erdnüsse restocked.>)
# Issued at: 2025-01-23 19:59:22.360873
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 2 x SnackFun Erdnüsse restocked.>)
StoreHelper.restock_product(*('4099200046730', 2, 2.69, <Logger donknabberello.Mocker (DEBUG)>), **{'auth_user': <User: anonymous>, 'used_store_equity': False})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('3.20'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.20>)
# Issued at: 2025-01-23 19:59:22.443290
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.20>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('3.20'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('4099200046730', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x SnackFun Erdnüsse (4099200046730) [1] = 3.20€>)
# Issued at: 2025-01-23 19:59:22.701425
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x SnackFun Erdnüsse (4099200046730) [1] = 3.20€>)
StoreHelper.customer_purchase(*('4099200046730', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('3.20'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.20>)
# Issued at: 2025-01-23 19:59:22.761821
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.20>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('3.20'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('4099200046730', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x SnackFun Erdnüsse (4099200046730) [0] = 3.20€>)
# Issued at: 2025-01-23 19:59:23.036525
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x SnackFun Erdnüsse (4099200046730) [0] = 3.20€>)
StoreHelper.customer_purchase(*('4099200046730', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: restock_product, Args: ('2005726', 4, 1.99, <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {'auth_user': <User: anonymous>, 'used_store_equity': False}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 4 x Alesto Studentenfutter Classic restocked.>)
# Issued at: 2025-01-23 19:59:23.130451
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 4 x Alesto Studentenfutter Classic restocked.>)
StoreHelper.restock_product(*('2005726', 4, 1.99, <Logger donknabberello.Mocker (DEBUG)>), **{'auth_user': <User: anonymous>, 'used_store_equity': False})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
# Issued at: 2025-01-23 19:59:23.236624
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('2005726', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Studentenfutter Classic (2005726) [3] = 2.50€>)
# Issued at: 2025-01-23 19:59:23.487347
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Studentenfutter Classic (2005726) [3] = 2.50€>)
StoreHelper.customer_purchase(*('2005726', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
# Issued at: 2025-01-23 19:59:23.554213
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('2005726', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Studentenfutter Classic (2005726) [2] = 2.50€>)
# Issued at: 2025-01-23 19:59:23.821358
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Studentenfutter Classic (2005726) [2] = 2.50€>)
StoreHelper.customer_purchase(*('2005726', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
# Issued at: 2025-01-23 19:59:23.882989
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('2005726', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Studentenfutter Classic (2005726) [1] = 2.50€>)
# Issued at: 2025-01-23 19:59:24.148119
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Studentenfutter Classic (2005726) [1] = 2.50€>)
StoreHelper.customer_purchase(*('2005726', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
# Issued at: 2025-01-23 19:59:24.212399
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('2005726', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Studentenfutter Classic (2005726) [0] = 2.50€>)
# Issued at: 2025-01-23 19:59:24.473429
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Studentenfutter Classic (2005726) [0] = 2.50€>)
StoreHelper.customer_purchase(*('2005726', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: restock_product, Args: ('250047238', 2, 2.65, <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {'auth_user': <User: anonymous>, 'used_store_equity': False}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 2 x Alesto Nuts Royal restocked.>)
# Issued at: 2025-01-23 19:59:24.566248
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 2 x Alesto Nuts Royal restocked.>)
StoreHelper.restock_product(*('250047238', 2, 2.65, <Logger donknabberello.Mocker (DEBUG)>), **{'auth_user': <User: anonymous>, 'used_store_equity': False})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('3.20'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.20>)
# Issued at: 2025-01-23 19:59:24.644833
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.20>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('3.20'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('250047238', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nuts Royal (250047238) [1] = 3.20€>)
# Issued at: 2025-01-23 19:59:24.894999
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nuts Royal (250047238) [1] = 3.20€>)
StoreHelper.customer_purchase(*('250047238', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('3.20'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.20>)
# Issued at: 2025-01-23 19:59:24.957168
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.20>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('3.20'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('250047238', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nuts Royal (250047238) [0] = 3.20€>)
# Issued at: 2025-01-23 19:59:25.236230
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nuts Royal (250047238) [0] = 3.20€>)
StoreHelper.customer_purchase(*('250047238', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: restock_product, Args: ('20559625', 2, 2.59, <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {'auth_user': <User: anonymous>, 'used_store_equity': False}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 2 x Alesto Nussmix mit Pistazie restocked.>)
# Issued at: 2025-01-23 19:59:25.333530
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 2 x Alesto Nussmix mit Pistazie restocked.>)
StoreHelper.restock_product(*('20559625', 2, 2.59, <Logger donknabberello.Mocker (DEBUG)>), **{'auth_user': <User: anonymous>, 'used_store_equity': False})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('3.20'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.20>)
# Issued at: 2025-01-23 19:59:25.443109
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.20>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('3.20'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('20559625', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nussmix mit Pistazie (20559625) [1] = 3.20€>)
# Issued at: 2025-01-23 19:59:25.682978
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nussmix mit Pistazie (20559625) [1] = 3.20€>)
StoreHelper.customer_purchase(*('20559625', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('3.20'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.20>)
# Issued at: 2025-01-23 19:59:25.779114
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.20>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('3.20'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('20559625', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nussmix mit Pistazie (20559625) [0] = 3.20€>)
# Issued at: 2025-01-23 19:59:26.105103
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nussmix mit Pistazie (20559625) [0] = 3.20€>)
StoreHelper.customer_purchase(*('20559625', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: restock_product, Args: ('20815394', 2, 1.99, <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {'auth_user': <User: anonymous>, 'used_store_equity': False}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 2 x Alesto Nuss-Frucht-Mix restocked.>)
# Issued at: 2025-01-23 19:59:26.246154
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 2 x Alesto Nuss-Frucht-Mix restocked.>)
StoreHelper.restock_product(*('20815394', 2, 1.99, <Logger donknabberello.Mocker (DEBUG)>), **{'auth_user': <User: anonymous>, 'used_store_equity': False})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
# Issued at: 2025-01-23 19:59:26.342431
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('20815394', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nuss-Frucht-Mix (20815394) [1] = 2.50€>)
# Issued at: 2025-01-23 19:59:26.703087
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nuss-Frucht-Mix (20815394) [1] = 2.50€>)
StoreHelper.customer_purchase(*('20815394', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
# Issued at: 2025-01-23 19:59:26.797567
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('20815394', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nuss-Frucht-Mix (20815394) [0] = 2.50€>)
# Issued at: 2025-01-23 19:59:27.151707
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nuss-Frucht-Mix (20815394) [0] = 2.50€>)
StoreHelper.customer_purchase(*('20815394', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: restock_product, Args: ('20815400', 2, 1.99, <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {'auth_user': <User: anonymous>, 'used_store_equity': False}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 2 x Alesto Cashew-Cranberry-Mix restocked.>)
# Issued at: 2025-01-23 19:59:27.275435
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 2 x Alesto Cashew-Cranberry-Mix restocked.>)
StoreHelper.restock_product(*('20815400', 2, 1.99, <Logger donknabberello.Mocker (DEBUG)>), **{'auth_user': <User: anonymous>, 'used_store_equity': False})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
# Issued at: 2025-01-23 19:59:27.358672
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('20815400', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Cashew-Cranberry-Mix (20815400) [1] = 2.50€>)
# Issued at: 2025-01-23 19:59:27.636817
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Cashew-Cranberry-Mix (20815400) [1] = 2.50€>)
StoreHelper.customer_purchase(*('20815400', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
# Issued at: 2025-01-23 19:59:27.700897
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('20815400', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Cashew-Cranberry-Mix (20815400) [0] = 2.50€>)
# Issued at: 2025-01-23 19:59:28.042264
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Cashew-Cranberry-Mix (20815400) [0] = 2.50€>)
StoreHelper.customer_purchase(*('20815400', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: restock_product, Args: ('20333737', 4, 1.99, <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {'auth_user': <User: anonymous>, 'used_store_equity': False}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 4 x Alesto Cashew-Erdnuss-Mix (Honig Salz) restocked.>)
# Issued at: 2025-01-23 19:59:28.175210
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 4 x Alesto Cashew-Erdnuss-Mix (Honig Salz) restocked.>)
StoreHelper.restock_product(*('20333737', 4, 1.99, <Logger donknabberello.Mocker (DEBUG)>), **{'auth_user': <User: anonymous>, 'used_store_equity': False})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
# Issued at: 2025-01-23 19:59:28.253280
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('20333737', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Cashew-Erdnuss-Mix (Honig Salz) (20333737) [3] = 2.50€>)
# Issued at: 2025-01-23 19:59:28.530801
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Cashew-Erdnuss-Mix (Honig Salz) (20333737) [3] = 2.50€>)
StoreHelper.customer_purchase(*('20333737', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
# Issued at: 2025-01-23 19:59:28.590502
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('20333737', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Cashew-Erdnuss-Mix (Honig Salz) (20333737) [2] = 2.50€>)
# Issued at: 2025-01-23 19:59:28.887545
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Cashew-Erdnuss-Mix (Honig Salz) (20333737) [2] = 2.50€>)
StoreHelper.customer_purchase(*('20333737', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
# Issued at: 2025-01-23 19:59:29.049922
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('20333737', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Cashew-Erdnuss-Mix (Honig Salz) (20333737) [1] = 2.50€>)
# Issued at: 2025-01-23 19:59:29.302535
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Cashew-Erdnuss-Mix (Honig Salz) (20333737) [1] = 2.50€>)
StoreHelper.customer_purchase(*('20333737', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
# Issued at: 2025-01-23 19:59:29.384142
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('20333737', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Cashew-Erdnuss-Mix (Honig Salz) (20333737) [0] = 2.50€>)
# Issued at: 2025-01-23 19:59:29.666003
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Cashew-Erdnuss-Mix (Honig Salz) (20333737) [0] = 2.50€>)
StoreHelper.customer_purchase(*('20333737', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: restock_product, Args: ('409920000466', 2, 0.99, <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {'auth_user': <User: anonymous>, 'used_store_equity': False}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 2 x SnackFun Teigumantelte Erdnüsse (Wasabi) restocked.>)
# Issued at: 2025-01-23 19:59:29.764644
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 2 x SnackFun Teigumantelte Erdnüsse (Wasabi) restocked.>)
StoreHelper.restock_product(*('409920000466', 2, 0.99, <Logger donknabberello.Mocker (DEBUG)>), **{'auth_user': <User: anonymous>, 'used_store_equity': False})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('1.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 1.50>)
# Issued at: 2025-01-23 19:59:29.862408
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 1.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('1.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('409920000466', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x SnackFun Teigumantelte Erdnüsse (Wasabi) (409920000466) [1] = 1.50€>)
# Issued at: 2025-01-23 19:59:30.178117
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x SnackFun Teigumantelte Erdnüsse (Wasabi) (409920000466) [1] = 1.50€>)
StoreHelper.customer_purchase(*('409920000466', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('1.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 1.50>)
# Issued at: 2025-01-23 19:59:30.282349
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 1.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('1.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('409920000466', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x SnackFun Teigumantelte Erdnüsse (Wasabi) (409920000466) [0] = 1.50€>)
# Issued at: 2025-01-23 19:59:30.605629
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x SnackFun Teigumantelte Erdnüsse (Wasabi) (409920000466) [0] = 1.50€>)
StoreHelper.customer_purchase(*('409920000466', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: restock_product, Args: ('4104420026681', 2, 3.48, <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {'auth_user': <User: anonymous>, 'used_store_equity': False}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 2 x Bio Natura Cashew-Cranberry restocked.>)
# Issued at: 2025-01-23 19:59:30.724183
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 2 x Bio Natura Cashew-Cranberry restocked.>)
StoreHelper.restock_product(*('4104420026681', 2, 3.48, <Logger donknabberello.Mocker (DEBUG)>), **{'auth_user': <User: anonymous>, 'used_store_equity': False})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('4.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 4.50>)
# Issued at: 2025-01-23 19:59:30.826782
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 4.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('4.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('4104420026681', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Bio Natura Cashew-Cranberry (4104420026681) [1] = 4.50€>)
# Issued at: 2025-01-23 19:59:31.143645
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Bio Natura Cashew-Cranberry (4104420026681) [1] = 4.50€>)
StoreHelper.customer_purchase(*('4104420026681', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('4.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 4.50>)
# Issued at: 2025-01-23 19:59:31.223078
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 4.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('4.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('4104420026681', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Bio Natura Cashew-Cranberry (4104420026681) [0] = 4.50€>)
# Issued at: 2025-01-23 19:59:31.552093
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Bio Natura Cashew-Cranberry (4104420026681) [0] = 4.50€>)
StoreHelper.customer_purchase(*('4104420026681', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: restock_product, Args: ('4061462405839', 2, 3.48, <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {'auth_user': <User: anonymous>, 'used_store_equity': False}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 2 x Bio Natura Studentenfutter restocked.>)
# Issued at: 2025-01-23 19:59:31.655229
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 2 x Bio Natura Studentenfutter restocked.>)
StoreHelper.restock_product(*('4061462405839', 2, 3.48, <Logger donknabberello.Mocker (DEBUG)>), **{'auth_user': <User: anonymous>, 'used_store_equity': False})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('4.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 4.50>)
# Issued at: 2025-01-23 19:59:31.732306
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 4.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('4.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('4061462405839', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Bio Natura Studentenfutter (4061462405839) [1] = 4.50€>)
# Issued at: 2025-01-23 19:59:32.446101
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Bio Natura Studentenfutter (4061462405839) [1] = 4.50€>)
StoreHelper.customer_purchase(*('4061462405839', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('4.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 4.50>)
# Issued at: 2025-01-23 19:59:32.653657
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 4.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('4.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('4061462405839', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Bio Natura Studentenfutter (4061462405839) [0] = 4.50€>)
# Issued at: 2025-01-23 19:59:32.933764
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Bio Natura Studentenfutter (4061462405839) [0] = 4.50€>)
StoreHelper.customer_purchase(*('4061462405839', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: restock_product, Args: ('4047247108225', 1, 1.49, <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {'auth_user': <User: anonymous>, 'used_store_equity': False}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 1 x Asia-Snack Shogun Mix restocked.>)
# Issued at: 2025-01-23 19:59:33.050505
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 1 x Asia-Snack Shogun Mix restocked.>)
StoreHelper.restock_product(*('4047247108225', 1, 1.49, <Logger donknabberello.Mocker (DEBUG)>), **{'auth_user': <User: anonymous>, 'used_store_equity': False})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('2.00'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.00>)
# Issued at: 2025-01-23 19:59:33.123152
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.00>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('2.00'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('4047247108225', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Asia-Snack Shogun Mix (4047247108225) [0] = 2.00€>)
# Issued at: 2025-01-23 19:59:33.375418
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Asia-Snack Shogun Mix (4047247108225) [0] = 2.00€>)
StoreHelper.customer_purchase(*('4047247108225', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: restock_product, Args: ('4099200143286', 1, 2.99, <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {'auth_user': <User: anonymous>, 'used_store_equity': False}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 1 x ZZM Apfelchips restocked.>)
# Issued at: 2025-01-23 19:59:33.465704
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 1 x ZZM Apfelchips restocked.>)
StoreHelper.restock_product(*('4099200143286', 1, 2.99, <Logger donknabberello.Mocker (DEBUG)>), **{'auth_user': <User: anonymous>, 'used_store_equity': False})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('3.70'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.70>)
# Issued at: 2025-01-23 19:59:33.546509
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.70>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('3.70'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('4099200143286', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x ZZM Apfelchips (4099200143286) [0] = 3.70€>)
# Issued at: 2025-01-23 19:59:33.885578
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x ZZM Apfelchips (4099200143286) [0] = 3.70€>)
StoreHelper.customer_purchase(*('4099200143286', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: restock_product, Args: ('2005672', 4, 0.89, <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {'auth_user': <User: anonymous>, 'used_store_equity': False}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 4 x Alesto Erdnüsse pikant gewürzt restocked.>)
# Issued at: 2025-01-23 19:59:33.986551
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 4 x Alesto Erdnüsse pikant gewürzt restocked.>)
StoreHelper.restock_product(*('2005672', 4, 0.89, <Logger donknabberello.Mocker (DEBUG)>), **{'auth_user': <User: anonymous>, 'used_store_equity': False})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('1.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 1.50>)
# Issued at: 2025-01-23 19:59:34.068458
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 1.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('1.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('2005672', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Erdnüsse pikant gewürzt (2005672) [3] = 1.50€>)
# Issued at: 2025-01-23 19:59:34.298258
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Erdnüsse pikant gewürzt (2005672) [3] = 1.50€>)
StoreHelper.customer_purchase(*('2005672', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('1.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 1.50>)
# Issued at: 2025-01-23 19:59:34.375839
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 1.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('1.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('2005672', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Erdnüsse pikant gewürzt (2005672) [2] = 1.50€>)
# Issued at: 2025-01-23 19:59:34.709822
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Erdnüsse pikant gewürzt (2005672) [2] = 1.50€>)
StoreHelper.customer_purchase(*('2005672', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('1.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 1.50>)
# Issued at: 2025-01-23 19:59:34.782444
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 1.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('1.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('2005672', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Erdnüsse pikant gewürzt (2005672) [1] = 1.50€>)
# Issued at: 2025-01-23 19:59:35.077765
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Erdnüsse pikant gewürzt (2005672) [1] = 1.50€>)
StoreHelper.customer_purchase(*('2005672', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('1.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 1.50>)
# Issued at: 2025-01-23 19:59:35.153410
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 1.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('1.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('2005672', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Erdnüsse pikant gewürzt (2005672) [0] = 1.50€>)
# Issued at: 2025-01-23 19:59:35.467042
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Erdnüsse pikant gewürzt (2005672) [0] = 1.50€>)
StoreHelper.customer_purchase(*('2005672', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: restock_product, Args: ('2005726', 3, 1.99, <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {'auth_user': <User: anonymous>, 'used_store_equity': False}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 3 x Alesto Studentenfutter Classic restocked.>)
# Issued at: 2025-01-23 19:59:35.593079
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 3 x Alesto Studentenfutter Classic restocked.>)
StoreHelper.restock_product(*('2005726', 3, 1.99, <Logger donknabberello.Mocker (DEBUG)>), **{'auth_user': <User: anonymous>, 'used_store_equity': False})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
# Issued at: 2025-01-23 19:59:35.667093
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('2005726', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Studentenfutter Classic (2005726) [2] = 2.50€>)
# Issued at: 2025-01-23 19:59:35.936929
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Studentenfutter Classic (2005726) [2] = 2.50€>)
StoreHelper.customer_purchase(*('2005726', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
# Issued at: 2025-01-23 19:59:35.998497
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('2005726', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Studentenfutter Classic (2005726) [1] = 2.50€>)
# Issued at: 2025-01-23 19:59:36.303322
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Studentenfutter Classic (2005726) [1] = 2.50€>)
StoreHelper.customer_purchase(*('2005726', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
# Issued at: 2025-01-23 19:59:36.378796
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('2005726', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Studentenfutter Classic (2005726) [0] = 2.50€>)
# Issued at: 2025-01-23 19:59:36.666717
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Studentenfutter Classic (2005726) [0] = 2.50€>)
StoreHelper.customer_purchase(*('2005726', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: restock_product, Args: ('20772970', 2, 2.59, <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {'auth_user': <User: anonymous>, 'used_store_equity': False}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 2 x Alesto Nussmix mit Makadamia restocked.>)
# Issued at: 2025-01-23 19:59:36.771720
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 2 x Alesto Nussmix mit Makadamia restocked.>)
StoreHelper.restock_product(*('20772970', 2, 2.59, <Logger donknabberello.Mocker (DEBUG)>), **{'auth_user': <User: anonymous>, 'used_store_equity': False})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('3.20'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.20>)
# Issued at: 2025-01-23 19:59:36.862800
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.20>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('3.20'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('20772970', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nussmix mit Makadamia (20772970) [1] = 3.20€>)
# Issued at: 2025-01-23 19:59:37.119397
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nussmix mit Makadamia (20772970) [1] = 3.20€>)
StoreHelper.customer_purchase(*('20772970', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('3.20'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.20>)
# Issued at: 2025-01-23 19:59:37.183499
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.20>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('3.20'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('20772970', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nussmix mit Makadamia (20772970) [0] = 3.20€>)
# Issued at: 2025-01-23 19:59:37.493292
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nussmix mit Makadamia (20772970) [0] = 3.20€>)
StoreHelper.customer_purchase(*('20772970', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: restock_product, Args: ('250047238', 3, 2.65, <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {'auth_user': <User: anonymous>, 'used_store_equity': False}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 3 x Alesto Nuts Royal restocked.>)
# Issued at: 2025-01-23 19:59:37.604664
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 3 x Alesto Nuts Royal restocked.>)
StoreHelper.restock_product(*('250047238', 3, 2.65, <Logger donknabberello.Mocker (DEBUG)>), **{'auth_user': <User: anonymous>, 'used_store_equity': False})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('3.20'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.20>)
# Issued at: 2025-01-23 19:59:37.687927
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.20>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('3.20'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('250047238', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nuts Royal (250047238) [2] = 3.20€>)
# Issued at: 2025-01-23 19:59:37.954982
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nuts Royal (250047238) [2] = 3.20€>)
StoreHelper.customer_purchase(*('250047238', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('3.20'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.20>)
# Issued at: 2025-01-23 19:59:38.017039
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.20>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('3.20'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('250047238', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nuts Royal (250047238) [1] = 3.20€>)
# Issued at: 2025-01-23 19:59:38.306998
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nuts Royal (250047238) [1] = 3.20€>)
StoreHelper.customer_purchase(*('250047238', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('3.20'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.20>)
# Issued at: 2025-01-23 19:59:38.371961
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.20>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('3.20'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('250047238', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nuts Royal (250047238) [0] = 3.20€>)
# Issued at: 2025-01-23 19:59:38.688114
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nuts Royal (250047238) [0] = 3.20€>)
StoreHelper.customer_purchase(*('250047238', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: restock_product, Args: ('20559625', 2, 2.59, <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {'auth_user': <User: anonymous>, 'used_store_equity': False}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 2 x Alesto Nussmix mit Pistazie restocked.>)
# Issued at: 2025-01-23 19:59:38.824915
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 2 x Alesto Nussmix mit Pistazie restocked.>)
StoreHelper.restock_product(*('20559625', 2, 2.59, <Logger donknabberello.Mocker (DEBUG)>), **{'auth_user': <User: anonymous>, 'used_store_equity': False})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('3.20'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.20>)
# Issued at: 2025-01-23 19:59:38.939795
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.20>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('3.20'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('20559625', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nussmix mit Pistazie (20559625) [1] = 3.20€>)
# Issued at: 2025-01-23 19:59:39.312658
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nussmix mit Pistazie (20559625) [1] = 3.20€>)
StoreHelper.customer_purchase(*('20559625', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('3.20'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.20>)
# Issued at: 2025-01-23 19:59:39.484765
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 3.20>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('3.20'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('20559625', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nussmix mit Pistazie (20559625) [0] = 3.20€>)
# Issued at: 2025-01-23 19:59:39.791880
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nussmix mit Pistazie (20559625) [0] = 3.20€>)
StoreHelper.customer_purchase(*('20559625', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: restock_product, Args: ('20815394', 3, 1.99, <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {'auth_user': <User: anonymous>, 'used_store_equity': False}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 3 x Alesto Nuss-Frucht-Mix restocked.>)
# Issued at: 2025-01-23 19:59:39.889478
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 3 x Alesto Nuss-Frucht-Mix restocked.>)
StoreHelper.restock_product(*('20815394', 3, 1.99, <Logger donknabberello.Mocker (DEBUG)>), **{'auth_user': <User: anonymous>, 'used_store_equity': False})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
# Issued at: 2025-01-23 19:59:39.972434
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('20815394', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nuss-Frucht-Mix (20815394) [2] = 2.50€>)
# Issued at: 2025-01-23 19:59:40.383315
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nuss-Frucht-Mix (20815394) [2] = 2.50€>)
StoreHelper.customer_purchase(*('20815394', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
# Issued at: 2025-01-23 19:59:40.473895
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('20815394', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nuss-Frucht-Mix (20815394) [1] = 2.50€>)
# Issued at: 2025-01-23 19:59:40.748308
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nuss-Frucht-Mix (20815394) [1] = 2.50€>)
StoreHelper.customer_purchase(*('20815394', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
# Issued at: 2025-01-23 19:59:40.841167
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('20815394', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nuss-Frucht-Mix (20815394) [0] = 2.50€>)
# Issued at: 2025-01-23 19:59:41.175535
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Nuss-Frucht-Mix (20815394) [0] = 2.50€>)
StoreHelper.customer_purchase(*('20815394', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: restock_product, Args: ('20815400', 4, 1.99, <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {'auth_user': <User: anonymous>, 'used_store_equity': False}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 4 x Alesto Cashew-Cranberry-Mix restocked.>)
# Issued at: 2025-01-23 19:59:41.310896
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 4 x Alesto Cashew-Cranberry-Mix restocked.>)
StoreHelper.restock_product(*('20815400', 4, 1.99, <Logger donknabberello.Mocker (DEBUG)>), **{'auth_user': <User: anonymous>, 'used_store_equity': False})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
# Issued at: 2025-01-23 19:59:41.411030
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('20815400', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Cashew-Cranberry-Mix (20815400) [3] = 2.50€>)
# Issued at: 2025-01-23 19:59:41.716759
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Cashew-Cranberry-Mix (20815400) [3] = 2.50€>)
StoreHelper.customer_purchase(*('20815400', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
# Issued at: 2025-01-23 19:59:41.857172
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('20815400', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Cashew-Cranberry-Mix (20815400) [2] = 2.50€>)
# Issued at: 2025-01-23 19:59:42.221314
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Cashew-Cranberry-Mix (20815400) [2] = 2.50€>)
StoreHelper.customer_purchase(*('20815400', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
# Issued at: 2025-01-23 19:59:42.336470
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('20815400', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Cashew-Cranberry-Mix (20815400) [1] = 2.50€>)
# Issued at: 2025-01-23 19:59:42.586332
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Cashew-Cranberry-Mix (20815400) [1] = 2.50€>)
StoreHelper.customer_purchase(*('20815400', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
# Issued at: 2025-01-23 19:59:42.652880
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('20815400', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Cashew-Cranberry-Mix (20815400) [0] = 2.50€>)
# Issued at: 2025-01-23 19:59:42.981776
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Cashew-Cranberry-Mix (20815400) [0] = 2.50€>)
StoreHelper.customer_purchase(*('20815400', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: restock_product, Args: ('20333737', 4, 1.99, <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {'auth_user': <User: anonymous>, 'used_store_equity': False}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 4 x Alesto Cashew-Erdnuss-Mix (Honig Salz) restocked.>)
# Issued at: 2025-01-23 19:59:43.195895
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 4 x Alesto Cashew-Erdnuss-Mix (Honig Salz) restocked.>)
StoreHelper.restock_product(*('20333737', 4, 1.99, <Logger donknabberello.Mocker (DEBUG)>), **{'auth_user': <User: anonymous>, 'used_store_equity': False})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
# Issued at: 2025-01-23 19:59:43.379747
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('20333737', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Cashew-Erdnuss-Mix (Honig Salz) (20333737) [3] = 2.50€>)
# Issued at: 2025-01-23 19:59:43.692240
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Cashew-Erdnuss-Mix (Honig Salz) (20333737) [3] = 2.50€>)
StoreHelper.customer_purchase(*('20333737', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
# Issued at: 2025-01-23 19:59:43.753023
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('20333737', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Cashew-Erdnuss-Mix (Honig Salz) (20333737) [2] = 2.50€>)
# Issued at: 2025-01-23 19:59:44.083689
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Cashew-Erdnuss-Mix (Honig Salz) (20333737) [2] = 2.50€>)
StoreHelper.customer_purchase(*('20333737', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
# Issued at: 2025-01-23 19:59:44.173271
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('20333737', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Cashew-Erdnuss-Mix (Honig Salz) (20333737) [1] = 2.50€>)
# Issued at: 2025-01-23 19:59:44.857650
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Cashew-Erdnuss-Mix (Honig Salz) (20333737) [1] = 2.50€>)
StoreHelper.customer_purchase(*('20333737', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
# Issued at: 2025-01-23 19:59:44.935352
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 2.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('2.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('20333737', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Cashew-Erdnuss-Mix (Honig Salz) (20333737) [0] = 2.50€>)
# Issued at: 2025-01-23 19:59:45.233338
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x Alesto Cashew-Erdnuss-Mix (Honig Salz) (20333737) [0] = 2.50€>)
StoreHelper.customer_purchase(*('20333737', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: restock_product, Args: ('409920000442', 4, 0.99, <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {'auth_user': <User: anonymous>, 'used_store_equity': False}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 4 x SnackFun Teigumantelte Erdnüsse restocked.>)
# Issued at: 2025-01-23 19:59:45.459801
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 4 x SnackFun Teigumantelte Erdnüsse restocked.>)
StoreHelper.restock_product(*('409920000442', 4, 0.99, <Logger donknabberello.Mocker (DEBUG)>), **{'auth_user': <User: anonymous>, 'used_store_equity': False})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('1.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 1.50>)
# Issued at: 2025-01-23 19:59:45.570342
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 1.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('1.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('409920000442', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x SnackFun Teigumantelte Erdnüsse (409920000442) [3] = 1.50€>)
# Issued at: 2025-01-23 19:59:45.904534
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x SnackFun Teigumantelte Erdnüsse (409920000442) [3] = 1.50€>)
StoreHelper.customer_purchase(*('409920000442', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('1.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 1.50>)
# Issued at: 2025-01-23 19:59:45.999714
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 1.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('1.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('409920000442', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x SnackFun Teigumantelte Erdnüsse (409920000442) [2] = 1.50€>)
# Issued at: 2025-01-23 19:59:46.296295
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x SnackFun Teigumantelte Erdnüsse (409920000442) [2] = 1.50€>)
StoreHelper.customer_purchase(*('409920000442', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('1.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 1.50>)
# Issued at: 2025-01-23 19:59:46.387462
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 1.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('1.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('409920000442', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x SnackFun Teigumantelte Erdnüsse (409920000442) [1] = 1.50€>)
# Issued at: 2025-01-23 19:59:46.733054
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x SnackFun Teigumantelte Erdnüsse (409920000442) [1] = 1.50€>)
StoreHelper.customer_purchase(*('409920000442', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('1.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 1.50>)
# Issued at: 2025-01-23 19:59:46.808629
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 1.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('1.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('409920000442', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x SnackFun Teigumantelte Erdnüsse (409920000442) [0] = 1.50€>)
# Issued at: 2025-01-23 19:59:47.070941
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x SnackFun Teigumantelte Erdnüsse (409920000442) [0] = 1.50€>)
StoreHelper.customer_purchase(*('409920000442', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: restock_product, Args: ('409920000466', 1, 0.99, <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {'auth_user': <User: anonymous>, 'used_store_equity': False}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 1 x SnackFun Teigumantelte Erdnüsse (Wasabi) restocked.>)
# Issued at: 2025-01-23 19:59:47.160971
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock: 1 x SnackFun Teigumantelte Erdnüsse (Wasabi) restocked.>)
StoreHelper.restock_product(*('409920000466', 1, 0.99, <Logger donknabberello.Mocker (DEBUG)>), **{'auth_user': <User: anonymous>, 'used_store_equity': False})

# Command: customer_add_deposit, Args: (<Customer: Anon Ymous (anonymous)>, Decimal('1.50'), <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 1.50>)
# Issued at: 2025-01-23 19:59:47.252378
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit: Anon Ymous deposited 1.50>)
StoreHelper.customer_add_deposit(*(<Customer: Anon Ymous (anonymous)>, Decimal('1.50'), <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: customer_purchase, Args: ('409920000466', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x SnackFun Teigumantelte Erdnüsse (Wasabi) (409920000466) [0] = 1.50€>)
# Issued at: 2025-01-23 19:59:47.558881
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase: Purchase for Anon Ymous (anonymous): 1 x SnackFun Teigumantelte Erdnüsse (Wasabi) (409920000466) [0] = 1.50€>)
StoreHelper.customer_purchase(*('409920000466', 1, 'NoCardNumber', <Logger donknabberello.Mocker (DEBUG)>), **{})

# Command: get_or_create_product, Args: ('4014400927139', 'Nimm2 Lachgummi', Decimal('4.5'), Decimal('0'), <Logger donknabberello.webviews.ManageProductsView (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=4014400927139>)
# Issued at: 2025-01-23 20:38:05.509329
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=4014400927139>)
StoreHelper.get_or_create_product(*('4014400927139', 'Nimm2 Lachgummi', Decimal('4.5'), Decimal('0'), <Logger donknabberello.webviews.ManageProductsView (DEBUG)>), **{})

# Command: get_or_create_product, Args: ('4014400927139', 'Nimm2 Lachgummi', Decimal('4.5'), Decimal('0'), <Logger donknabberello.webviews.ManageProductsView (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=4014400927139>)
# Issued at: 2025-01-23 20:51:33.438058
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=4014400927139>)
StoreHelper.get_or_create_product(*('4014400927139', 'Nimm2 Lachgummi', Decimal('4.5'), Decimal('0'), <Logger donknabberello.webviews.ManageProductsView (DEBUG)>), **{})

# Command: restock_product, Args: ('4014400927139', 1, Decimal('1.5'), <SimpleLazyObject: <User pk=1>>, <Logger donknabberello.webviews.ManageStockView (DEBUG)>, False), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-23 21:07:58.869696
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*('4014400927139', 1, Decimal('1.5'), <SimpleLazyObject: <User pk=1>>, <Logger donknabberello.webviews.ManageStockView (DEBUG)>, False), **{})

# Command: create_new_customer, Args: ('c.schmidt', 'CHRISTOPH', 'SCHMIDT', 'keineangabe1995@gmail.com', 100.0, '1287978595083136', <Logger donknabberello.webviews.ManageCustomersView (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <Customer pk=1287978595083136>)
# Issued at: 2025-01-23 21:15:41.300743
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <Customer pk=1287978595083136>)
StoreHelper.create_new_customer(*('c.schmidt', 'CHRISTOPH', 'SCHMIDT', 'keineangabe1995@gmail.com', 100.0, '1287978595083136', <Logger donknabberello.webviews.ManageCustomersView (DEBUG)>), **{})

# Command: customer_purchase, Args: ('4014400927139', 1, '1287978595083136'), Kwargs: {'logger': <Logger donknabberello.webviews.CustomerPurchaseAPIView (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
# Issued at: 2025-01-23 21:30:15.033957
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
StoreHelper.customer_purchase(*('4014400927139', 1, '1287978595083136'), **{'logger': <Logger donknabberello.webviews.CustomerPurchaseAPIView (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <MagicMock id='547614586960'>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 10:22:25.126798
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <MagicMock id='547614586960'>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('1.5'), 'logger': <MagicMock id='547615345360'>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 10:22:25.399525
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('1.5'), 'logger': <MagicMock id='547615345360'>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Updated Product', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.05'), 'logger': <MagicMock id='547613943504'>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 10:22:25.710512
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Updated Product', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.05'), 'logger': <MagicMock id='547613943504'>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <MagicMock id='547773987728'>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 10:23:37.804776
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <MagicMock id='547773987728'>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('1.5'), 'logger': <MagicMock id='547770142352'>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 10:23:38.081840
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('1.5'), 'logger': <MagicMock id='547770142352'>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Updated Product', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.05'), 'logger': <MagicMock id='547769792720'>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 10:23:38.368922
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Updated Product', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.05'), 'logger': <MagicMock id='547769792720'>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <MagicMock id='548358554256'>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 10:24:06.571353
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <MagicMock id='548358554256'>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('1.5'), 'logger': <MagicMock id='548359305808'>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 10:24:06.791261
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('1.5'), 'logger': <MagicMock id='548359305808'>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Updated Product', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.05'), 'logger': <MagicMock id='548357831760'>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 10:24:07.088510
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Updated Product', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.05'), 'logger': <MagicMock id='548357831760'>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <MagicMock id='548140011536'>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 10:27:09.436991
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <MagicMock id='548140011536'>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('1.5'), 'logger': <MagicMock id='548138954000'>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 10:27:09.721121
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('1.5'), 'logger': <MagicMock id='548138954000'>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Updated Product', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.05'), 'logger': <MagicMock id='548139856016'>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 10:27:10.059035
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Updated Product', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.05'), 'logger': <MagicMock id='548139856016'>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <MagicMock id='547714283344'>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 10:28:36.858623
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <MagicMock id='547714283344'>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('1.5'), 'logger': <MagicMock id='547715169168'>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 10:28:37.115222
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('1.5'), 'logger': <MagicMock id='547715169168'>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Updated Product', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.05'), 'logger': <MagicMock id='547714007184'>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 10:28:37.392698
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Updated Product', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.05'), 'logger': <MagicMock id='547714007184'>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <MagicMock id='547596816144'>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 10:29:15.705255
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <MagicMock id='547596816144'>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('1.5'), 'logger': <MagicMock id='547597659984'>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 10:29:15.979265
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('1.5'), 'logger': <MagicMock id='547597659984'>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Updated Product', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.05'), 'logger': <MagicMock id='547596343760'>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 10:29:16.245387
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Updated Product', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.05'), 'logger': <MagicMock id='547596343760'>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <MagicMock id='548000555984'>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 10:51:09.013983
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <MagicMock id='548000555984'>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('1.5'), 'logger': <MagicMock id='548002003536'>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 10:51:09.315588
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('1.5'), 'logger': <MagicMock id='548002003536'>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Updated Product', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.05'), 'logger': <MagicMock id='548000047888'>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 10:51:09.601108
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Updated Product', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.05'), 'logger': <MagicMock id='548000047888'>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <MagicMock id='548355336656'>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 10:51:53.163070
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <MagicMock id='548355336656'>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('1.5'), 'logger': <MagicMock id='548384505616'>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 10:51:53.450587
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('1.5'), 'logger': <MagicMock id='548384505616'>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Updated Product', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.05'), 'logger': <MagicMock id='548354427856'>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 10:51:53.727936
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Updated Product', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.05'), 'logger': <MagicMock id='548354427856'>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <MagicMock id='548019366928'>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 10:56:29.288287
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <MagicMock id='548019366928'>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('1.5'), 'logger': <MagicMock id='548018184016'>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 10:56:29.608790
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('1.5'), 'logger': <MagicMock id='548018184016'>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <MagicMock id='548018174864'>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 10:56:29.902181
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <MagicMock id='548018174864'>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Updated Product', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.05'), 'logger': <MagicMock id='548016717200'>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 10:56:29.937098
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Updated Product', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.05'), 'logger': <MagicMock id='548016717200'>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <MagicMock id='547791841744'>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 10:58:10.736264
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <MagicMock id='547791841744'>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('1.5'), 'logger': <MagicMock id='547792694800'>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 10:58:11.010530
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('1.5'), 'logger': <MagicMock id='547792694800'>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Updated Product', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.05'), 'logger': <MagicMock id='547791329552'>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 10:58:11.273202
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Updated Product', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.05'), 'logger': <MagicMock id='547791329552'>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger test_logger (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 11:05:15.255311
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger test_logger (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger test_logger (ERROR)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 11:05:15.535327
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger test_logger (ERROR)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('1.5'), 'logger': <Logger test_logger (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 11:07:26.581491
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('1.5'), 'logger': <Logger test_logger (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger test_logger (ERROR)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 11:07:26.848399
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger test_logger (ERROR)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Updated Product', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.05'), 'logger': <Logger test_logger (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 11:07:26.882113
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Updated Product', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.05'), 'logger': <Logger test_logger (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger test_logger (ERROR)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 11:09:37.522137
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger test_logger (ERROR)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('1.5'), 'logger': <Logger test_logger (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 11:09:37.813322
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('1.5'), 'logger': <Logger test_logger (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger test_logger (ERROR)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 11:09:38.076517
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger test_logger (ERROR)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Updated Product', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.05'), 'logger': <Logger test_logger (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 11:09:38.111030
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Updated Product', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.05'), 'logger': <Logger test_logger (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger test_logger (ERROR)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 11:13:07.567203
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger test_logger (ERROR)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger test_logger (ERROR)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 11:13:08.106700
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger test_logger (ERROR)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Updated Product', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.05'), 'logger': <Logger test_logger (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 11:13:08.141268
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Updated Product', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.05'), 'logger': <Logger test_logger (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger test_logger (ERROR)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 11:15:27.729209
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger test_logger (ERROR)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger test_logger (ERROR)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 11:15:28.323332
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger test_logger (ERROR)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Updated Product', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.05'), 'logger': <Logger test_logger (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 11:15:28.380881
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Updated Product', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.05'), 'logger': <Logger test_logger (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger test_logger (ERROR)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 11:16:31.146894
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger test_logger (ERROR)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger test_logger (ERROR)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 11:16:31.729077
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger test_logger (ERROR)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Updated Product', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.05'), 'logger': <Logger test_logger (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 11:16:31.785165
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Updated Product', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.05'), 'logger': <Logger test_logger (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger test_logger (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 11:17:36.977223
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger test_logger (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger test_logger (ERROR)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 11:17:37.548403
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger test_logger (ERROR)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Updated Product', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.05'), 'logger': <Logger test_logger (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 11:17:37.585049
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Updated Product', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.05'), 'logger': <Logger test_logger (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger test_logger (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 11:19:07.325592
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger test_logger (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger test_logger (ERROR)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 11:19:07.920074
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger test_logger (ERROR)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Updated Product', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.05'), 'logger': <Logger test_logger (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 11:19:07.953997
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Updated Product', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.05'), 'logger': <Logger test_logger (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger test_logger (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 11:38:28.301477
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger test_logger (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger test_logger (ERROR)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 11:38:29.231528
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger test_logger (ERROR)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Updated Product', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.05'), 'logger': <Logger test_logger (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 11:38:29.282832
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Updated Product', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.05'), 'logger': <Logger test_logger (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <MagicMock id='548254344464'>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
# Issued at: 2025-01-25 11:38:29.547664
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <MagicMock id='548254344464'>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 11:42:15.187781
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 11:43:38.758660
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 11:44:33.165799
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 11:46:53.524276
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 11:47:36.933323
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 11:47:37.002039
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 11:49:08.132088
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 11:49:08.197629
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': True}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547813833744'>)
# Issued at: 2025-01-25 11:49:08.347892
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547813833744'>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': True})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 11:51:08.190841
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 11:51:08.258291
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': True}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='548284195280'>)
# Issued at: 2025-01-25 11:51:08.383809
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='548284195280'>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': True})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 11:51:50.802440
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 11:51:50.867450
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': True}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547671499920'>)
# Issued at: 2025-01-25 11:51:50.987814
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547671499920'>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': True})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 11:52:38.367229
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 11:52:38.446890
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': True}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547591788432'>)
# Issued at: 2025-01-25 11:52:38.569353
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547591788432'>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': True})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 12:17:24.473293
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 12:17:24.537712
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': True}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547491227600'>)
# Issued at: 2025-01-25 12:17:24.661004
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547491227600'>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': True})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 12:18:05.808666
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 12:18:05.873595
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': True}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='548474649744'>)
# Issued at: 2025-01-25 12:18:05.994938
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='548474649744'>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': True})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 12:21:37.767022
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 12:21:37.832521
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': True}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547727970064'>)
# Issued at: 2025-01-25 12:21:37.954993
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547727970064'>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': True})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 12:23:06.481900
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 12:23:06.548182
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': True}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='548270144272'>)
# Issued at: 2025-01-25 12:23:06.665508
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='548270144272'>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': True})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 12:23:54.352520
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 12:23:54.417233
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=7>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547652627280'>)
# Issued at: 2025-01-25 12:23:54.525011
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547652627280'>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=7>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': True}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547651066128'>)
# Issued at: 2025-01-25 12:23:54.575684
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547651066128'>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': True})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 12:28:04.093252
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 12:28:04.158241
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='548444070992'>)
# Issued at: 2025-01-25 12:28:04.239820
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='548444070992'>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=7>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': True}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='548443339216'>)
# Issued at: 2025-01-25 12:28:04.291011
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='548443339216'>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=7>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': True})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 12:35:45.421583
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 12:35:45.488606
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=7>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547581098064'>)
# Issued at: 2025-01-25 12:35:45.568314
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547581098064'>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=7>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 12:36:06.147974
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 12:36:06.213025
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=7>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547574454544'>)
# Issued at: 2025-01-25 12:36:06.291192
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547574454544'>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=7>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 12:41:41.434230
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 12:41:41.499232
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=7>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547650681040'>)
# Issued at: 2025-01-25 12:41:41.579195
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547650681040'>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=7>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': True}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547653596304'>)
# Issued at: 2025-01-25 12:41:41.660173
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547653596304'>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': True})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 12:42:23.363143
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 12:42:23.429946
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=7>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='548451793360'>)
# Issued at: 2025-01-25 12:42:23.536822
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='548451793360'>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=7>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': True}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='548451987664'>)
# Issued at: 2025-01-25 12:42:23.588273
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='548451987664'>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': True})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 12:44:38.454334
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 12:44:38.519515
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': True}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547523667216'>)
# Issued at: 2025-01-25 12:44:38.638919
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547523667216'>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': True})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 14:12:16.417213
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 14:12:16.485847
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': True}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547882656272'>)
# Issued at: 2025-01-25 14:12:16.605849
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547882656272'>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': True})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 14:13:14.217660
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 14:13:14.282980
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': True}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='548076293072'>)
# Issued at: 2025-01-25 14:13:14.405521
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='548076293072'>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': True})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 14:14:00.115119
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 14:14:00.180798
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': True}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='548265747856'>)
# Issued at: 2025-01-25 14:14:00.299635
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='548265747856'>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': True})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 14:15:12.960666
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 14:15:13.027495
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=7>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='548263819984'>)
# Issued at: 2025-01-25 14:15:13.126817
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='548263819984'>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=7>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': True}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='548261878096'>)
# Issued at: 2025-01-25 14:15:13.177629
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='548261878096'>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': True})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 14:17:27.845521
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 14:17:27.915634
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=7>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547988045136'>)
# Issued at: 2025-01-25 14:17:28.019555
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547988045136'>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=7>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': True}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547985633808'>)
# Issued at: 2025-01-25 14:17:28.075037
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547985633808'>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': True})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 14:20:53.870134
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 14:20:53.930460
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=7>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547895981008'>)
# Issued at: 2025-01-25 14:20:54.021481
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547895981008'>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=7>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': True}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547893913616'>)
# Issued at: 2025-01-25 14:20:54.067747
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547893913616'>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': True})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 14:24:14.720140
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 14:24:14.779345
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=7>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='548390338448'>)
# Issued at: 2025-01-25 14:24:14.871588
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='548390338448'>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=7>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': True}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='548388317776'>)
# Issued at: 2025-01-25 14:24:14.913722
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='548388317776'>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': True})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 14:25:29.047318
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 14:25:29.103551
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=7>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='548267671952'>)
# Issued at: 2025-01-25 14:25:29.193528
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='548267671952'>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=7>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': True}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='548264927504'>)
# Issued at: 2025-01-25 14:25:29.235491
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='548264927504'>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': True})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 14:26:11.995104
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 14:26:12.073356
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=7>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547778765136'>)
# Issued at: 2025-01-25 14:26:12.166299
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547778765136'>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=7>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': True}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547779825040'>)
# Issued at: 2025-01-25 14:26:12.227375
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547779825040'>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': True})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 14:27:18.199797
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 14:27:18.294358
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=7>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547912458576'>)
# Issued at: 2025-01-25 14:27:18.399837
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547912458576'>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=7>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': True}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547908843664'>)
# Issued at: 2025-01-25 14:27:18.488171
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547908843664'>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': True})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 14:28:25.242328
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 14:28:25.339172
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 15:21:13.089028
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 15:21:13.306109
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 15:21:13.536598
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 15:21:13.580259
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 15:21:13.695633
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 15:21:13.962116
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 15:21:14.207190
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 15:21:14.451097
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 15:21:14.672233
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=7>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547702102608'>)
# Issued at: 2025-01-25 15:21:14.702375
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547702102608'>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=7>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 15:21:14.925672
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': True}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547702100240'>)
# Issued at: 2025-01-25 15:21:14.981015
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547702100240'>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': True})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 15:22:01.050757
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 15:22:01.267261
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 15:22:01.503150
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 15:22:01.526467
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 15:22:01.586910
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 15:22:01.837196
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 15:22:02.141203
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 15:22:02.441220
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 15:22:02.731603
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=7>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547496590864'>)
# Issued at: 2025-01-25 15:22:02.763445
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547496590864'>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=7>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 15:22:03.012665
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': True}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547496509840'>)
# Issued at: 2025-01-25 15:22:03.068402
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547496509840'>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': True})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 15:25:10.223714
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 15:25:10.462764
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 15:25:10.713652
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 15:25:10.755279
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 15:25:10.911949
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 15:25:11.137651
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 15:25:11.359798
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 15:25:11.609282
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 15:25:11.829005
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=7>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547794778320'>)
# Issued at: 2025-01-25 15:25:11.859295
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547794778320'>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=7>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 15:25:12.076192
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': True}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547793148688'>)
# Issued at: 2025-01-25 15:25:12.150915
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <MagicMock name='create()' id='547793148688'>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=8>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': True})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 15:32:35.506555
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 15:32:35.728376
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 15:32:35.975389
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 15:32:35.999296
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 15:32:36.096460
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 15:32:36.352157
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 15:32:36.626434
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 15:32:36.883262
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 15:32:37.128762
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 15:32:37.380408
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 15:33:31.839830
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 15:33:32.072945
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 15:33:32.320431
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 15:33:32.370780
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 15:33:32.540882
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 15:33:32.811019
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 15:33:33.057964
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 15:33:33.338202
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 15:33:33.606101
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 15:33:33.897179
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 15:35:03.677337
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 15:35:03.906430
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 15:35:04.128244
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 15:35:04.152254
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 15:35:04.250328
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 15:35:04.464358
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 15:35:04.694244
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 15:35:04.902094
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 15:35:05.134296
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 15:35:05.368551
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 15:36:45.216443
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 15:36:45.458398
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 15:36:45.690486
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 15:36:45.716427
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 15:36:45.815456
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 15:36:46.066376
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 15:36:46.278935
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 15:36:46.485041
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 15:36:46.705741
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 15:36:46.935506
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 15:38:01.548284
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 15:38:01.766367
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 15:38:01.982355
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 15:38:02.005930
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 15:38:02.103962
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 15:38:02.346945
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 15:38:02.588062
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 15:38:02.805785
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 15:38:03.034737
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 15:38:03.247100
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 15:39:16.779025
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 15:39:17.007398
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 15:39:17.226463
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 15:39:17.250911
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 15:39:17.356076
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 15:39:17.598123
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 15:39:17.855584
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 15:39:18.076724
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 15:39:18.341333
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 15:39:18.572437
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 15:45:50.423847
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 15:45:50.673447
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 15:45:50.916075
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 15:45:50.939743
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 15:45:51.040437
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 15:45:51.259630
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 15:45:51.479834
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 15:45:51.728946
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 15:45:51.955373
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 15:45:52.183804
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 15:47:18.002113
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 15:47:18.232935
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 15:47:18.470799
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 15:47:18.512282
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 15:47:18.735561
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 15:47:18.997940
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 15:47:19.222464
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 15:47:19.508693
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 15:47:19.815773
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 15:49:07.913680
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 15:49:08.186699
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 15:49:08.431829
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 15:49:08.466063
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 15:49:08.569696
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 15:49:08.803569
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 15:49:09.018542
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 15:49:09.222254
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 15:49:09.450854
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 15:49:09.672719
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 15:50:52.357423
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 15:50:52.636117
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 15:50:52.897333
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 15:50:52.936634
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 15:50:53.086720
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 15:50:53.331132
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 15:50:53.624309
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 15:50:53.869649
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 15:50:54.135679
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=7>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 15:50:54.196918
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=7>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 15:50:54.428604
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 15:51:37.634249
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 15:51:37.870478
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 15:51:38.117458
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 15:51:38.159125
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 15:51:38.309199
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 15:51:38.593837
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 15:51:38.854679
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 15:51:39.089927
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 15:51:39.335394
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=7>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 15:51:39.396100
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=7>, 'logger': <Logger TestRestockProduct (INFO)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 15:51:39.676372
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 15:54:02.780423
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 15:54:02.988781
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 15:54:03.206195
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 15:54:03.465352
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 15:54:03.561875
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 15:54:03.808904
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 15:54:04.090654
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=5>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 15:54:04.376111
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=5>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 15:54:04.634647
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 15:55:01.919536
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 15:55:02.141941
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 15:55:02.456084
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 15:55:02.781467
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 15:55:03.139040
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 15:55:03.432009
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 15:55:03.670122
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=5>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 15:55:03.862948
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=5>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 15:55:04.085891
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 15:55:47.004125
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 15:55:47.258073
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 15:55:47.552300
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 15:55:48.301417
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 15:55:48.471291
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 15:55:48.725846
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 15:55:48.939555
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 15:55:49.230531
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 15:55:49.351325
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 15:55:49.657757
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 15:56:42.554756
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 15:56:42.829763
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 15:56:43.080935
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 15:56:43.373530
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 15:56:43.483197
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 15:56:43.719532
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 15:56:43.978726
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 15:56:44.291334
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 15:56:44.409987
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 15:56:44.638661
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 15:57:03.324397
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 15:57:03.539653
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 15:57:03.771817
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 15:57:04.048610
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 15:57:04.145448
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 15:57:04.370664
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 15:57:04.582104
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 15:57:04.872764
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 15:57:04.983058
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 15:57:05.221349
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 15:59:10.306652
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 15:59:10.509105
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 15:59:10.763699
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 15:59:11.060440
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 15:59:11.160754
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 15:59:11.454755
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 15:59:11.716140
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 15:59:12.020818
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 15:59:12.151045
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 15:59:12.417718
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 16:00:35.913663
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 16:00:36.140910
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 16:00:36.378351
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 16:00:36.637926
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 16:00:36.739555
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 16:00:36.969077
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 16:00:37.201938
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 16:00:37.462442
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 16:00:37.573122
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 16:00:37.824637
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 16:01:11.222285
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 16:01:11.436411
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 16:01:11.684023
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 16:01:11.987245
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 16:01:12.146383
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 16:01:12.390776
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 16:01:12.660104
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 16:01:13.035261
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 16:01:13.207746
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 16:01:13.475137
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=7>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': True}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
# Issued at: 2025-01-25 16:01:13.588706
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=7>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': True})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testdeposit', 'first_name': 'Test', 'last_name': 'Deposit', 'email': 'deposit@example.com', 'balance': Decimal('0.00'), 'card_number': '1122334455', 'logger': <Logger TestCreateNewCustomer (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <Customer pk=1122334455>)
# Issued at: 2025-01-25 16:14:41.943540
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <Customer pk=1122334455>)
StoreHelper.create_new_customer(*(), **{'username': 'testdeposit', 'first_name': 'Test', 'last_name': 'Deposit', 'email': 'deposit@example.com', 'balance': Decimal('0.00'), 'card_number': '1122334455', 'logger': <Logger TestCreateNewCustomer (DEBUG)>})

# Command: customer_add_deposit, Args: (<Customer pk=1122334455>, Decimal('200.00'), <Logger TestCreateNewCustomer (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=1>)
# Issued at: 2025-01-25 16:14:41.973885
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=1>)
StoreHelper.customer_add_deposit(*(<Customer pk=1122334455>, Decimal('200.00'), <Logger TestCreateNewCustomer (DEBUG)>), **{})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'nodeposit', 'first_name': 'No', 'last_name': 'Deposit', 'email': 'nodeposit@example.com', 'balance': Decimal('0.00'), 'card_number': '0987654321', 'logger': <Logger TestCreateNewCustomer (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <Customer pk=0987654321>)
# Issued at: 2025-01-25 16:14:42.010063
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <Customer pk=0987654321>)
StoreHelper.create_new_customer(*(), **{'username': 'nodeposit', 'first_name': 'No', 'last_name': 'Deposit', 'email': 'nodeposit@example.com', 'balance': Decimal('0.00'), 'card_number': '0987654321', 'logger': <Logger TestCreateNewCustomer (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'duplicate', 'first_name': 'Duplicate', 'last_name': 'Test', 'email': 'duplicate@example.com', 'balance': Decimal('50.00'), 'card_number': '1234567890', 'logger': <Logger TestCreateNewCustomer (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <Customer pk=1234567890>)
# Issued at: 2025-01-25 16:14:42.076570
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <Customer pk=1234567890>)
StoreHelper.create_new_customer(*(), **{'username': 'duplicate', 'first_name': 'Duplicate', 'last_name': 'Test', 'email': 'duplicate@example.com', 'balance': Decimal('50.00'), 'card_number': '1234567890', 'logger': <Logger TestCreateNewCustomer (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser', 'first_name': 'Test', 'last_name': 'User', 'email': 'test@example.com', 'balance': Decimal('100.00'), 'card_number': '1234567890', 'logger': <Logger TestCreateNewCustomer (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <Customer pk=1234567890>)
# Issued at: 2025-01-25 16:14:42.197851
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <Customer pk=1234567890>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser', 'first_name': 'Test', 'last_name': 'User', 'email': 'test@example.com', 'balance': Decimal('100.00'), 'card_number': '1234567890', 'logger': <Logger TestCreateNewCustomer (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testdeposit', 'first_name': 'Test', 'last_name': 'Deposit', 'email': 'deposit@example.com', 'balance': Decimal('0.00'), 'card_number': '1122334455', 'logger': <Logger TestCreateNewCustomer (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1122334455>)
# Issued at: 2025-01-25 16:15:14.272707
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1122334455>)
StoreHelper.create_new_customer(*(), **{'username': 'testdeposit', 'first_name': 'Test', 'last_name': 'Deposit', 'email': 'deposit@example.com', 'balance': Decimal('0.00'), 'card_number': '1122334455', 'logger': <Logger TestCreateNewCustomer (DEBUG)>})

# Command: customer_add_deposit, Args: (<Customer pk=1122334455>, Decimal('200.00'), <Logger TestCreateNewCustomer (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=1>)
# Issued at: 2025-01-25 16:15:14.303374
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=1>)
StoreHelper.customer_add_deposit(*(<Customer pk=1122334455>, Decimal('200.00'), <Logger TestCreateNewCustomer (DEBUG)>), **{})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'nodeposit', 'first_name': 'No', 'last_name': 'Deposit', 'email': 'nodeposit@example.com', 'balance': Decimal('0.00'), 'card_number': '0987654321', 'logger': <Logger TestCreateNewCustomer (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=0987654321>)
# Issued at: 2025-01-25 16:15:14.340430
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=0987654321>)
StoreHelper.create_new_customer(*(), **{'username': 'nodeposit', 'first_name': 'No', 'last_name': 'Deposit', 'email': 'nodeposit@example.com', 'balance': Decimal('0.00'), 'card_number': '0987654321', 'logger': <Logger TestCreateNewCustomer (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'duplicate', 'first_name': 'Duplicate', 'last_name': 'Test', 'email': 'duplicate@example.com', 'balance': Decimal('50.00'), 'card_number': '1234567890', 'logger': <Logger TestCreateNewCustomer (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890>)
# Issued at: 2025-01-25 16:15:14.406679
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890>)
StoreHelper.create_new_customer(*(), **{'username': 'duplicate', 'first_name': 'Duplicate', 'last_name': 'Test', 'email': 'duplicate@example.com', 'balance': Decimal('50.00'), 'card_number': '1234567890', 'logger': <Logger TestCreateNewCustomer (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser', 'first_name': 'Test', 'last_name': 'User', 'email': 'test@example.com', 'balance': Decimal('100.00'), 'card_number': '1234567890', 'logger': <Logger TestCreateNewCustomer (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890>)
# Issued at: 2025-01-25 16:15:14.526445
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser', 'first_name': 'Test', 'last_name': 'User', 'email': 'test@example.com', 'balance': Decimal('100.00'), 'card_number': '1234567890', 'logger': <Logger TestCreateNewCustomer (DEBUG)>})

# Command: customer_add_deposit, Args: (<Customer pk=1234567890>, Decimal('50.123456789'), <Logger TestCustomerAddDeposit (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=2>)
# Issued at: 2025-01-25 16:25:18.795399
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=2>)
StoreHelper.customer_add_deposit(*(<Customer pk=1234567890>, Decimal('50.123456789'), <Logger TestCustomerAddDeposit (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer pk=1234567890>, Decimal('9999999.99'), <Logger TestCustomerAddDeposit (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=5>)
# Issued at: 2025-01-25 16:25:18.853883
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=5>)
StoreHelper.customer_add_deposit(*(<Customer pk=1234567890>, Decimal('9999999.99'), <Logger TestCustomerAddDeposit (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer pk=1234567890>, Decimal('50.00'), <Logger TestCustomerAddDeposit (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=7>)
# Issued at: 2025-01-25 16:25:18.891525
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=7>)
StoreHelper.customer_add_deposit(*(<Customer pk=1234567890>, Decimal('50.00'), <Logger TestCustomerAddDeposit (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer pk=1234567890>, Decimal('25.00'), <Logger TestCustomerAddDeposit (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=8>)
# Issued at: 2025-01-25 16:25:18.921485
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=8>)
StoreHelper.customer_add_deposit(*(<Customer pk=1234567890>, Decimal('25.00'), <Logger TestCustomerAddDeposit (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer pk=1234567890>, Decimal('50.00'), <Logger TestCustomerAddDeposit (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=11>)
# Issued at: 2025-01-25 16:25:18.982083
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=11>)
StoreHelper.customer_add_deposit(*(<Customer pk=1234567890>, Decimal('50.00'), <Logger TestCustomerAddDeposit (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer pk=1234567890>, Decimal('100.00'), <Logger TestCustomerAddDeposit (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=16>)
# Issued at: 2025-01-25 16:25:19.105679
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=16>)
StoreHelper.customer_add_deposit(*(<Customer pk=1234567890>, Decimal('100.00'), <Logger TestCustomerAddDeposit (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer pk=1234567890>, Decimal('50.00'), <Logger TestCustomerAddDeposit (INFO)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=19>)
# Issued at: 2025-01-25 16:25:19.167114
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=19>)
StoreHelper.customer_add_deposit(*(<Customer pk=1234567890>, Decimal('50.00'), <Logger TestCustomerAddDeposit (INFO)>), **{})

# Command: customer_add_deposit, Args: (<Customer pk=1234567890>, Decimal('50.005'), <Logger TestCustomerAddDeposit (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=21>)
# Issued at: 2025-01-25 16:25:19.210622
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=21>)
StoreHelper.customer_add_deposit(*(<Customer pk=1234567890>, Decimal('50.005'), <Logger TestCustomerAddDeposit (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer pk=1234567890>, Decimal('50.123456789'), <Logger TestCustomerAddDeposit (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=2>)
# Issued at: 2025-01-25 16:26:19.577972
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=2>)
StoreHelper.customer_add_deposit(*(<Customer pk=1234567890>, Decimal('50.123456789'), <Logger TestCustomerAddDeposit (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer pk=1234567890>, Decimal('9999999.99'), <Logger TestCustomerAddDeposit (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=5>)
# Issued at: 2025-01-25 16:26:19.632697
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=5>)
StoreHelper.customer_add_deposit(*(<Customer pk=1234567890>, Decimal('9999999.99'), <Logger TestCustomerAddDeposit (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer pk=1234567890>, Decimal('50.00'), <Logger TestCustomerAddDeposit (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=7>)
# Issued at: 2025-01-25 16:26:19.670545
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=7>)
StoreHelper.customer_add_deposit(*(<Customer pk=1234567890>, Decimal('50.00'), <Logger TestCustomerAddDeposit (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer pk=1234567890>, Decimal('25.00'), <Logger TestCustomerAddDeposit (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=8>)
# Issued at: 2025-01-25 16:26:19.696716
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=8>)
StoreHelper.customer_add_deposit(*(<Customer pk=1234567890>, Decimal('25.00'), <Logger TestCustomerAddDeposit (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer pk=1234567890>, Decimal('50.00'), <Logger TestCustomerAddDeposit (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=11>)
# Issued at: 2025-01-25 16:26:19.759298
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=11>)
StoreHelper.customer_add_deposit(*(<Customer pk=1234567890>, Decimal('50.00'), <Logger TestCustomerAddDeposit (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer pk=1234567890>, Decimal('100.00'), <Logger TestCustomerAddDeposit (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=16>)
# Issued at: 2025-01-25 16:26:19.883288
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=16>)
StoreHelper.customer_add_deposit(*(<Customer pk=1234567890>, Decimal('100.00'), <Logger TestCustomerAddDeposit (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer pk=1234567890>, Decimal('50.00'), <Logger TestCustomerAddDeposit (INFO)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=19>)
# Issued at: 2025-01-25 16:26:19.935088
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=19>)
StoreHelper.customer_add_deposit(*(<Customer pk=1234567890>, Decimal('50.00'), <Logger TestCustomerAddDeposit (INFO)>), **{})

# Command: customer_add_deposit, Args: (<Customer pk=1234567890>, Decimal('50.005'), <Logger TestCustomerAddDeposit (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=21>)
# Issued at: 2025-01-25 16:26:19.971335
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=21>)
StoreHelper.customer_add_deposit(*(<Customer pk=1234567890>, Decimal('50.005'), <Logger TestCustomerAddDeposit (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer pk=1234567890>, Decimal('50.123456789'), <Logger TestCustomerAddDeposit (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=2>)
# Issued at: 2025-01-25 16:27:19.966880
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=2>)
StoreHelper.customer_add_deposit(*(<Customer pk=1234567890>, Decimal('50.123456789'), <Logger TestCustomerAddDeposit (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer pk=1234567890>, Decimal('9999999.99'), <Logger TestCustomerAddDeposit (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=5>)
# Issued at: 2025-01-25 16:27:20.030079
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=5>)
StoreHelper.customer_add_deposit(*(<Customer pk=1234567890>, Decimal('9999999.99'), <Logger TestCustomerAddDeposit (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer pk=1234567890>, Decimal('50.00'), <Logger TestCustomerAddDeposit (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=7>)
# Issued at: 2025-01-25 16:27:20.070581
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=7>)
StoreHelper.customer_add_deposit(*(<Customer pk=1234567890>, Decimal('50.00'), <Logger TestCustomerAddDeposit (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer pk=1234567890>, Decimal('25.00'), <Logger TestCustomerAddDeposit (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=8>)
# Issued at: 2025-01-25 16:27:20.099184
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=8>)
StoreHelper.customer_add_deposit(*(<Customer pk=1234567890>, Decimal('25.00'), <Logger TestCustomerAddDeposit (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer pk=1234567890>, Decimal('50.00'), <Logger TestCustomerAddDeposit (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=11>)
# Issued at: 2025-01-25 16:27:20.162252
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=11>)
StoreHelper.customer_add_deposit(*(<Customer pk=1234567890>, Decimal('50.00'), <Logger TestCustomerAddDeposit (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer pk=1234567890>, Decimal('100.00'), <Logger TestCustomerAddDeposit (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=16>)
# Issued at: 2025-01-25 16:27:20.283678
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=16>)
StoreHelper.customer_add_deposit(*(<Customer pk=1234567890>, Decimal('100.00'), <Logger TestCustomerAddDeposit (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer pk=1234567890>, Decimal('50.00'), <Logger TestCustomerAddDeposit (INFO)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=19>)
# Issued at: 2025-01-25 16:27:20.335815
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=19>)
StoreHelper.customer_add_deposit(*(<Customer pk=1234567890>, Decimal('50.00'), <Logger TestCustomerAddDeposit (INFO)>), **{})

# Command: customer_add_deposit, Args: (<Customer pk=1234567890>, Decimal('50.005'), <Logger TestCustomerAddDeposit (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=21>)
# Issued at: 2025-01-25 16:27:20.371832
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=21>)
StoreHelper.customer_add_deposit(*(<Customer pk=1234567890>, Decimal('50.005'), <Logger TestCustomerAddDeposit (DEBUG)>), **{})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 16:30:18.928907
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 16:30:19.228259
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 16:30:19.539612
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 16:30:19.863918
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 16:30:20.171211
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 16:30:46.683956
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 16:30:46.986478
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 16:30:47.289674
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 16:30:47.612876
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 16:30:47.924728
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 16:30:48.038115
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 16:30:48.159014
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
# Issued at: 2025-01-25 16:30:48.296623
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
# Issued at: 2025-01-25 16:30:48.398246
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
# Issued at: 2025-01-25 16:30:48.499855
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
# Issued at: 2025-01-25 16:30:48.598843
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
# Issued at: 2025-01-25 16:30:48.704728
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
# Issued at: 2025-01-25 16:30:48.815775
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
# Issued at: 2025-01-25 16:30:48.985974
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
# Issued at: 2025-01-25 16:30:49.181455
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
# Issued at: 2025-01-25 16:30:49.332984
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=12>)
# Issued at: 2025-01-25 16:30:49.540632
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=12>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000005', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=13>)
# Issued at: 2025-01-25 16:30:49.659096
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=13>)
StoreHelper.restock_product(*(), **{'ean': '100000000005', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000005', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=14>)
# Issued at: 2025-01-25 16:30:49.759664
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=14>)
StoreHelper.restock_product(*(), **{'ean': '100000000005', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000005', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=15>)
# Issued at: 2025-01-25 16:30:49.864543
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=15>)
StoreHelper.restock_product(*(), **{'ean': '100000000005', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 16:36:08.680583
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 16:36:08.996904
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 16:36:09.308101
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 16:36:09.668973
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 16:36:10.043835
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 16:36:10.451488
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 16:36:10.744554
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 16:36:11.031930
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 16:36:11.339046
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
# Issued at: 2025-01-25 16:36:11.662524
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
# Issued at: 2025-01-25 16:36:12.041476
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
# Issued at: 2025-01-25 16:36:12.356628
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
# Issued at: 2025-01-25 16:36:12.663581
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
# Issued at: 2025-01-25 16:36:12.961438
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
# Issued at: 2025-01-25 16:36:13.264452
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=16>)
# Issued at: 2025-01-25 16:36:13.668920
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=16>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=17>)
# Issued at: 2025-01-25 16:36:13.962020
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=17>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=18>)
# Issued at: 2025-01-25 16:36:14.277602
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=18>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=19>)
# Issued at: 2025-01-25 16:36:14.593913
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=19>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=20>)
# Issued at: 2025-01-25 16:36:14.946473
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=20>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=21>)
# Issued at: 2025-01-25 16:36:15.360022
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=21>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=22>)
# Issued at: 2025-01-25 16:36:15.671717
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=22>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=23>)
# Issued at: 2025-01-25 16:36:15.988342
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=23>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=24>)
# Issued at: 2025-01-25 16:36:16.296712
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=24>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=25>)
# Issued at: 2025-01-25 16:36:16.616627
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=25>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=26>)
# Issued at: 2025-01-25 16:36:16.999608
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=26>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=27>)
# Issued at: 2025-01-25 16:36:17.297145
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=27>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=28>)
# Issued at: 2025-01-25 16:36:17.594834
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=28>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=29>)
# Issued at: 2025-01-25 16:36:17.927241
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=29>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=30>)
# Issued at: 2025-01-25 16:36:18.231106
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=30>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=31>)
# Issued at: 2025-01-25 16:36:18.622765
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=31>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=32>)
# Issued at: 2025-01-25 16:36:18.917799
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=32>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=33>)
# Issued at: 2025-01-25 16:36:19.227967
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=33>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=34>)
# Issued at: 2025-01-25 16:36:19.577302
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=34>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=35>)
# Issued at: 2025-01-25 16:36:19.938871
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=35>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 16:36:52.441165
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 16:36:52.740303
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 16:36:53.033444
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 16:36:53.364103
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 16:36:53.663020
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 16:36:53.776075
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 16:36:53.892775
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
# Issued at: 2025-01-25 16:36:54.015390
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
# Issued at: 2025-01-25 16:36:54.113239
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
# Issued at: 2025-01-25 16:36:54.210464
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
# Issued at: 2025-01-25 16:36:54.313393
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
# Issued at: 2025-01-25 16:36:54.412366
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
# Issued at: 2025-01-25 16:36:54.511801
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
# Issued at: 2025-01-25 16:36:54.609505
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
# Issued at: 2025-01-25 16:36:54.710001
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
# Issued at: 2025-01-25 16:36:54.847546
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=12>)
# Issued at: 2025-01-25 16:36:54.953278
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=12>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000005', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=13>)
# Issued at: 2025-01-25 16:36:55.052779
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=13>)
StoreHelper.restock_product(*(), **{'ean': '100000000005', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000005', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=14>)
# Issued at: 2025-01-25 16:36:55.152022
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=14>)
StoreHelper.restock_product(*(), **{'ean': '100000000005', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000005', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=15>)
# Issued at: 2025-01-25 16:36:55.250430
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=15>)
StoreHelper.restock_product(*(), **{'ean': '100000000005', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 16:36:56.605792
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 16:36:56.910812
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 16:36:57.213070
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 16:36:57.529803
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
# Issued at: 2025-01-25 16:36:57.831551
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=16>)
# Issued at: 2025-01-25 16:36:57.930362
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=16>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=17>)
# Issued at: 2025-01-25 16:36:58.043727
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=17>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=18>)
# Issued at: 2025-01-25 16:36:58.177140
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=18>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=19>)
# Issued at: 2025-01-25 16:36:58.286554
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=19>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=20>)
# Issued at: 2025-01-25 16:36:58.399903
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=20>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=21>)
# Issued at: 2025-01-25 16:36:58.503264
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=21>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=22>)
# Issued at: 2025-01-25 16:36:58.603034
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=22>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=23>)
# Issued at: 2025-01-25 16:36:58.706897
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=23>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=24>)
# Issued at: 2025-01-25 16:36:58.800422
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=24>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=25>)
# Issued at: 2025-01-25 16:36:58.899423
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=25>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=26>)
# Issued at: 2025-01-25 16:36:59.090665
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=26>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=27>)
# Issued at: 2025-01-25 16:36:59.249107
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=27>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000005', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=28>)
# Issued at: 2025-01-25 16:36:59.505447
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=28>)
StoreHelper.restock_product(*(), **{'ean': '100000000005', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000005', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=29>)
# Issued at: 2025-01-25 16:36:59.651683
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=29>)
StoreHelper.restock_product(*(), **{'ean': '100000000005', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000005', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=30>)
# Issued at: 2025-01-25 16:36:59.752441
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=30>)
StoreHelper.restock_product(*(), **{'ean': '100000000005', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
# Issued at: 2025-01-25 16:37:00.088887
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
# Issued at: 2025-01-25 16:37:00.437731
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
# Issued at: 2025-01-25 16:37:00.758013
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
# Issued at: 2025-01-25 16:37:01.064184
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
# Issued at: 2025-01-25 16:37:01.433059
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=31>)
# Issued at: 2025-01-25 16:37:01.555539
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=31>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=32>)
# Issued at: 2025-01-25 16:37:01.676609
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=32>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=33>)
# Issued at: 2025-01-25 16:37:01.841452
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=33>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=34>)
# Issued at: 2025-01-25 16:37:01.941695
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=34>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=35>)
# Issued at: 2025-01-25 16:37:02.057903
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=35>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=36>)
# Issued at: 2025-01-25 16:37:02.156608
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=36>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=37>)
# Issued at: 2025-01-25 16:37:02.254008
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=37>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=38>)
# Issued at: 2025-01-25 16:37:02.353684
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=38>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=39>)
# Issued at: 2025-01-25 16:37:02.451336
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=39>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=40>)
# Issued at: 2025-01-25 16:37:02.549224
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=40>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=41>)
# Issued at: 2025-01-25 16:37:02.649760
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=41>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=42>)
# Issued at: 2025-01-25 16:37:02.749807
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=42>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000005', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=43>)
# Issued at: 2025-01-25 16:37:02.865483
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=43>)
StoreHelper.restock_product(*(), **{'ean': '100000000005', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000005', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=44>)
# Issued at: 2025-01-25 16:37:02.965573
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=44>)
StoreHelper.restock_product(*(), **{'ean': '100000000005', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000005', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=45>)
# Issued at: 2025-01-25 16:37:03.073656
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=45>)
StoreHelper.restock_product(*(), **{'ean': '100000000005', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=16>)
# Issued at: 2025-01-25 16:37:03.394577
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=16>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=17>)
# Issued at: 2025-01-25 16:37:03.683191
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=17>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=18>)
# Issued at: 2025-01-25 16:37:03.991656
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=18>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=19>)
# Issued at: 2025-01-25 16:37:04.527130
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=19>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=20>)
# Issued at: 2025-01-25 16:37:05.628406
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=20>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=46>)
# Issued at: 2025-01-25 16:37:05.761892
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=46>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=47>)
# Issued at: 2025-01-25 16:37:05.885480
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=47>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=48>)
# Issued at: 2025-01-25 16:37:05.984830
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=48>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=49>)
# Issued at: 2025-01-25 16:37:06.083817
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=49>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=50>)
# Issued at: 2025-01-25 16:37:06.181801
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=50>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=51>)
# Issued at: 2025-01-25 16:37:06.283265
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=51>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=52>)
# Issued at: 2025-01-25 16:37:06.379384
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=52>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=53>)
# Issued at: 2025-01-25 16:37:06.482431
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=53>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=54>)
# Issued at: 2025-01-25 16:37:06.586280
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=54>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=55>)
# Issued at: 2025-01-25 16:37:06.682921
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=55>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=56>)
# Issued at: 2025-01-25 16:37:06.779888
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=56>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=57>)
# Issued at: 2025-01-25 16:37:06.881560
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=57>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000005', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=58>)
# Issued at: 2025-01-25 16:37:06.979526
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=58>)
StoreHelper.restock_product(*(), **{'ean': '100000000005', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000005', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=59>)
# Issued at: 2025-01-25 16:37:07.082364
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=59>)
StoreHelper.restock_product(*(), **{'ean': '100000000005', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000005', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=60>)
# Issued at: 2025-01-25 16:37:07.182422
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=60>)
StoreHelper.restock_product(*(), **{'ean': '100000000005', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=21>)
# Issued at: 2025-01-25 16:37:07.550183
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=21>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=22>)
# Issued at: 2025-01-25 16:37:07.891783
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=22>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=23>)
# Issued at: 2025-01-25 16:37:08.261479
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=23>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=24>)
# Issued at: 2025-01-25 16:37:08.561228
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=24>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=25>)
# Issued at: 2025-01-25 16:37:08.894057
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=25>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=61>)
# Issued at: 2025-01-25 16:37:09.006027
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=61>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=62>)
# Issued at: 2025-01-25 16:37:09.118760
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=62>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=63>)
# Issued at: 2025-01-25 16:37:09.239053
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=63>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=64>)
# Issued at: 2025-01-25 16:37:09.338931
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=64>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=65>)
# Issued at: 2025-01-25 16:37:09.434750
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=65>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=66>)
# Issued at: 2025-01-25 16:37:09.530834
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=66>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=67>)
# Issued at: 2025-01-25 16:37:09.635649
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=67>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=68>)
# Issued at: 2025-01-25 16:37:09.733066
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=68>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=69>)
# Issued at: 2025-01-25 16:37:09.844849
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=69>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=70>)
# Issued at: 2025-01-25 16:37:09.948336
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=70>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=71>)
# Issued at: 2025-01-25 16:37:10.046973
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=71>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=72>)
# Issued at: 2025-01-25 16:37:10.143744
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=72>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000005', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=73>)
# Issued at: 2025-01-25 16:37:10.241072
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=73>)
StoreHelper.restock_product(*(), **{'ean': '100000000005', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000005', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=74>)
# Issued at: 2025-01-25 16:37:10.339917
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=74>)
StoreHelper.restock_product(*(), **{'ean': '100000000005', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000005', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=75>)
# Issued at: 2025-01-25 16:37:10.442599
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=75>)
StoreHelper.restock_product(*(), **{'ean': '100000000005', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=26>)
# Issued at: 2025-01-25 16:37:10.763907
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=26>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=27>)
# Issued at: 2025-01-25 16:37:11.058440
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=27>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=28>)
# Issued at: 2025-01-25 16:37:11.373488
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=28>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=29>)
# Issued at: 2025-01-25 16:37:11.738898
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=29>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=30>)
# Issued at: 2025-01-25 16:37:12.057601
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=30>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=76>)
# Issued at: 2025-01-25 16:37:12.201947
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=76>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=77>)
# Issued at: 2025-01-25 16:37:12.324977
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=77>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=78>)
# Issued at: 2025-01-25 16:37:12.451142
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=78>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=79>)
# Issued at: 2025-01-25 16:37:12.561874
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=79>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=80>)
# Issued at: 2025-01-25 16:37:12.658902
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=80>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=81>)
# Issued at: 2025-01-25 16:37:12.756164
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=81>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=82>)
# Issued at: 2025-01-25 16:37:12.853918
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=82>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=83>)
# Issued at: 2025-01-25 16:37:12.953117
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=83>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=84>)
# Issued at: 2025-01-25 16:37:13.051188
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=84>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=85>)
# Issued at: 2025-01-25 16:37:13.147983
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=85>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=86>)
# Issued at: 2025-01-25 16:37:13.240541
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=86>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=87>)
# Issued at: 2025-01-25 16:37:13.342967
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=87>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000005', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=88>)
# Issued at: 2025-01-25 16:37:13.439255
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=88>)
StoreHelper.restock_product(*(), **{'ean': '100000000005', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000005', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=89>)
# Issued at: 2025-01-25 16:37:13.536004
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=89>)
StoreHelper.restock_product(*(), **{'ean': '100000000005', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000005', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=90>)
# Issued at: 2025-01-25 16:37:13.633522
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=90>)
StoreHelper.restock_product(*(), **{'ean': '100000000005', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=31>)
# Issued at: 2025-01-25 16:37:13.963024
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=31>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=32>)
# Issued at: 2025-01-25 16:37:14.277926
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=32>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=33>)
# Issued at: 2025-01-25 16:37:14.617016
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=33>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=34>)
# Issued at: 2025-01-25 16:37:14.929696
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=34>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=35>)
# Issued at: 2025-01-25 16:37:15.230232
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=35>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=91>)
# Issued at: 2025-01-25 16:37:15.328530
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=91>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=92>)
# Issued at: 2025-01-25 16:37:15.458781
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=92>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=93>)
# Issued at: 2025-01-25 16:37:15.592134
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=93>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=94>)
# Issued at: 2025-01-25 16:37:15.810173
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=94>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=95>)
# Issued at: 2025-01-25 16:37:16.052624
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=95>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=96>)
# Issued at: 2025-01-25 16:37:16.178248
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=96>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=97>)
# Issued at: 2025-01-25 16:37:16.337813
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=97>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=98>)
# Issued at: 2025-01-25 16:37:16.437076
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=98>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=99>)
# Issued at: 2025-01-25 16:37:16.539415
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=99>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=100>)
# Issued at: 2025-01-25 16:37:16.637825
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=100>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=101>)
# Issued at: 2025-01-25 16:37:16.734012
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=101>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=102>)
# Issued at: 2025-01-25 16:37:16.835267
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=102>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000005', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=103>)
# Issued at: 2025-01-25 16:37:16.932887
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=103>)
StoreHelper.restock_product(*(), **{'ean': '100000000005', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000005', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=104>)
# Issued at: 2025-01-25 16:37:17.031028
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=104>)
StoreHelper.restock_product(*(), **{'ean': '100000000005', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000005', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=105>)
# Issued at: 2025-01-25 16:37:17.128969
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=105>)
StoreHelper.restock_product(*(), **{'ean': '100000000005', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 16:39:44.708981
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 16:39:45.003784
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 16:39:45.311838
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 16:39:45.637687
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 16:39:46.040201
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 16:39:46.163178
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 16:39:46.293056
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
# Issued at: 2025-01-25 16:39:46.415923
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
# Issued at: 2025-01-25 16:39:46.567095
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
# Issued at: 2025-01-25 16:39:46.698802
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
# Issued at: 2025-01-25 16:39:46.870236
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
# Issued at: 2025-01-25 16:39:46.971076
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
# Issued at: 2025-01-25 16:39:47.071592
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
# Issued at: 2025-01-25 16:39:47.196197
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
# Issued at: 2025-01-25 16:39:47.299742
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
# Issued at: 2025-01-25 16:39:47.402209
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=12>)
# Issued at: 2025-01-25 16:39:47.500156
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=12>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000005', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=13>)
# Issued at: 2025-01-25 16:39:47.600551
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=13>)
StoreHelper.restock_product(*(), **{'ean': '100000000005', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000005', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=14>)
# Issued at: 2025-01-25 16:39:47.701408
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=14>)
StoreHelper.restock_product(*(), **{'ean': '100000000005', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000005', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=15>)
# Issued at: 2025-01-25 16:39:47.816442
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=15>)
StoreHelper.restock_product(*(), **{'ean': '100000000005', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 16:39:48.148237
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 16:39:48.469360
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 16:39:48.822045
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 16:39:49.123870
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
# Issued at: 2025-01-25 16:39:49.430160
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=16>)
# Issued at: 2025-01-25 16:39:49.534292
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=16>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=17>)
# Issued at: 2025-01-25 16:39:49.670045
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=17>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=18>)
# Issued at: 2025-01-25 16:39:49.800293
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=18>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=19>)
# Issued at: 2025-01-25 16:39:49.911419
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=19>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=20>)
# Issued at: 2025-01-25 16:39:50.010868
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=20>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=21>)
# Issued at: 2025-01-25 16:39:50.113016
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=21>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=22>)
# Issued at: 2025-01-25 16:39:50.214136
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=22>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=23>)
# Issued at: 2025-01-25 16:39:50.311789
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=23>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=24>)
# Issued at: 2025-01-25 16:39:50.409494
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=24>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=25>)
# Issued at: 2025-01-25 16:39:50.508400
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=25>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=26>)
# Issued at: 2025-01-25 16:39:50.608265
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=26>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=27>)
# Issued at: 2025-01-25 16:39:50.777699
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=27>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000005', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=28>)
# Issued at: 2025-01-25 16:39:50.945809
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=28>)
StoreHelper.restock_product(*(), **{'ean': '100000000005', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000005', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=29>)
# Issued at: 2025-01-25 16:39:51.201306
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=29>)
StoreHelper.restock_product(*(), **{'ean': '100000000005', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000005', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=30>)
# Issued at: 2025-01-25 16:39:51.406599
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=30>)
StoreHelper.restock_product(*(), **{'ean': '100000000005', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
# Issued at: 2025-01-25 16:39:51.727218
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
# Issued at: 2025-01-25 16:39:52.064447
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
# Issued at: 2025-01-25 16:39:52.388882
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
# Issued at: 2025-01-25 16:39:52.704299
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
# Issued at: 2025-01-25 16:39:53.046306
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=31>)
# Issued at: 2025-01-25 16:39:53.146335
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=31>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=32>)
# Issued at: 2025-01-25 16:39:53.263881
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=32>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=33>)
# Issued at: 2025-01-25 16:39:53.391131
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=33>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=34>)
# Issued at: 2025-01-25 16:39:53.501866
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=34>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=35>)
# Issued at: 2025-01-25 16:39:53.600702
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=35>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=36>)
# Issued at: 2025-01-25 16:39:53.698906
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=36>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=37>)
# Issued at: 2025-01-25 16:39:53.798155
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=37>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=38>)
# Issued at: 2025-01-25 16:39:53.899839
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=38>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=39>)
# Issued at: 2025-01-25 16:39:53.997977
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=39>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=40>)
# Issued at: 2025-01-25 16:39:54.095498
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=40>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=41>)
# Issued at: 2025-01-25 16:39:54.195984
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=41>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=42>)
# Issued at: 2025-01-25 16:39:54.294191
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=42>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000005', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=43>)
# Issued at: 2025-01-25 16:39:54.391676
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=43>)
StoreHelper.restock_product(*(), **{'ean': '100000000005', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000005', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=44>)
# Issued at: 2025-01-25 16:39:54.491835
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=44>)
StoreHelper.restock_product(*(), **{'ean': '100000000005', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000005', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=45>)
# Issued at: 2025-01-25 16:39:54.588728
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=45>)
StoreHelper.restock_product(*(), **{'ean': '100000000005', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=11>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=16>)
# Issued at: 2025-01-25 16:39:54.895669
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=16>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=17>)
# Issued at: 2025-01-25 16:39:55.217159
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=17>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=18>)
# Issued at: 2025-01-25 16:39:55.513780
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=18>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=19>)
# Issued at: 2025-01-25 16:39:55.928302
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=19>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=20>)
# Issued at: 2025-01-25 16:39:56.276659
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=20>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=46>)
# Issued at: 2025-01-25 16:39:56.394807
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=46>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=47>)
# Issued at: 2025-01-25 16:39:56.520409
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=47>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=48>)
# Issued at: 2025-01-25 16:39:56.652891
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=48>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=49>)
# Issued at: 2025-01-25 16:39:56.764352
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=49>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=50>)
# Issued at: 2025-01-25 16:39:56.889200
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=50>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=51>)
# Issued at: 2025-01-25 16:39:57.012282
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=51>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=52>)
# Issued at: 2025-01-25 16:39:57.109642
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=52>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=53>)
# Issued at: 2025-01-25 16:39:57.223916
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=53>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=54>)
# Issued at: 2025-01-25 16:39:57.322821
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=54>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=55>)
# Issued at: 2025-01-25 16:39:57.421524
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=55>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=56>)
# Issued at: 2025-01-25 16:39:57.520042
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=56>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=57>)
# Issued at: 2025-01-25 16:39:57.620273
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=57>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000005', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=58>)
# Issued at: 2025-01-25 16:39:57.725227
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=58>)
StoreHelper.restock_product(*(), **{'ean': '100000000005', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000005', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=59>)
# Issued at: 2025-01-25 16:39:57.834618
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=59>)
StoreHelper.restock_product(*(), **{'ean': '100000000005', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000005', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=60>)
# Issued at: 2025-01-25 16:39:57.933522
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=60>)
StoreHelper.restock_product(*(), **{'ean': '100000000005', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=16>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=21>)
# Issued at: 2025-01-25 16:39:58.251382
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=21>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=22>)
# Issued at: 2025-01-25 16:39:58.560014
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=22>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=23>)
# Issued at: 2025-01-25 16:39:58.868798
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=23>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=24>)
# Issued at: 2025-01-25 16:39:59.180858
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=24>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=25>)
# Issued at: 2025-01-25 16:39:59.507358
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=25>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=61>)
# Issued at: 2025-01-25 16:39:59.616415
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=61>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=62>)
# Issued at: 2025-01-25 16:39:59.735245
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=62>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=63>)
# Issued at: 2025-01-25 16:39:59.864331
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=63>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=64>)
# Issued at: 2025-01-25 16:39:59.978263
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=64>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=65>)
# Issued at: 2025-01-25 16:40:00.080067
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=65>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=66>)
# Issued at: 2025-01-25 16:40:00.179252
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=66>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=67>)
# Issued at: 2025-01-25 16:40:00.279362
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=67>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=68>)
# Issued at: 2025-01-25 16:40:00.379822
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=68>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=69>)
# Issued at: 2025-01-25 16:40:00.479025
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=69>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=70>)
# Issued at: 2025-01-25 16:40:00.579707
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=70>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=71>)
# Issued at: 2025-01-25 16:40:00.681670
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=71>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=72>)
# Issued at: 2025-01-25 16:40:00.782576
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=72>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000005', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=73>)
# Issued at: 2025-01-25 16:40:00.881898
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=73>)
StoreHelper.restock_product(*(), **{'ean': '100000000005', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000005', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=74>)
# Issued at: 2025-01-25 16:40:00.982816
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=74>)
StoreHelper.restock_product(*(), **{'ean': '100000000005', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000005', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=75>)
# Issued at: 2025-01-25 16:40:01.081898
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=75>)
StoreHelper.restock_product(*(), **{'ean': '100000000005', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=26>)
# Issued at: 2025-01-25 16:40:01.405944
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=26>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=27>)
# Issued at: 2025-01-25 16:40:01.714269
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=27>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=28>)
# Issued at: 2025-01-25 16:40:02.049653
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=28>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=29>)
# Issued at: 2025-01-25 16:40:02.360811
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=29>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=30>)
# Issued at: 2025-01-25 16:40:02.688763
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=30>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=76>)
# Issued at: 2025-01-25 16:40:02.838309
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=76>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=77>)
# Issued at: 2025-01-25 16:40:02.972184
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=77>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=78>)
# Issued at: 2025-01-25 16:40:03.098348
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=78>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=79>)
# Issued at: 2025-01-25 16:40:03.242460
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=79>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=80>)
# Issued at: 2025-01-25 16:40:03.381163
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=80>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=81>)
# Issued at: 2025-01-25 16:40:03.516152
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=81>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=82>)
# Issued at: 2025-01-25 16:40:03.697506
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=82>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=83>)
# Issued at: 2025-01-25 16:40:03.800369
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=83>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=84>)
# Issued at: 2025-01-25 16:40:03.905019
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=84>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=85>)
# Issued at: 2025-01-25 16:40:04.087724
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=85>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=86>)
# Issued at: 2025-01-25 16:40:04.357180
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=86>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=87>)
# Issued at: 2025-01-25 16:40:04.623715
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=87>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000005', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=88>)
# Issued at: 2025-01-25 16:40:04.721184
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=88>)
StoreHelper.restock_product(*(), **{'ean': '100000000005', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000005', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=89>)
# Issued at: 2025-01-25 16:40:04.821035
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=89>)
StoreHelper.restock_product(*(), **{'ean': '100000000005', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000005', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=90>)
# Issued at: 2025-01-25 16:40:04.917577
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=90>)
StoreHelper.restock_product(*(), **{'ean': '100000000005', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=26>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=31>)
# Issued at: 2025-01-25 16:40:05.273333
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=31>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=32>)
# Issued at: 2025-01-25 16:40:05.590007
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=32>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=33>)
# Issued at: 2025-01-25 16:40:05.890507
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=33>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=34>)
# Issued at: 2025-01-25 16:40:06.200959
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=34>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=35>)
# Issued at: 2025-01-25 16:40:06.526138
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=35>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=91>)
# Issued at: 2025-01-25 16:40:06.639861
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=91>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=92>)
# Issued at: 2025-01-25 16:40:06.767238
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=92>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=93>)
# Issued at: 2025-01-25 16:40:06.905920
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=93>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=94>)
# Issued at: 2025-01-25 16:40:07.011515
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=94>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=95>)
# Issued at: 2025-01-25 16:40:07.111515
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=95>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=96>)
# Issued at: 2025-01-25 16:40:07.210606
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=96>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=97>)
# Issued at: 2025-01-25 16:40:07.327696
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=97>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=98>)
# Issued at: 2025-01-25 16:40:07.427292
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=98>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=99>)
# Issued at: 2025-01-25 16:40:07.526212
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=99>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=100>)
# Issued at: 2025-01-25 16:40:07.623483
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=100>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=101>)
# Issued at: 2025-01-25 16:40:07.723043
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=101>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=102>)
# Issued at: 2025-01-25 16:40:07.832198
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=102>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000005', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=103>)
# Issued at: 2025-01-25 16:40:07.929955
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=103>)
StoreHelper.restock_product(*(), **{'ean': '100000000005', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000005', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=104>)
# Issued at: 2025-01-25 16:40:08.030083
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=104>)
StoreHelper.restock_product(*(), **{'ean': '100000000005', 'quantity': 15, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000005', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=105>)
# Issued at: 2025-01-25 16:40:08.127865
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=105>)
StoreHelper.restock_product(*(), **{'ean': '100000000005', 'quantity': 20, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=31>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 16:47:06.657471
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 16:47:06.717504
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 16:47:06.781845
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 16:47:06.847819
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 16:47:06.909670
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 16:47:07.267184
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 16:47:07.351569
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 16:47:07.425881
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 16:47:07.517995
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 16:47:07.600932
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 16:47:07.666574
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 16:47:08.007499
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 16:49:07.438392
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 16:49:07.501822
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 16:49:07.571815
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 16:49:07.634036
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 16:49:07.707297
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 16:49:08.077987
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 16:49:08.181935
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 16:49:08.288116
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 16:49:08.387947
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 16:49:08.481654
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 16:49:08.587395
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 16:49:08.906071
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 16:51:50.224556
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 16:51:50.285946
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 16:51:50.351812
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 16:51:50.418929
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 16:51:50.483874
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 16:51:50.827270
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 16:51:50.928756
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 16:51:51.051004
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 16:51:51.147606
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 16:51:51.259112
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 16:51:51.353163
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 16:51:51.805704
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 16:52:30.089606
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 16:52:30.150684
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 16:52:30.215154
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 16:52:30.281064
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 16:52:30.345776
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 16:52:30.648864
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 16:52:30.735147
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 16:52:30.820183
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 16:52:30.903613
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 16:52:30.990583
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 16:52:31.071724
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 16:52:31.370995
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 16:52:58.502159
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 16:52:58.563664
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 16:52:58.630036
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 16:52:58.695969
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 16:52:58.760603
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 16:52:59.133966
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 16:52:59.484138
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 16:52:59.855185
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 16:53:00.205672
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 16:53:00.552078
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 16:53:00.675524
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 16:53:00.786634
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 16:53:00.937419
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 16:53:01.121584
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 16:53:01.225698
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 16:53:01.543388
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 16:53:01.861309
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 16:53:02.166945
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 16:53:02.479244
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
# Issued at: 2025-01-25 16:53:02.800194
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 17:20:54.581911
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 17:20:54.642234
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 17:20:54.712028
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 17:20:54.774099
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 17:20:54.837497
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 17:20:55.191766
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 17:20:55.510475
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 17:20:55.851671
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 17:20:56.240959
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 17:20:56.784420
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 17:21:54.391825
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 17:21:54.452982
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 17:21:54.520165
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 17:21:54.584615
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 17:21:54.651079
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 17:21:55.019592
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 17:21:55.340321
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 17:21:55.720065
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 17:21:56.076378
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 17:21:56.398269
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 17:21:56.548085
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 17:21:56.686971
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
# Issued at: 2025-01-25 17:21:56.817730
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 17:23:00.511181
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 17:23:00.569925
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 17:23:00.640017
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 17:23:00.704257
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 17:23:00.771731
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 17:23:01.171743
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 17:23:01.523040
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 17:23:01.857331
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 17:23:02.180865
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 17:23:02.501261
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 17:23:02.625681
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 17:23:02.783441
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
# Issued at: 2025-01-25 17:23:02.911532
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 17:23:58.036300
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 17:23:58.096509
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 17:23:58.166783
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 17:23:58.233298
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 17:23:58.317262
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 17:23:58.615703
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 17:23:58.937582
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 17:23:59.296441
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 17:23:59.741386
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 17:24:00.051304
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 17:24:00.169164
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 17:24:00.299824
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
# Issued at: 2025-01-25 17:24:00.435186
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 17:30:21.882846
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 17:30:21.950672
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 17:30:22.021185
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 17:30:22.083081
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 17:30:22.148655
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 17:30:22.486793
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 17:30:22.884632
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 17:30:23.203854
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 17:30:23.509848
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 17:30:23.829702
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 17:30:23.969383
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 17:30:24.114305
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
# Issued at: 2025-01-25 17:30:24.239730
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 17:31:07.658798
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 17:31:07.718927
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 17:31:07.782804
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 17:31:07.848577
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 17:31:07.928005
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 17:31:08.253002
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 17:31:08.565830
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 17:31:08.887795
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 17:31:09.231464
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 17:31:09.560569
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 17:31:09.702643
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 17:31:09.830282
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
# Issued at: 2025-01-25 17:31:09.961911
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
# Issued at: 2025-01-25 17:31:10.262335
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 17:34:25.231682
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 17:34:25.293558
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 17:34:25.352950
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 17:34:25.419076
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 17:34:25.485548
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 17:34:25.816814
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 17:34:26.158852
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 17:34:26.491150
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 17:34:26.840894
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 17:34:27.221142
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 17:34:27.527075
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 17:34:27.654734
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
# Issued at: 2025-01-25 17:34:27.787701
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
# Issued at: 2025-01-25 17:34:28.094403
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 17:36:24.056606
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 17:36:24.115968
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 17:36:24.184214
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 17:36:24.245254
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 17:36:24.354407
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 17:36:24.763619
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 17:36:25.125372
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 17:36:25.561169
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 17:36:25.916224
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 17:36:26.254382
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 17:36:26.398050
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
# Issued at: 2025-01-25 17:36:26.742387
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 17:38:34.272374
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 17:38:34.335792
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 17:38:34.396932
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 17:38:34.460579
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 17:38:34.532772
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 17:38:34.895994
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 17:38:35.249312
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 17:38:35.661144
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 17:38:36.023001
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 17:38:36.354281
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 17:38:36.493981
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
# Issued at: 2025-01-25 17:38:36.835313
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 17:42:31.127075
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 17:42:31.189893
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 17:42:31.257446
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 17:42:31.320284
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 17:42:31.385735
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 17:42:31.733398
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 17:42:32.046026
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 17:42:32.376330
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 17:42:32.716647
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 17:42:33.042641
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 17:42:33.189957
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 17:42:33.331331
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
# Issued at: 2025-01-25 17:42:33.459945
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
# Issued at: 2025-01-25 17:42:33.743747
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 17:42:33.857462
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 17:42:33.935082
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 17:42:34.003784
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 17:42:34.087095
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 17:42:34.182422
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 17:42:34.516285
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 17:42:34.808769
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 17:42:35.112824
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 17:42:35.436551
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
# Issued at: 2025-01-25 17:42:35.766429
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
# Issued at: 2025-01-25 17:42:35.935110
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
# Issued at: 2025-01-25 17:42:36.117253
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
# Issued at: 2025-01-25 17:42:36.327892
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
# Issued at: 2025-01-25 17:42:36.539345
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
# Issued at: 2025-01-25 17:42:36.657402
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
# Issued at: 2025-01-25 17:42:36.795264
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 17:47:27.130536
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 17:47:27.192949
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 17:47:27.260233
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 17:47:27.321119
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 17:47:27.379999
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 17:47:27.701404
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 17:47:28.043306
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 17:47:28.372856
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 17:47:28.704304
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 17:47:29.013333
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 17:47:29.156895
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('4.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 17:47:29.278256
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('4.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('4.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
# Issued at: 2025-01-25 17:47:29.391475
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('4.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
# Issued at: 2025-01-25 17:47:29.515167
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
# Issued at: 2025-01-25 17:47:29.639802
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 17:47:29.759912
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 17:47:29.824287
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 17:47:29.886419
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 17:47:29.952319
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 17:47:30.014311
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 17:47:30.314296
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 17:47:30.606306
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 17:47:30.936909
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 17:47:31.309154
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
# Issued at: 2025-01-25 17:47:31.639757
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
# Issued at: 2025-01-25 17:47:31.791578
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
# Issued at: 2025-01-25 17:47:31.929075
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
# Issued at: 2025-01-25 17:47:32.051983
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
# Issued at: 2025-01-25 17:47:32.289189
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
# Issued at: 2025-01-25 17:47:32.489974
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 17:49:11.560136
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 17:49:11.620056
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 17:49:11.688591
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 17:49:11.752108
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 17:49:11.817409
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 17:49:12.166011
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 17:49:12.481862
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 17:49:12.791834
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 17:49:13.098623
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 17:49:13.443898
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 17:49:13.582192
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('4.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 17:49:13.714402
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('4.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('4.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
# Issued at: 2025-01-25 17:49:13.856917
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('4.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
# Issued at: 2025-01-25 17:49:13.999972
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
# Issued at: 2025-01-25 17:49:14.132113
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
# Issued at: 2025-01-25 17:49:14.505260
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=3>)
# Issued at: 2025-01-25 17:49:14.772180
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=3>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 17:49:14.910044
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 17:49:15.003628
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 17:49:15.180365
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 17:49:15.281517
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 17:49:15.363343
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 17:49:15.664870
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 17:49:15.974887
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 17:49:16.291175
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 17:49:16.594577
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
# Issued at: 2025-01-25 17:49:16.945214
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
# Issued at: 2025-01-25 17:49:17.243509
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
# Issued at: 2025-01-25 17:49:17.361452
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
# Issued at: 2025-01-25 17:49:17.499288
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=4>)
# Issued at: 2025-01-25 17:49:17.702981
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=4>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 17:50:34.452088
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 17:50:34.513321
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 17:50:34.582300
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 17:50:34.647855
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 17:50:34.712360
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 17:50:35.065831
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 17:50:35.374932
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 17:50:35.742252
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 17:50:36.099691
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 17:50:36.422296
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 17:50:36.556196
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 17:50:36.688374
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
# Issued at: 2025-01-25 17:50:36.816975
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
# Issued at: 2025-01-25 17:50:37.017797
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 17:50:37.127856
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 17:50:37.212960
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 17:50:37.284021
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 17:50:37.367299
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 17:50:37.432357
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 17:50:37.728912
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 17:50:38.037696
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 17:50:38.361630
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 17:50:38.674296
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
# Issued at: 2025-01-25 17:50:39.036241
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
# Issued at: 2025-01-25 17:50:39.199232
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('4.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
# Issued at: 2025-01-25 17:50:39.327472
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('4.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('4.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
# Issued at: 2025-01-25 17:50:39.446944
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('4.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
# Issued at: 2025-01-25 17:50:39.577423
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
# Issued at: 2025-01-25 17:50:39.705049
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=3>)
# Issued at: 2025-01-25 17:50:39.995186
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=3>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=5>)
# Issued at: 2025-01-25 17:50:40.265633
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=5>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 17:50:40.447026
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 17:50:40.522238
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 17:50:40.600152
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 17:50:40.756850
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 17:50:40.954046
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
# Issued at: 2025-01-25 17:50:41.305490
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
# Issued at: 2025-01-25 17:50:41.657789
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
# Issued at: 2025-01-25 17:50:41.964329
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
# Issued at: 2025-01-25 17:50:42.276904
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
# Issued at: 2025-01-25 17:50:42.596795
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
# Issued at: 2025-01-25 17:50:42.723435
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('4.99'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
# Issued at: 2025-01-25 17:50:42.871839
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('4.99'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('4.99'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
# Issued at: 2025-01-25 17:50:43.021296
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('4.99'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=12>)
# Issued at: 2025-01-25 17:50:43.145497
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=12>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=13>)
# Issued at: 2025-01-25 17:50:43.271830
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=13>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=7>)
# Issued at: 2025-01-25 17:50:43.638844
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=7>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=8>)
# Issued at: 2025-01-25 17:50:44.004700
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=8>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 17:51:17.364860
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 17:51:17.425551
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 17:51:17.487570
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 17:51:17.554286
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 17:51:17.620608
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 17:51:17.922596
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 17:51:18.252363
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 17:51:18.569092
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 17:51:18.894252
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 17:51:19.230879
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 17:51:19.378569
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 17:51:19.510640
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
# Issued at: 2025-01-25 17:51:19.655866
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
# Issued at: 2025-01-25 17:51:19.872060
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 17:51:19.977583
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 17:51:20.092591
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 17:51:20.221631
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 17:51:20.311407
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 17:51:20.409588
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 17:51:20.726622
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 17:51:21.030886
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 17:51:21.340844
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 17:51:21.667568
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
# Issued at: 2025-01-25 17:51:21.985575
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
# Issued at: 2025-01-25 17:51:22.128632
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('4.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
# Issued at: 2025-01-25 17:51:22.259016
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('4.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('4.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
# Issued at: 2025-01-25 17:51:22.396845
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('4.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
# Issued at: 2025-01-25 17:51:22.515156
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
# Issued at: 2025-01-25 17:51:22.638718
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
# Issued at: 2025-01-25 17:51:22.853096
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 17:51:22.955277
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 17:51:23.019613
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 17:51:23.084368
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 17:51:23.149311
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 17:51:23.211717
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
# Issued at: 2025-01-25 17:51:23.506723
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
# Issued at: 2025-01-25 17:51:23.811970
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
# Issued at: 2025-01-25 17:51:24.199202
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
# Issued at: 2025-01-25 17:51:24.683049
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
# Issued at: 2025-01-25 17:51:25.033476
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
# Issued at: 2025-01-25 17:51:25.160245
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('4.99'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
# Issued at: 2025-01-25 17:51:25.334443
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('4.99'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('4.99'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
# Issued at: 2025-01-25 17:51:25.442729
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('4.99'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=12>)
# Issued at: 2025-01-25 17:51:25.614837
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=12>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=13>)
# Issued at: 2025-01-25 17:51:25.901275
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=13>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=4>)
# Issued at: 2025-01-25 17:51:26.224194
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=4>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=5>)
# Issued at: 2025-01-25 17:51:26.425720
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=5>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 17:52:29.101253
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 17:52:29.162455
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 17:52:29.230083
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 17:52:29.291149
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 17:52:29.356976
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 17:52:29.703049
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 17:52:30.196565
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 17:52:30.486837
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 17:52:30.813286
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 17:52:31.135930
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 17:52:31.419437
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 17:52:31.571013
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
# Issued at: 2025-01-25 17:52:31.766789
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
# Issued at: 2025-01-25 17:52:31.973005
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 17:52:32.082957
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 17:52:32.159421
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 17:52:32.251028
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 17:52:32.348649
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 17:52:32.425281
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 17:52:32.730519
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 17:52:33.040218
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 17:52:33.383455
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 17:52:33.691467
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
# Issued at: 2025-01-25 17:52:33.999384
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
# Issued at: 2025-01-25 17:52:34.133138
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('4.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
# Issued at: 2025-01-25 17:52:34.270153
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('4.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('4.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
# Issued at: 2025-01-25 17:52:34.405557
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('4.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
# Issued at: 2025-01-25 17:52:34.537315
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
# Issued at: 2025-01-25 17:52:34.713439
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
# Issued at: 2025-01-25 17:52:35.028539
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 17:52:35.208988
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 17:52:35.326901
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 17:52:35.410600
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 17:52:35.482474
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 17:52:35.560154
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
# Issued at: 2025-01-25 17:52:35.956832
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
# Issued at: 2025-01-25 17:52:36.389764
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
# Issued at: 2025-01-25 17:52:36.743860
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
# Issued at: 2025-01-25 17:52:37.069352
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
# Issued at: 2025-01-25 17:52:37.428385
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
# Issued at: 2025-01-25 17:52:37.592115
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('4.99'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
# Issued at: 2025-01-25 17:52:37.761731
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('4.99'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('4.99'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
# Issued at: 2025-01-25 17:52:37.940467
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('4.99'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=12>)
# Issued at: 2025-01-25 17:52:38.094770
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=12>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=13>)
# Issued at: 2025-01-25 17:52:38.335599
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=13>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=4>)
# Issued at: 2025-01-25 17:52:38.793268
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=4>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=5>)
# Issued at: 2025-01-25 17:52:39.015967
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=5>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 17:56:55.955826
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 17:56:56.016464
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 17:56:56.083714
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 17:56:56.144158
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 17:56:56.213926
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 17:56:56.581914
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 17:56:57.761016
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 17:56:58.131891
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 17:56:58.461072
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 17:56:58.859137
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 17:56:59.176923
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 17:56:59.466028
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
# Issued at: 2025-01-25 17:56:59.670127
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
# Issued at: 2025-01-25 17:56:59.882714
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 17:57:00.035327
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 17:57:00.138951
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 17:57:00.218411
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 17:57:00.307937
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 17:57:00.386234
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 17:57:00.674171
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 17:57:00.971234
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 17:57:01.277337
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 17:57:01.602222
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
# Issued at: 2025-01-25 17:57:01.955284
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
# Issued at: 2025-01-25 17:57:02.237837
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 17:57:02.329537
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 17:57:02.416874
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 17:57:02.487236
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 17:57:02.575839
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 17:57:02.650266
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
# Issued at: 2025-01-25 17:57:03.002622
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
# Issued at: 2025-01-25 17:57:03.312592
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
# Issued at: 2025-01-25 17:57:03.649932
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
# Issued at: 2025-01-25 17:57:03.966461
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
# Issued at: 2025-01-25 17:57:04.292632
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
# Issued at: 2025-01-25 17:57:04.446049
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 17:57:36.285013
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 17:57:36.347126
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 17:57:36.412786
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 17:57:36.475279
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 17:57:36.541726
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 17:57:36.850193
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 17:57:37.179173
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 17:57:37.511823
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 17:57:37.823699
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 17:57:38.152938
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 17:57:38.290231
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 17:57:38.437257
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
# Issued at: 2025-01-25 17:57:38.563015
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
# Issued at: 2025-01-25 17:57:38.780609
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 17:57:38.906544
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 17:57:38.987304
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 17:57:39.059131
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 17:57:39.161231
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 17:57:39.245580
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 17:57:39.605215
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 17:57:39.972034
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 17:57:40.308318
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 17:57:40.673266
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
# Issued at: 2025-01-25 17:57:41.000056
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
# Issued at: 2025-01-25 17:57:41.141337
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('4.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
# Issued at: 2025-01-25 17:57:41.276525
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('4.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
# Issued at: 2025-01-25 17:57:41.417228
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('2.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
# Issued at: 2025-01-25 17:57:41.545984
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('2.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
# Issued at: 2025-01-25 17:57:41.668083
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
# Issued at: 2025-01-25 17:57:41.869656
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=3>)
# Issued at: 2025-01-25 17:57:42.099048
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=3>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=4>)
# Issued at: 2025-01-25 17:57:42.280553
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=4>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 17:57:42.391391
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 17:57:42.478721
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 17:57:42.575546
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 17:57:42.652571
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 17:57:42.714452
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
# Issued at: 2025-01-25 17:57:43.023045
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
# Issued at: 2025-01-25 17:57:43.327067
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
# Issued at: 2025-01-25 17:57:43.659536
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
# Issued at: 2025-01-25 17:57:43.961396
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
# Issued at: 2025-01-25 17:57:44.284133
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
# Issued at: 2025-01-25 17:57:44.448108
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('4.99'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
# Issued at: 2025-01-25 17:57:44.586493
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('4.99'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
# Issued at: 2025-01-25 17:57:44.712028
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('2.99'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=12>)
# Issued at: 2025-01-25 17:57:44.828675
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=12>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('2.99'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=13>)
# Issued at: 2025-01-25 17:57:44.956167
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=13>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=6>)
# Issued at: 2025-01-25 17:57:45.359332
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=6>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=7>)
# Issued at: 2025-01-25 17:57:45.769424
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=7>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 17:58:39.660923
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 17:58:39.722965
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 17:58:39.792812
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 17:58:39.853486
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 17:58:39.919835
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 17:58:40.274813
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 17:58:40.609272
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 17:58:40.925903
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 17:58:41.268963
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 17:58:41.599007
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 17:58:41.748016
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 17:58:41.895603
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
# Issued at: 2025-01-25 17:58:42.040544
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
# Issued at: 2025-01-25 17:58:42.354431
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 17:58:42.461456
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 17:58:42.537388
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 17:58:42.759335
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 17:58:42.916512
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 17:58:43.037453
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 17:58:43.428995
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 17:58:43.758859
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 17:58:44.083570
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 17:58:44.464961
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
# Issued at: 2025-01-25 17:58:44.802955
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
# Issued at: 2025-01-25 17:58:44.937942
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
# Issued at: 2025-01-25 17:58:45.068832
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
# Issued at: 2025-01-25 17:58:45.193136
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
# Issued at: 2025-01-25 17:58:45.320781
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
# Issued at: 2025-01-25 17:58:45.459916
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 17:58:45.635247
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 17:58:45.709374
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 17:58:45.790703
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 17:58:45.867399
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 17:58:45.949072
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
# Issued at: 2025-01-25 17:58:46.270452
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
# Issued at: 2025-01-25 17:58:46.727977
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
# Issued at: 2025-01-25 17:58:47.051778
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
# Issued at: 2025-01-25 17:58:47.383900
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
# Issued at: 2025-01-25 17:58:47.703398
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
# Issued at: 2025-01-25 17:58:47.838391
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
# Issued at: 2025-01-25 17:58:47.962715
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
# Issued at: 2025-01-25 17:58:48.101836
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=12>)
# Issued at: 2025-01-25 17:58:48.247241
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=12>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=13>)
# Issued at: 2025-01-25 17:58:48.373674
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=13>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 17:59:42.289440
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 17:59:42.349276
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 17:59:42.410270
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 17:59:42.476152
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 17:59:42.543873
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 17:59:42.894342
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 17:59:43.225323
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 17:59:43.574679
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 17:59:43.932460
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 17:59:44.251091
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 17:59:44.376011
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 17:59:44.507774
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
# Issued at: 2025-01-25 17:59:44.639571
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
# Issued at: 2025-01-25 17:59:44.882145
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 17:59:44.979757
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 17:59:45.099681
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 17:59:45.188844
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 17:59:45.263598
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 17:59:45.433362
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 17:59:46.013718
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 17:59:46.322779
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 17:59:46.642698
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 17:59:47.031273
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
# Issued at: 2025-01-25 17:59:47.364177
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
# Issued at: 2025-01-25 17:59:47.486843
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
# Issued at: 2025-01-25 17:59:47.615210
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
# Issued at: 2025-01-25 17:59:47.734218
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
# Issued at: 2025-01-25 17:59:47.857512
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
# Issued at: 2025-01-25 17:59:47.981443
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 17:59:48.215394
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 17:59:48.394054
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 17:59:48.545730
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 17:59:48.690517
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 17:59:48.778069
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
# Issued at: 2025-01-25 17:59:49.086094
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
# Issued at: 2025-01-25 17:59:49.414432
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
# Issued at: 2025-01-25 17:59:49.726291
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
# Issued at: 2025-01-25 17:59:50.076853
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
# Issued at: 2025-01-25 17:59:50.495250
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
# Issued at: 2025-01-25 17:59:50.848724
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
# Issued at: 2025-01-25 17:59:51.035034
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
# Issued at: 2025-01-25 17:59:51.149940
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=3>)
# Issued at: 2025-01-25 17:59:51.444569
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=3>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:01:46.002607
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:01:46.063963
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:01:46.124181
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:01:46.191562
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:01:46.258472
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 18:01:46.601117
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 18:01:46.938652
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 18:01:47.405713
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 18:01:47.797923
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 18:01:48.237366
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 18:01:48.602615
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 18:01:48.736818
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
# Issued at: 2025-01-25 18:01:48.864896
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
# Issued at: 2025-01-25 18:01:49.091259
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:01:49.188814
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:01:49.281505
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:01:49.365251
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:01:49.440238
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:01:49.520596
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 18:01:49.826429
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 18:01:50.143093
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 18:01:50.443591
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 18:01:50.748022
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
# Issued at: 2025-01-25 18:01:51.051250
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
# Issued at: 2025-01-25 18:01:51.172788
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
# Issued at: 2025-01-25 18:01:51.300268
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
# Issued at: 2025-01-25 18:01:51.432598
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
# Issued at: 2025-01-25 18:01:51.569309
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
# Issued at: 2025-01-25 18:01:51.721064
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
# Issued at: 2025-01-25 18:01:51.933599
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:01:52.053636
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:01:52.143687
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:01:52.252242
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:01:52.329891
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:01:52.442628
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
# Issued at: 2025-01-25 18:01:52.832058
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
# Issued at: 2025-01-25 18:01:53.154097
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
# Issued at: 2025-01-25 18:01:53.475045
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
# Issued at: 2025-01-25 18:01:53.794112
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
# Issued at: 2025-01-25 18:01:54.116037
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
# Issued at: 2025-01-25 18:01:54.234169
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
# Issued at: 2025-01-25 18:01:54.359298
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
# Issued at: 2025-01-25 18:01:54.496115
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=4>)
# Issued at: 2025-01-25 18:01:54.778619
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=4>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:03:47.858201
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:03:47.918364
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:03:47.979755
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:03:48.044569
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:03:48.139823
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 18:03:48.601345
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 18:03:48.979610
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 18:03:49.309340
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 18:03:49.678069
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 18:03:50.005795
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 18:03:50.157912
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 18:03:50.308234
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
# Issued at: 2025-01-25 18:03:50.439105
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
# Issued at: 2025-01-25 18:03:50.707405
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:03:50.843722
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:03:50.945415
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:03:51.077263
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:03:51.158493
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:03:51.238675
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 18:03:51.556879
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 18:03:51.891246
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 18:03:52.203873
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 18:03:52.510138
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
# Issued at: 2025-01-25 18:03:52.849657
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
# Issued at: 2025-01-25 18:03:53.035761
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
# Issued at: 2025-01-25 18:03:53.157822
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
# Issued at: 2025-01-25 18:03:53.287742
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
# Issued at: 2025-01-25 18:03:53.403716
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
# Issued at: 2025-01-25 18:03:53.534489
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
# Issued at: 2025-01-25 18:03:53.745788
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:03:53.864244
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:03:53.939181
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:03:54.021571
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:03:54.097681
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:03:54.181271
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
# Issued at: 2025-01-25 18:03:54.517771
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
# Issued at: 2025-01-25 18:03:54.828958
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
# Issued at: 2025-01-25 18:03:55.145618
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
# Issued at: 2025-01-25 18:03:55.459684
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
# Issued at: 2025-01-25 18:03:55.779985
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
# Issued at: 2025-01-25 18:03:55.919281
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.99'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
# Issued at: 2025-01-25 18:03:56.049125
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
# Issued at: 2025-01-25 18:03:56.189312
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
StoreHelper.restock_product(*(), **{'ean': '100000000004', 'quantity': 2, 'purchase_price': Decimal('7.99'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=4>)
# Issued at: 2025-01-25 18:03:56.465347
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=4>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:06:49.892024
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:06:49.952772
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:06:50.021368
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:06:50.084858
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:06:50.151436
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 18:06:50.500680
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 18:06:50.835679
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 18:06:51.139436
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 18:06:51.468572
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 18:06:51.827060
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 18:06:52.018443
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 18:06:52.158275
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 1, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
# Issued at: 2025-01-25 18:06:52.301919
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 1, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
# Issued at: 2025-01-25 18:06:52.530336
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:06:52.695002
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:06:52.769974
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:06:52.853699
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:06:52.939727
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:06:53.011171
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 18:06:54.218952
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 18:06:54.548686
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 18:06:54.854287
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 18:06:55.160150
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
# Issued at: 2025-01-25 18:06:55.461010
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
# Issued at: 2025-01-25 18:06:55.600876
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
# Issued at: 2025-01-25 18:06:55.725375
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
# Issued at: 2025-01-25 18:06:55.839053
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
# Issued at: 2025-01-25 18:06:55.972954
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
# Issued at: 2025-01-25 18:06:56.109414
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
# Issued at: 2025-01-25 18:06:56.365939
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:06:56.582625
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:06:56.730437
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:06:56.811772
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:06:56.890617
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:06:56.970925
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
# Issued at: 2025-01-25 18:06:57.348082
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
# Issued at: 2025-01-25 18:06:57.737257
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
# Issued at: 2025-01-25 18:06:58.091187
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
# Issued at: 2025-01-25 18:06:58.455996
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
# Issued at: 2025-01-25 18:06:58.871606
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
# Issued at: 2025-01-25 18:06:59.106939
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
# Issued at: 2025-01-25 18:06:59.212949
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 1, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
# Issued at: 2025-01-25 18:06:59.393093
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 1, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:08:25.668462
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:08:25.734142
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:08:25.801500
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:08:25.863022
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:08:25.924330
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 18:08:26.283358
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 18:08:26.589966
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 18:08:26.908039
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 18:08:27.234447
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 18:08:27.561930
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 18:08:27.693003
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 18:08:27.847753
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 1, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
# Issued at: 2025-01-25 18:08:27.993280
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 1, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
# Issued at: 2025-01-25 18:08:28.234623
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:08:28.352557
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:08:28.455768
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:08:28.534362
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:08:28.607147
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:08:28.692858
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 18:08:29.008281
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 18:08:29.503893
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 18:08:29.825530
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 18:08:30.151632
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
# Issued at: 2025-01-25 18:08:30.461324
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
# Issued at: 2025-01-25 18:08:30.604421
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
# Issued at: 2025-01-25 18:08:30.744897
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
# Issued at: 2025-01-25 18:08:30.875482
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
# Issued at: 2025-01-25 18:08:31.006873
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
# Issued at: 2025-01-25 18:08:31.142831
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
# Issued at: 2025-01-25 18:08:31.361946
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:08:31.477778
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:08:31.557350
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:08:31.643214
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:08:31.721498
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:08:31.811547
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
# Issued at: 2025-01-25 18:08:32.169397
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
# Issued at: 2025-01-25 18:08:32.717637
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
# Issued at: 2025-01-25 18:08:33.039885
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
# Issued at: 2025-01-25 18:08:33.354194
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
# Issued at: 2025-01-25 18:08:33.660944
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
# Issued at: 2025-01-25 18:08:33.949934
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
# Issued at: 2025-01-25 18:08:34.147421
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 1, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
# Issued at: 2025-01-25 18:08:34.268057
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 1, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:09:32.806557
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:09:32.872259
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:09:32.944680
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:09:33.007266
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:09:33.075104
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 18:09:33.396313
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 18:09:33.738106
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 18:09:34.080535
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 18:09:34.416143
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 18:09:34.722115
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 18:09:34.859178
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 18:09:34.989237
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 1, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
# Issued at: 2025-01-25 18:09:35.118151
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 1, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
# Issued at: 2025-01-25 18:09:35.327873
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:09:35.438480
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:09:35.553415
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:09:35.627595
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:09:35.725608
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:09:35.812090
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 18:09:36.130226
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 18:09:36.434733
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 18:09:36.753478
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 18:09:37.077721
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
# Issued at: 2025-01-25 18:09:37.383902
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
# Issued at: 2025-01-25 18:09:37.549293
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
# Issued at: 2025-01-25 18:09:37.765036
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
# Issued at: 2025-01-25 18:09:37.937352
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
# Issued at: 2025-01-25 18:09:38.068283
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
# Issued at: 2025-01-25 18:09:38.192789
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
# Issued at: 2025-01-25 18:09:38.400526
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:09:38.507254
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:09:38.588463
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:09:38.676714
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:09:38.863592
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:09:38.979185
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
# Issued at: 2025-01-25 18:09:39.357374
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
# Issued at: 2025-01-25 18:09:39.710129
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
# Issued at: 2025-01-25 18:09:40.019284
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
# Issued at: 2025-01-25 18:09:40.324336
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
# Issued at: 2025-01-25 18:09:40.625582
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
# Issued at: 2025-01-25 18:09:40.741068
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
# Issued at: 2025-01-25 18:09:40.881492
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 1, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
# Issued at: 2025-01-25 18:09:41.003115
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 1, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:10:33.631513
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:10:33.693767
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:10:33.758694
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:10:33.824620
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:10:33.895930
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 18:10:34.244499
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 18:10:34.589666
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 18:10:34.970216
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 18:10:35.293830
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 18:10:35.616725
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 18:10:35.760220
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 18:10:35.899505
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 1, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
# Issued at: 2025-01-25 18:10:36.018778
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 1, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
# Issued at: 2025-01-25 18:10:36.272349
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:10:36.386800
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:10:36.469353
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:10:36.544634
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:10:36.638165
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:10:36.716663
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 18:10:37.050764
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 18:10:37.350363
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 18:10:37.657755
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 18:10:37.984162
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
# Issued at: 2025-01-25 18:10:38.332716
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
# Issued at: 2025-01-25 18:10:38.467079
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
# Issued at: 2025-01-25 18:10:38.625287
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
# Issued at: 2025-01-25 18:10:38.740951
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
# Issued at: 2025-01-25 18:10:38.894868
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
# Issued at: 2025-01-25 18:10:39.032698
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
# Issued at: 2025-01-25 18:10:39.485219
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:10:39.848186
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:10:40.005706
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:10:40.171497
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:10:40.258779
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:10:40.329137
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
# Issued at: 2025-01-25 18:10:40.662569
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
# Issued at: 2025-01-25 18:10:40.984786
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
# Issued at: 2025-01-25 18:10:41.302800
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
# Issued at: 2025-01-25 18:10:41.629704
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
# Issued at: 2025-01-25 18:10:41.957818
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
# Issued at: 2025-01-25 18:10:42.085855
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
# Issued at: 2025-01-25 18:10:42.229114
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 1, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
# Issued at: 2025-01-25 18:10:42.367574
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 1, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:11:40.795490
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:11:40.856847
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:11:40.918968
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:11:40.984084
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:11:41.051775
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 18:11:41.403003
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 18:11:41.761616
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 18:11:42.095769
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 18:11:42.410944
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 18:11:42.742637
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 18:11:42.901057
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 18:11:43.032729
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 1, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
# Issued at: 2025-01-25 18:11:43.213978
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 1, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
# Issued at: 2025-01-25 18:11:43.442558
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:11:43.535640
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:11:43.625189
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:11:43.695684
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:11:43.786675
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:11:43.874958
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 18:11:44.183389
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 18:11:44.500425
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 18:11:44.917052
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 18:11:45.313286
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
# Issued at: 2025-01-25 18:11:45.667589
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
# Issued at: 2025-01-25 18:11:45.897205
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
# Issued at: 2025-01-25 18:11:46.017824
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
# Issued at: 2025-01-25 18:11:46.144448
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
# Issued at: 2025-01-25 18:11:46.268901
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
# Issued at: 2025-01-25 18:11:46.402211
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
# Issued at: 2025-01-25 18:11:46.612513
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:11:46.708988
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:11:46.782139
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:11:46.864259
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:11:46.946104
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:11:47.021103
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
# Issued at: 2025-01-25 18:11:47.336655
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
# Issued at: 2025-01-25 18:11:47.637075
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
# Issued at: 2025-01-25 18:11:47.951629
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
# Issued at: 2025-01-25 18:11:48.270492
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
# Issued at: 2025-01-25 18:11:48.596019
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
# Issued at: 2025-01-25 18:11:48.719397
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
# Issued at: 2025-01-25 18:11:48.856582
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 1, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
# Issued at: 2025-01-25 18:11:48.974631
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 1, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:12:59.816031
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:12:59.879060
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:12:59.941418
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:13:00.008850
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:13:00.077283
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 18:13:00.422634
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 18:13:00.748043
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 18:13:01.059291
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 18:13:01.392125
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 18:13:01.777123
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 18:13:02.016180
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 18:13:02.128545
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 1, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
# Issued at: 2025-01-25 18:13:02.271694
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 1, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
# Issued at: 2025-01-25 18:13:02.500946
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:13:02.621338
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:13:02.691218
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:13:02.890471
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:13:03.107612
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:13:03.219962
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 18:13:03.629112
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 18:13:03.942929
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 18:13:04.252237
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 18:13:04.569195
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
# Issued at: 2025-01-25 18:13:04.894376
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
# Issued at: 2025-01-25 18:13:05.021353
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
# Issued at: 2025-01-25 18:13:05.144376
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
# Issued at: 2025-01-25 18:13:05.272154
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
# Issued at: 2025-01-25 18:13:05.404957
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
# Issued at: 2025-01-25 18:13:05.529079
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
# Issued at: 2025-01-25 18:13:05.750913
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:13:05.842539
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:13:05.920550
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:13:06.044871
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:13:06.118156
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:13:06.230941
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
# Issued at: 2025-01-25 18:13:06.619717
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
# Issued at: 2025-01-25 18:13:06.960032
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
# Issued at: 2025-01-25 18:13:07.285557
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
# Issued at: 2025-01-25 18:13:07.599007
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
# Issued at: 2025-01-25 18:13:07.940730
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
# Issued at: 2025-01-25 18:13:08.084823
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
# Issued at: 2025-01-25 18:13:08.207914
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 1, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
# Issued at: 2025-01-25 18:13:08.340581
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 1, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:15:19.181965
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:15:19.240458
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:15:19.306940
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:15:19.368922
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:15:19.439451
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 18:15:19.885245
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 18:15:20.462292
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 18:15:20.785391
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 18:15:21.207213
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 18:15:21.553585
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 18:15:21.704417
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 18:15:21.827772
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 1, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
# Issued at: 2025-01-25 18:15:21.951110
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 1, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
# Issued at: 2025-01-25 18:15:22.181405
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:15:22.283239
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:15:22.393824
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:15:22.481032
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:15:22.565187
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:15:22.639235
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 18:15:22.959887
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 18:15:23.262665
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 18:15:23.584466
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 18:15:23.893468
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
# Issued at: 2025-01-25 18:15:24.210848
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
# Issued at: 2025-01-25 18:15:24.333756
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
# Issued at: 2025-01-25 18:15:24.467219
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
# Issued at: 2025-01-25 18:15:24.601611
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
# Issued at: 2025-01-25 18:15:24.736300
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
# Issued at: 2025-01-25 18:15:24.862643
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
# Issued at: 2025-01-25 18:15:25.073876
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:15:25.178164
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:15:25.251299
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:15:25.326933
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:15:25.423370
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:15:25.507268
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
# Issued at: 2025-01-25 18:15:25.881516
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
# Issued at: 2025-01-25 18:15:26.374143
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
# Issued at: 2025-01-25 18:15:26.689065
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
# Issued at: 2025-01-25 18:15:27.017627
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
# Issued at: 2025-01-25 18:15:27.329572
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
# Issued at: 2025-01-25 18:15:27.485760
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
# Issued at: 2025-01-25 18:15:27.753178
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 1, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
# Issued at: 2025-01-25 18:15:28.086750
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 1, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:15:48.734512
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:15:48.795812
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:15:48.864963
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:15:48.930629
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:15:48.996837
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 18:15:49.296716
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 18:15:49.633451
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 18:15:49.996512
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 18:15:50.307617
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 18:15:50.638061
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 18:15:50.772189
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 18:15:50.912640
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
# Issued at: 2025-01-25 18:15:51.061199
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
# Issued at: 2025-01-25 18:15:51.286566
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:15:51.414582
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:15:51.488342
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:15:51.562128
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:15:51.661139
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:15:51.734736
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 18:15:52.047212
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 18:15:52.393104
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 18:15:52.703563
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 18:15:53.032779
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
# Issued at: 2025-01-25 18:15:53.425144
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
# Issued at: 2025-01-25 18:15:53.618648
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
# Issued at: 2025-01-25 18:15:53.745034
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
# Issued at: 2025-01-25 18:15:53.872348
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
# Issued at: 2025-01-25 18:15:54.010453
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
# Issued at: 2025-01-25 18:15:54.141214
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
# Issued at: 2025-01-25 18:15:54.361510
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:15:54.467648
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:15:54.552167
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:15:54.631114
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:15:54.709866
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:15:54.829047
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
# Issued at: 2025-01-25 18:15:55.251455
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
# Issued at: 2025-01-25 18:15:55.985079
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
# Issued at: 2025-01-25 18:15:56.377977
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
# Issued at: 2025-01-25 18:15:56.708271
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
# Issued at: 2025-01-25 18:15:57.040282
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
# Issued at: 2025-01-25 18:15:57.179278
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
# Issued at: 2025-01-25 18:15:57.305465
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
# Issued at: 2025-01-25 18:15:57.421255
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=4>)
# Issued at: 2025-01-25 18:15:57.705259
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=4>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=5>)
# Issued at: 2025-01-25 18:15:57.952301
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=5>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:16:58.511295
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:16:58.571626
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:16:58.640741
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:16:58.702710
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:16:58.771511
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 18:16:59.167581
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 18:16:59.482852
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 18:16:59.861982
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 18:17:00.195827
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 18:17:00.523095
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 18:17:00.661075
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 18:17:00.820783
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
# Issued at: 2025-01-25 18:17:00.927731
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
# Issued at: 2025-01-25 18:17:01.168962
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:17:01.298164
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:17:01.385736
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:17:01.461859
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:17:01.548939
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:17:01.644653
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 18:17:01.981969
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 18:17:02.477540
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 18:17:02.998388
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 18:17:03.303363
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
# Issued at: 2025-01-25 18:17:03.616360
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
# Issued at: 2025-01-25 18:17:03.752915
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
# Issued at: 2025-01-25 18:17:03.887105
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
# Issued at: 2025-01-25 18:17:04.020230
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
# Issued at: 2025-01-25 18:17:04.157033
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
# Issued at: 2025-01-25 18:17:04.284615
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
# Issued at: 2025-01-25 18:17:04.491472
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:17:04.582064
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:17:04.670849
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:17:04.752707
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:17:04.835603
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:17:04.932433
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
# Issued at: 2025-01-25 18:17:05.247259
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
# Issued at: 2025-01-25 18:17:05.553135
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
# Issued at: 2025-01-25 18:17:05.873057
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
# Issued at: 2025-01-25 18:17:06.197274
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
# Issued at: 2025-01-25 18:17:06.528815
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
# Issued at: 2025-01-25 18:17:06.657914
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
# Issued at: 2025-01-25 18:17:06.813359
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
# Issued at: 2025-01-25 18:17:06.981714
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=4>)
# Issued at: 2025-01-25 18:17:07.412995
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=4>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=5>)
# Issued at: 2025-01-25 18:17:07.624835
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=5>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:18:53.557664
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:18:53.617535
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:18:53.687869
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:18:53.749148
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:18:53.844640
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 18:18:54.462107
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 18:18:54.769230
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 18:18:55.162500
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 18:18:55.484209
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 18:18:55.809420
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 18:18:55.959332
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 18:18:56.089065
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
# Issued at: 2025-01-25 18:18:56.231763
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
# Issued at: 2025-01-25 18:18:56.452568
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:18:56.546163
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:18:56.622767
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:18:56.714413
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:18:56.809742
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:18:56.909920
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 18:18:57.223388
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 18:18:57.531276
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 18:18:57.863333
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 18:18:58.223306
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
# Issued at: 2025-01-25 18:18:58.542768
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
# Issued at: 2025-01-25 18:18:58.690261
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
# Issued at: 2025-01-25 18:18:58.811825
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
# Issued at: 2025-01-25 18:18:58.962844
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
# Issued at: 2025-01-25 18:18:59.110697
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
# Issued at: 2025-01-25 18:18:59.230348
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
# Issued at: 2025-01-25 18:18:59.440180
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:18:59.546169
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:18:59.623861
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:18:59.719439
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:18:59.827824
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:18:59.910166
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
# Issued at: 2025-01-25 18:19:00.244682
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
# Issued at: 2025-01-25 18:19:00.565826
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
# Issued at: 2025-01-25 18:19:00.941219
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
# Issued at: 2025-01-25 18:19:01.354655
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
# Issued at: 2025-01-25 18:19:01.703579
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
# Issued at: 2025-01-25 18:19:01.839111
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
# Issued at: 2025-01-25 18:19:01.970856
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
# Issued at: 2025-01-25 18:19:02.109359
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=4>)
# Issued at: 2025-01-25 18:19:02.407514
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=4>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=5>)
# Issued at: 2025-01-25 18:19:02.608208
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=5>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:25:36.102479
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:25:36.163035
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:25:36.226021
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:25:36.295534
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:25:36.361494
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 18:25:36.705582
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 18:25:37.109246
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 18:25:37.477128
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 18:25:37.812284
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 18:25:38.125927
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 18:25:38.241015
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 18:25:38.313793
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
# Issued at: 2025-01-25 18:25:38.400980
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
# Issued at: 2025-01-25 18:25:38.578669
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:25:38.708456
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:25:38.817758
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:25:38.899954
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:25:38.989150
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:25:39.067424
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 18:25:39.462460
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 18:25:39.895596
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 18:25:40.211871
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 18:25:40.533531
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
# Issued at: 2025-01-25 18:25:40.871033
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
# Issued at: 2025-01-25 18:25:40.963917
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
# Issued at: 2025-01-25 18:25:41.033155
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
# Issued at: 2025-01-25 18:25:41.126774
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
# Issued at: 2025-01-25 18:25:41.211048
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
# Issued at: 2025-01-25 18:25:41.287870
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
# Issued at: 2025-01-25 18:25:41.464317
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:25:41.570027
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:25:41.660920
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:25:41.738759
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:25:41.817637
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:25:41.895635
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
# Issued at: 2025-01-25 18:25:42.282770
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
# Issued at: 2025-01-25 18:25:42.647254
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
# Issued at: 2025-01-25 18:25:42.964383
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
# Issued at: 2025-01-25 18:25:43.293188
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
# Issued at: 2025-01-25 18:25:43.609778
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
# Issued at: 2025-01-25 18:25:43.697349
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
# Issued at: 2025-01-25 18:25:43.804002
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
# Issued at: 2025-01-25 18:25:43.883077
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=4>)
# Issued at: 2025-01-25 18:25:44.163229
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=4>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=5>)
# Issued at: 2025-01-25 18:25:44.330336
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=5>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:27:15.492337
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:27:15.556863
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:27:15.620427
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:27:15.688703
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:27:15.758759
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 18:27:16.097341
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 18:27:16.459633
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 18:27:16.843509
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 18:27:17.512175
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 18:27:17.828514
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 18:27:17.907049
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 18:27:17.996343
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
# Issued at: 2025-01-25 18:27:18.068659
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
# Issued at: 2025-01-25 18:27:18.309121
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:27:18.415471
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:27:18.497831
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:27:18.578577
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:27:18.654092
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:27:18.756765
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 18:27:19.070290
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 18:27:19.373111
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 18:27:19.729158
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 18:27:20.044575
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
# Issued at: 2025-01-25 18:27:20.373242
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
# Issued at: 2025-01-25 18:27:20.453413
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
# Issued at: 2025-01-25 18:27:20.533457
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
# Issued at: 2025-01-25 18:27:20.627649
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
# Issued at: 2025-01-25 18:27:20.715940
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
# Issued at: 2025-01-25 18:27:20.789028
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
# Issued at: 2025-01-25 18:27:20.975540
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:27:21.072465
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:27:21.164064
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:27:21.245092
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:27:21.320581
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:27:21.408625
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
# Issued at: 2025-01-25 18:27:21.707545
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
# Issued at: 2025-01-25 18:27:22.007270
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
# Issued at: 2025-01-25 18:27:22.313799
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
# Issued at: 2025-01-25 18:27:22.633453
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
# Issued at: 2025-01-25 18:27:22.964524
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
# Issued at: 2025-01-25 18:27:23.041090
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
# Issued at: 2025-01-25 18:27:23.118552
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
# Issued at: 2025-01-25 18:27:23.230726
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=4>)
# Issued at: 2025-01-25 18:27:23.697232
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=4>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=5>)
# Issued at: 2025-01-25 18:27:24.034274
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=5>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:30:26.368663
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:30:26.428844
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:30:26.499720
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:30:26.563771
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:30:26.635028
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 18:30:26.984956
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 18:30:27.351082
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 18:30:27.805782
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 18:30:28.144412
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 18:30:28.486187
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 18:30:28.590559
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 18:30:28.660358
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
# Issued at: 2025-01-25 18:30:28.743976
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
# Issued at: 2025-01-25 18:30:28.830943
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
# Issued at: 2025-01-25 18:30:28.895330
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
# Issued at: 2025-01-25 18:30:29.172300
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:31:13.500719
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:31:13.560896
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:31:13.642842
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:31:13.709434
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:31:13.779263
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 18:31:14.116891
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 18:31:14.435311
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 18:31:14.748240
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 18:31:15.152057
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 18:31:15.558706
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 18:31:15.700103
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 18:31:15.787956
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
# Issued at: 2025-01-25 18:31:15.877038
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
# Issued at: 2025-01-25 18:31:15.951699
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
# Issued at: 2025-01-25 18:31:16.035573
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
# Issued at: 2025-01-25 18:31:16.238777
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
# Issued at: 2025-01-25 18:31:16.400345
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:32:01.817759
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:32:01.877836
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:32:01.948352
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:32:02.007382
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:32:02.076004
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 18:32:02.445352
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 18:32:02.760864
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 18:32:03.081205
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 18:32:03.419655
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 18:32:03.728709
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 18:32:03.841592
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 18:32:03.929076
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
# Issued at: 2025-01-25 18:32:04.019955
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
# Issued at: 2025-01-25 18:32:04.094999
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
# Issued at: 2025-01-25 18:32:04.198108
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
# Issued at: 2025-01-25 18:32:04.403944
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
# Issued at: 2025-01-25 18:32:04.571002
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=3>)
# Issued at: 2025-01-25 18:32:04.728287
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=3>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:34:00.217144
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:34:00.278816
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:34:00.348265
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:34:00.408571
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:34:00.471541
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 18:34:00.823314
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 18:34:01.435681
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 18:34:01.813868
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 18:34:02.198255
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 18:34:02.516448
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 18:34:02.609966
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 18:34:02.686429
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
# Issued at: 2025-01-25 18:34:02.814567
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
# Issued at: 2025-01-25 18:34:02.906677
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
# Issued at: 2025-01-25 18:34:02.989005
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
# Issued at: 2025-01-25 18:34:03.268622
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=4>)
# Issued at: 2025-01-25 18:34:03.511452
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=4>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:34:03.631678
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:34:03.729050
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:34:03.805734
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:34:03.899544
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:34:03.991195
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 18:34:04.318427
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 18:34:04.642811
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 18:34:04.960611
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 18:34:05.270746
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
# Issued at: 2025-01-25 18:34:05.596659
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
# Issued at: 2025-01-25 18:34:05.672792
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
# Issued at: 2025-01-25 18:34:05.752586
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
# Issued at: 2025-01-25 18:34:05.836161
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=5>)
# Issued at: 2025-01-25 18:34:05.988875
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=5>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:34:06.101241
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:34:06.177206
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:34:06.273988
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:34:06.384173
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:34:06.511526
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
# Issued at: 2025-01-25 18:34:06.861863
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
# Issued at: 2025-01-25 18:34:07.170731
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
# Issued at: 2025-01-25 18:34:07.488062
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
# Issued at: 2025-01-25 18:34:07.835153
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
# Issued at: 2025-01-25 18:34:08.152050
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
# Issued at: 2025-01-25 18:34:08.233983
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
# Issued at: 2025-01-25 18:34:08.317636
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
# Issued at: 2025-01-25 18:34:08.393369
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=12>)
# Issued at: 2025-01-25 18:34:08.459027
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=12>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=13>)
# Issued at: 2025-01-25 18:34:08.526064
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=13>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=6>)
# Issued at: 2025-01-25 18:34:08.685068
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=6>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=7>)
# Issued at: 2025-01-25 18:34:08.846636
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=7>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=8>)
# Issued at: 2025-01-25 18:34:09.003303
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=8>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:34:09.113582
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:34:09.191960
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:34:09.261529
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:34:09.378933
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:34:09.558103
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=16>)
# Issued at: 2025-01-25 18:34:09.964348
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=16>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=17>)
# Issued at: 2025-01-25 18:34:10.294250
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=17>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=18>)
# Issued at: 2025-01-25 18:34:10.773197
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=18>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=19>)
# Issued at: 2025-01-25 18:34:11.140220
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=19>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=20>)
# Issued at: 2025-01-25 18:34:11.529202
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=20>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=19>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=14>)
# Issued at: 2025-01-25 18:34:11.718099
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=14>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=19>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=19>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=15>)
# Issued at: 2025-01-25 18:34:11.954008
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=15>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=19>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=19>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=16>)
# Issued at: 2025-01-25 18:34:12.157329
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=16>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=19>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=10>)
# Issued at: 2025-01-25 18:34:12.509000
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=10>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=11>)
# Issued at: 2025-01-25 18:34:12.681393
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=11>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:39:57.554542
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:39:57.614695
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:39:57.673832
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 18:39:58.035436
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 18:39:58.356396
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 18:39:58.686203
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 8, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 18:39:58.776989
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 8, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
# Issued at: 2025-01-25 18:39:58.954053
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
# Issued at: 2025-01-25 18:39:59.133502
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=3>)
# Issued at: 2025-01-25 18:39:59.283093
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=3>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=4>)
# Issued at: 2025-01-25 18:39:59.435301
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=4>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:39:59.551882
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:39:59.624651
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:39:59.723565
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 18:40:00.187869
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 18:40:00.531543
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 18:40:00.839118
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 10, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=5>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 18:40:00.903924
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 10, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=5>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=5>)
# Issued at: 2025-01-25 18:40:01.054231
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=5>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=6>)
# Issued at: 2025-01-25 18:40:01.209512
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=6>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=7>)
# Issued at: 2025-01-25 18:40:01.369567
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=7>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:40:01.513295
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:40:01.655365
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:40:01.748302
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 18:40:02.095134
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 18:40:02.401849
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 18:40:02.719617
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=9>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
# Issued at: 2025-01-25 18:40:02.801156
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=9>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:40:02.943363
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:40:03.027368
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:40:03.098726
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
# Issued at: 2025-01-25 18:40:03.399432
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
# Issued at: 2025-01-25 18:40:03.702754
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
# Issued at: 2025-01-25 18:40:04.013705
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 3, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=13>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
# Issued at: 2025-01-25 18:40:04.102095
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 3, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=13>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 3, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=13>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
# Issued at: 2025-01-25 18:40:04.181635
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 3, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=13>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 5, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=12>)
# Issued at: 2025-01-25 18:40:04.648129
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=12>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000003', 'quantity': 5, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:40:04.747121
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:40:04.818507
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:40:04.905240
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
# Issued at: 2025-01-25 18:40:05.205982
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
# Issued at: 2025-01-25 18:40:05.513233
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
# Issued at: 2025-01-25 18:40:05.851451
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 3, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=17>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
# Issued at: 2025-01-25 18:40:06.042586
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 3, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=17>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=13>)
# Issued at: 2025-01-25 18:40:06.345492
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=13>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=14>)
# Issued at: 2025-01-25 18:40:06.514233
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=14>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=15>)
# Issued at: 2025-01-25 18:40:06.676386
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=15>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=17>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
# Issued at: 2025-01-25 18:40:06.744384
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=17>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=16>)
# Issued at: 2025-01-25 18:40:06.895541
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=16>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=17>)
# Issued at: 2025-01-25 18:40:07.051579
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=17>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:40:07.140004
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:40:07.225695
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:40:07.303831
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=16>)
# Issued at: 2025-01-25 18:40:07.607954
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=16>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=17>)
# Issued at: 2025-01-25 18:40:07.911895
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=17>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=18>)
# Issued at: 2025-01-25 18:40:08.208346
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=18>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
# Issued at: 2025-01-25 18:40:08.272558
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=18>)
# Issued at: 2025-01-25 18:40:08.430279
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=18>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=19>)
# Issued at: 2025-01-25 18:40:08.591717
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=19>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=20>)
# Issued at: 2025-01-25 18:40:08.737146
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=20>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=21>)
# Issued at: 2025-01-25 18:40:08.879744
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=21>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=22>)
# Issued at: 2025-01-25 18:40:09.035535
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=22>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:40:49.419524
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:40:49.478869
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:40:49.540463
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 18:40:49.844881
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 18:40:50.139277
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 18:40:50.457417
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 8, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 18:40:50.532106
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 8, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
# Issued at: 2025-01-25 18:40:50.695900
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
# Issued at: 2025-01-25 18:40:50.845654
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=3>)
# Issued at: 2025-01-25 18:40:51.006784
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=3>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=4>)
# Issued at: 2025-01-25 18:40:51.158007
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=4>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:40:51.260266
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:40:51.334320
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:40:51.410272
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 18:40:51.719480
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 18:40:52.072035
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 18:40:52.433759
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 10, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=5>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 18:40:52.509706
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 10, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=5>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=5>)
# Issued at: 2025-01-25 18:40:52.655894
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=5>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=6>)
# Issued at: 2025-01-25 18:40:52.825662
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=6>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=7>)
# Issued at: 2025-01-25 18:40:52.986034
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=7>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=5>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
# Issued at: 2025-01-25 18:40:53.072685
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=5>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:40:53.172188
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:40:53.256371
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:40:53.336899
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 18:40:53.633775
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 18:40:53.959458
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 18:40:54.263238
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=9>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
# Issued at: 2025-01-25 18:40:54.342062
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=9>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:40:54.479492
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:40:54.563839
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:40:54.635167
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
# Issued at: 2025-01-25 18:40:54.951973
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
# Issued at: 2025-01-25 18:40:55.285135
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
# Issued at: 2025-01-25 18:40:55.583757
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 3, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=13>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
# Issued at: 2025-01-25 18:40:55.665548
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 3, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=13>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 3, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=13>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
# Issued at: 2025-01-25 18:40:55.731756
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 3, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=13>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 5, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=12>)
# Issued at: 2025-01-25 18:40:56.218253
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=12>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000003', 'quantity': 5, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:40:56.303369
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:40:56.387611
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:40:56.456744
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
# Issued at: 2025-01-25 18:40:56.788246
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
# Issued at: 2025-01-25 18:40:57.197592
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
# Issued at: 2025-01-25 18:40:57.543993
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 3, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=17>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
# Issued at: 2025-01-25 18:40:57.607102
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 3, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=17>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=13>)
# Issued at: 2025-01-25 18:40:57.782723
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=13>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=14>)
# Issued at: 2025-01-25 18:40:57.938953
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=14>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=15>)
# Issued at: 2025-01-25 18:40:58.082270
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=15>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=17>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
# Issued at: 2025-01-25 18:40:58.164417
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=17>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=16>)
# Issued at: 2025-01-25 18:40:58.345297
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=16>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=17>)
# Issued at: 2025-01-25 18:40:58.493245
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=17>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:40:58.592764
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:40:58.672387
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:40:58.757005
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=16>)
# Issued at: 2025-01-25 18:40:59.073645
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=16>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=17>)
# Issued at: 2025-01-25 18:40:59.382697
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=17>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=18>)
# Issued at: 2025-01-25 18:40:59.697008
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=18>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
# Issued at: 2025-01-25 18:40:59.765380
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=18>)
# Issued at: 2025-01-25 18:40:59.902776
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=18>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=19>)
# Issued at: 2025-01-25 18:41:00.057578
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=19>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=20>)
# Issued at: 2025-01-25 18:41:00.211713
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=20>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=21>)
# Issued at: 2025-01-25 18:41:00.371501
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=21>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=22>)
# Issued at: 2025-01-25 18:41:00.522370
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=22>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:43:56.558310
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:43:56.618179
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:43:56.681728
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 18:43:57.012652
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 18:43:57.351001
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 18:43:57.745274
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 8, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 18:43:57.829084
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 8, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
# Issued at: 2025-01-25 18:43:58.023797
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
# Issued at: 2025-01-25 18:43:58.167527
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=3>)
# Issued at: 2025-01-25 18:43:58.345269
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=3>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=4>)
# Issued at: 2025-01-25 18:43:58.657162
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=4>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:43:58.841102
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:43:58.911823
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:43:58.987468
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 18:43:59.324197
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 18:43:59.629021
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 18:43:59.940174
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 10, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=5>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 18:44:00.009202
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 10, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=5>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=5>)
# Issued at: 2025-01-25 18:44:00.175893
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=5>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=6>)
# Issued at: 2025-01-25 18:44:00.324175
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=6>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=7>)
# Issued at: 2025-01-25 18:44:00.564326
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=7>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=5>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
# Issued at: 2025-01-25 18:44:00.739426
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=5>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:44:00.913160
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:44:00.983480
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:44:01.063668
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 18:44:01.409501
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 18:44:01.736372
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 18:44:02.060004
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=9>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
# Issued at: 2025-01-25 18:44:02.138988
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=9>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:44:02.288977
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:44:02.363372
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:44:02.433845
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
# Issued at: 2025-01-25 18:44:02.768626
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
# Issued at: 2025-01-25 18:44:03.086727
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
# Issued at: 2025-01-25 18:44:03.391413
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 3, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=13>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
# Issued at: 2025-01-25 18:44:03.471192
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 3, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=13>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 3, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=13>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
# Issued at: 2025-01-25 18:44:03.535733
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 3, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=13>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:44:03.822432
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:44:03.906640
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:44:03.975199
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
# Issued at: 2025-01-25 18:44:04.281853
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
# Issued at: 2025-01-25 18:44:04.653154
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
# Issued at: 2025-01-25 18:44:05.008999
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 3, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=17>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
# Issued at: 2025-01-25 18:44:05.087573
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 3, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=17>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=9>)
# Issued at: 2025-01-25 18:44:05.250870
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=9>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=10>)
# Issued at: 2025-01-25 18:44:05.410855
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=10>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=11>)
# Issued at: 2025-01-25 18:44:05.566466
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=11>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=17>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
# Issued at: 2025-01-25 18:44:05.650390
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=17>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=12>)
# Issued at: 2025-01-25 18:44:05.808686
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=12>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=13>)
# Issued at: 2025-01-25 18:44:05.958647
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=13>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:44:06.055947
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:44:06.125291
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:44:06.201116
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=16>)
# Issued at: 2025-01-25 18:44:06.511529
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=16>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=17>)
# Issued at: 2025-01-25 18:44:06.832416
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=17>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=18>)
# Issued at: 2025-01-25 18:44:07.155613
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=18>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
# Issued at: 2025-01-25 18:44:07.230172
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=14>)
# Issued at: 2025-01-25 18:44:07.378890
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=14>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=15>)
# Issued at: 2025-01-25 18:44:07.532038
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=15>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=16>)
# Issued at: 2025-01-25 18:44:07.687934
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=16>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=17>)
# Issued at: 2025-01-25 18:44:07.841794
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=17>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=18>)
# Issued at: 2025-01-25 18:44:07.995206
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=18>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:45:07.465673
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:45:07.524895
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:45:07.586997
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 18:45:07.935652
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 18:45:08.264082
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 18:45:08.645472
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 8, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 18:45:08.764604
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 8, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
# Issued at: 2025-01-25 18:45:09.020086
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
# Issued at: 2025-01-25 18:45:09.162659
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=3>)
# Issued at: 2025-01-25 18:45:09.319940
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=3>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=4>)
# Issued at: 2025-01-25 18:45:09.468847
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=4>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:45:09.564244
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:45:09.644736
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:45:09.714145
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 18:45:10.011384
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 18:45:10.340536
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 18:45:10.652454
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 10, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=5>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 18:45:10.733134
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 10, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=5>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=5>)
# Issued at: 2025-01-25 18:45:10.913656
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=5>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=6>)
# Issued at: 2025-01-25 18:45:11.059848
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=6>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=7>)
# Issued at: 2025-01-25 18:45:11.214254
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=7>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=5>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
# Issued at: 2025-01-25 18:45:11.298275
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=5>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:45:11.393352
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:45:11.476401
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:45:11.552826
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 18:45:11.875328
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 18:45:12.201812
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 18:45:12.542106
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=9>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
# Issued at: 2025-01-25 18:45:12.628033
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=9>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:45:12.783418
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:45:12.858913
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:45:12.926768
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
# Issued at: 2025-01-25 18:45:13.249161
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
# Issued at: 2025-01-25 18:45:13.617122
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
# Issued at: 2025-01-25 18:45:13.969957
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 3, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=13>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
# Issued at: 2025-01-25 18:45:14.041651
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 3, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=13>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 3, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=13>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
# Issued at: 2025-01-25 18:45:14.115505
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 3, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=13>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:45:14.407574
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:45:14.491939
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:45:14.573997
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
# Issued at: 2025-01-25 18:45:14.975309
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
# Issued at: 2025-01-25 18:45:15.295168
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
# Issued at: 2025-01-25 18:45:15.621320
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 3, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=17>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
# Issued at: 2025-01-25 18:45:15.684640
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 3, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=17>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=9>)
# Issued at: 2025-01-25 18:45:15.867944
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=9>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=10>)
# Issued at: 2025-01-25 18:45:16.016554
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=10>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=11>)
# Issued at: 2025-01-25 18:45:16.185379
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=11>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=17>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
# Issued at: 2025-01-25 18:45:16.275119
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=17>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=12>)
# Issued at: 2025-01-25 18:45:16.430408
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=12>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=13>)
# Issued at: 2025-01-25 18:45:16.614955
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=13>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:45:16.713532
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:45:16.785371
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:45:16.857352
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=16>)
# Issued at: 2025-01-25 18:45:17.153625
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=16>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=17>)
# Issued at: 2025-01-25 18:45:17.453018
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=17>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=18>)
# Issued at: 2025-01-25 18:45:17.776373
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=18>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
# Issued at: 2025-01-25 18:45:17.887285
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=14>)
# Issued at: 2025-01-25 18:45:18.189549
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=14>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=15>)
# Issued at: 2025-01-25 18:45:18.398723
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=15>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=16>)
# Issued at: 2025-01-25 18:45:18.551675
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=16>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=17>)
# Issued at: 2025-01-25 18:45:18.720798
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=17>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=18>)
# Issued at: 2025-01-25 18:45:18.873432
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=18>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:47:14.350619
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:47:14.410785
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:47:14.473257
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 18:47:14.810511
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 18:47:15.130367
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 18:47:15.479073
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 8, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 18:47:15.568467
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 8, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
# Issued at: 2025-01-25 18:47:15.733566
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
# Issued at: 2025-01-25 18:47:15.929965
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=3>)
# Issued at: 2025-01-25 18:47:16.107303
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=3>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=4>)
# Issued at: 2025-01-25 18:47:16.288103
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=4>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:47:16.442356
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:47:16.557353
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:47:16.634886
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 18:47:16.970965
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 18:47:17.292792
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 18:47:17.609639
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 10, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=5>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 18:47:17.694652
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 10, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=5>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=5>)
# Issued at: 2025-01-25 18:47:17.842697
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=5>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=6>)
# Issued at: 2025-01-25 18:47:18.006469
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=6>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=7>)
# Issued at: 2025-01-25 18:47:18.175246
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=7>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=5>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
# Issued at: 2025-01-25 18:47:18.243796
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=5>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:47:18.355449
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:47:18.435385
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:47:18.512049
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 18:47:18.859963
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 18:47:19.164297
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 18:47:19.485701
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=9>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
# Issued at: 2025-01-25 18:47:19.548685
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=9>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:47:19.704173
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:47:19.773924
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:47:19.861430
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
# Issued at: 2025-01-25 18:47:20.169674
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
# Issued at: 2025-01-25 18:47:20.937472
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
# Issued at: 2025-01-25 18:47:21.263772
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 3, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=13>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
# Issued at: 2025-01-25 18:47:21.351061
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 3, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=13>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 3, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=13>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
# Issued at: 2025-01-25 18:47:21.421143
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 3, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=13>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:47:21.750717
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:47:21.817678
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:47:21.885718
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
# Issued at: 2025-01-25 18:47:22.207508
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
# Issued at: 2025-01-25 18:47:22.524698
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
# Issued at: 2025-01-25 18:47:22.826568
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 3, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=17>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
# Issued at: 2025-01-25 18:47:22.907677
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 3, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=17>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=9>)
# Issued at: 2025-01-25 18:47:23.064844
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=9>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=10>)
# Issued at: 2025-01-25 18:47:23.217732
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=10>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=11>)
# Issued at: 2025-01-25 18:47:23.369768
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=11>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=17>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
# Issued at: 2025-01-25 18:47:23.440879
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=17>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=12>)
# Issued at: 2025-01-25 18:47:23.600559
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=12>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=13>)
# Issued at: 2025-01-25 18:47:23.761875
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=13>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:47:23.855662
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:47:23.939963
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:47:24.009819
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=16>)
# Issued at: 2025-01-25 18:47:24.303937
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=16>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=17>)
# Issued at: 2025-01-25 18:47:24.609684
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=17>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=18>)
# Issued at: 2025-01-25 18:47:24.949325
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=18>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
# Issued at: 2025-01-25 18:47:25.029712
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=14>)
# Issued at: 2025-01-25 18:47:25.301129
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=14>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=15>)
# Issued at: 2025-01-25 18:47:25.595909
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=15>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=16>)
# Issued at: 2025-01-25 18:47:25.740052
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=16>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=17>)
# Issued at: 2025-01-25 18:47:25.891880
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=17>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=18>)
# Issued at: 2025-01-25 18:47:26.059224
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=18>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_add_deposit, Args: (<Customer pk=1234567890>, Decimal('50.123456789'), <Logger TestCustomerAddDeposit (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=2>)
# Issued at: 2025-01-25 18:49:44.940338
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=2>)
StoreHelper.customer_add_deposit(*(<Customer pk=1234567890>, Decimal('50.123456789'), <Logger TestCustomerAddDeposit (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer pk=1234567890>, Decimal('9999999.99'), <Logger TestCustomerAddDeposit (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=5>)
# Issued at: 2025-01-25 18:49:45.001529
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=5>)
StoreHelper.customer_add_deposit(*(<Customer pk=1234567890>, Decimal('9999999.99'), <Logger TestCustomerAddDeposit (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer pk=1234567890>, Decimal('50.00'), <Logger TestCustomerAddDeposit (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=7>)
# Issued at: 2025-01-25 18:49:45.041085
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=7>)
StoreHelper.customer_add_deposit(*(<Customer pk=1234567890>, Decimal('50.00'), <Logger TestCustomerAddDeposit (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer pk=1234567890>, Decimal('25.00'), <Logger TestCustomerAddDeposit (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=8>)
# Issued at: 2025-01-25 18:49:45.067370
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=8>)
StoreHelper.customer_add_deposit(*(<Customer pk=1234567890>, Decimal('25.00'), <Logger TestCustomerAddDeposit (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer pk=1234567890>, Decimal('50.00'), <Logger TestCustomerAddDeposit (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=11>)
# Issued at: 2025-01-25 18:49:45.132303
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=11>)
StoreHelper.customer_add_deposit(*(<Customer pk=1234567890>, Decimal('50.00'), <Logger TestCustomerAddDeposit (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer pk=1234567890>, Decimal('100.00'), <Logger TestCustomerAddDeposit (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=16>)
# Issued at: 2025-01-25 18:49:45.250643
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=16>)
StoreHelper.customer_add_deposit(*(<Customer pk=1234567890>, Decimal('100.00'), <Logger TestCustomerAddDeposit (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer pk=1234567890>, Decimal('50.00'), <Logger TestCustomerAddDeposit (INFO)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=19>)
# Issued at: 2025-01-25 18:49:45.301565
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=19>)
StoreHelper.customer_add_deposit(*(<Customer pk=1234567890>, Decimal('50.00'), <Logger TestCustomerAddDeposit (INFO)>), **{})

# Command: customer_add_deposit, Args: (<Customer pk=1234567890>, Decimal('50.005'), <Logger TestCustomerAddDeposit (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=21>)
# Issued at: 2025-01-25 18:49:45.340097
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=21>)
StoreHelper.customer_add_deposit(*(<Customer pk=1234567890>, Decimal('50.005'), <Logger TestCustomerAddDeposit (DEBUG)>), **{})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:49:45.470417
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:49:45.532217
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:49:45.592657
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 18:49:45.943070
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 18:49:46.304518
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 18:49:46.623751
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 8, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=13>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 18:49:46.712814
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 8, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=13>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
# Issued at: 2025-01-25 18:49:46.874246
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
# Issued at: 2025-01-25 18:49:47.025983
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=3>)
# Issued at: 2025-01-25 18:49:47.184459
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=3>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=4>)
# Issued at: 2025-01-25 18:49:47.342865
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=4>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:49:47.447199
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:49:47.529829
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:49:47.626865
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 18:49:48.333963
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 18:49:48.656280
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 18:49:48.975132
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 10, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=17>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 18:49:49.063975
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 10, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=17>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=5>)
# Issued at: 2025-01-25 18:49:49.238221
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=5>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=6>)
# Issued at: 2025-01-25 18:49:49.380760
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=6>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=7>)
# Issued at: 2025-01-25 18:49:49.535602
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=7>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=17>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
# Issued at: 2025-01-25 18:49:49.677331
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=17>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:49:49.905191
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:49:50.065450
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:49:50.143180
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 18:49:50.471814
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 18:49:50.793731
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 18:49:51.114555
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
# Issued at: 2025-01-25 18:49:51.190221
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:49:51.337671
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:49:51.418119
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:49:51.486512
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
# Issued at: 2025-01-25 18:49:51.791218
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
# Issued at: 2025-01-25 18:49:52.111238
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
# Issued at: 2025-01-25 18:49:52.430271
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 3, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=25>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
# Issued at: 2025-01-25 18:49:52.496074
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 3, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=25>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 3, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=25>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
# Issued at: 2025-01-25 18:49:52.583018
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 3, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=25>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:49:52.917365
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:49:52.991489
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:49:53.065271
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
# Issued at: 2025-01-25 18:49:53.384767
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
# Issued at: 2025-01-25 18:49:53.704805
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
# Issued at: 2025-01-25 18:49:54.235191
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 3, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=29>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
# Issued at: 2025-01-25 18:49:54.362154
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 3, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=29>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=9>)
# Issued at: 2025-01-25 18:49:54.509408
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=9>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=10>)
# Issued at: 2025-01-25 18:49:54.675007
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=10>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=11>)
# Issued at: 2025-01-25 18:49:54.853311
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=11>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=29>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
# Issued at: 2025-01-25 18:49:54.927457
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=29>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=12>)
# Issued at: 2025-01-25 18:49:55.099426
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=12>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=13>)
# Issued at: 2025-01-25 18:49:55.268084
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=13>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:49:55.358244
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:49:55.429868
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:49:55.504739
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=16>)
# Issued at: 2025-01-25 18:49:55.836643
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=16>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=17>)
# Issued at: 2025-01-25 18:49:56.160669
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=17>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=18>)
# Issued at: 2025-01-25 18:49:56.474196
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=18>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=33>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
# Issued at: 2025-01-25 18:49:56.536293
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=33>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=14>)
# Issued at: 2025-01-25 18:49:56.696787
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=14>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=15>)
# Issued at: 2025-01-25 18:49:56.851621
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=15>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=16>)
# Issued at: 2025-01-25 18:49:57.032729
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=16>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=17>)
# Issued at: 2025-01-25 18:49:57.189435
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=17>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=18>)
# Issued at: 2025-01-25 18:49:57.327076
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=18>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:51:01.184520
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:51:01.243765
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:51:01.305269
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 18:51:01.700028
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 18:51:02.023803
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 18:51:02.339793
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 8, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 18:51:02.422466
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 8, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=1>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
# Issued at: 2025-01-25 18:51:02.580884
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
# Issued at: 2025-01-25 18:51:02.735645
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=3>)
# Issued at: 2025-01-25 18:51:02.895972
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=3>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=4>)
# Issued at: 2025-01-25 18:51:03.063262
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=4>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:51:03.156585
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:51:03.245783
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:51:03.319631
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 18:51:03.627516
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 18:51:03.937234
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 18:51:04.260080
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 10, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=5>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 18:51:04.327193
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 10, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=5>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=5>)
# Issued at: 2025-01-25 18:51:04.503234
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=5>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=6>)
# Issued at: 2025-01-25 18:51:04.773992
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=6>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=7>)
# Issued at: 2025-01-25 18:51:04.969700
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=7>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=5>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
# Issued at: 2025-01-25 18:51:05.116873
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=5>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:51:05.231629
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:51:05.316231
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:51:05.385543
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 18:51:05.697804
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 18:51:06.000431
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 18:51:06.317482
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=9>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
# Issued at: 2025-01-25 18:51:06.384335
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=9>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:51:06.551641
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:51:06.638822
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:51:06.711144
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
# Issued at: 2025-01-25 18:51:07.009912
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
# Issued at: 2025-01-25 18:51:07.349142
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
# Issued at: 2025-01-25 18:51:07.669243
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 3, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=13>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
# Issued at: 2025-01-25 18:51:07.747367
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 3, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=13>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 3, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=13>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
# Issued at: 2025-01-25 18:51:07.833397
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 3, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=13>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 5, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=8>)
# Issued at: 2025-01-25 18:51:07.997266
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=8>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000003', 'quantity': 5, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:51:08.099102
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:51:08.170701
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:51:08.252337
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
# Issued at: 2025-01-25 18:51:08.564061
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
# Issued at: 2025-01-25 18:51:08.874564
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
# Issued at: 2025-01-25 18:51:09.230528
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 3, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=17>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
# Issued at: 2025-01-25 18:51:09.375266
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 3, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=17>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=9>)
# Issued at: 2025-01-25 18:51:09.536695
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=9>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=10>)
# Issued at: 2025-01-25 18:51:09.693436
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=10>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=11>)
# Issued at: 2025-01-25 18:51:09.853910
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=11>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=17>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
# Issued at: 2025-01-25 18:51:09.931250
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=17>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=12>)
# Issued at: 2025-01-25 18:51:10.084559
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=12>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=13>)
# Issued at: 2025-01-25 18:51:10.234347
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=13>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:51:10.331481
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:51:10.412584
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:51:10.482928
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=16>)
# Issued at: 2025-01-25 18:51:10.791851
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=16>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=17>)
# Issued at: 2025-01-25 18:51:11.107955
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=17>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=18>)
# Issued at: 2025-01-25 18:51:11.422477
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=18>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
# Issued at: 2025-01-25 18:51:11.490137
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=21>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=14>)
# Issued at: 2025-01-25 18:51:11.644418
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=14>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=15>)
# Issued at: 2025-01-25 18:51:11.806586
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=15>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=16>)
# Issued at: 2025-01-25 18:51:11.956847
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=16>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=17>)
# Issued at: 2025-01-25 18:51:12.108352
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=17>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=18>)
# Issued at: 2025-01-25 18:51:12.264412
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=18>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger test_logger (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 18:52:12.917906
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger test_logger (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('1.5'), 'logger': <Logger test_logger (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 18:52:13.206078
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('1.5'), 'logger': <Logger test_logger (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger test_logger (ERROR)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 18:52:13.484897
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger test_logger (ERROR)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Updated Product', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.05'), 'logger': <Logger test_logger (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 18:52:13.526536
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Updated Product', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.05'), 'logger': <Logger test_logger (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
# Issued at: 2025-01-25 18:52:13.814578
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
# Issued at: 2025-01-25 18:52:14.047354
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
# Issued at: 2025-01-25 18:52:14.317422
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
# Issued at: 2025-01-25 18:52:14.637520
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 18:52:14.778589
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
# Issued at: 2025-01-25 18:52:15.012747
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
# Issued at: 2025-01-25 18:52:15.265691
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=16>)
# Issued at: 2025-01-25 18:52:15.562996
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=16>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 18:52:15.701474
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=17>)
# Issued at: 2025-01-25 18:52:15.942142
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=17>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=7>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': True}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
# Issued at: 2025-01-25 18:52:16.080850
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=7>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': True})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testdeposit', 'first_name': 'Test', 'last_name': 'Deposit', 'email': 'deposit@example.com', 'balance': Decimal('0.00'), 'card_number': '1122334455', 'logger': <Logger TestCreateNewCustomer (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1122334455>)
# Issued at: 2025-01-25 18:52:16.198996
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1122334455>)
StoreHelper.create_new_customer(*(), **{'username': 'testdeposit', 'first_name': 'Test', 'last_name': 'Deposit', 'email': 'deposit@example.com', 'balance': Decimal('0.00'), 'card_number': '1122334455', 'logger': <Logger TestCreateNewCustomer (DEBUG)>})

# Command: customer_add_deposit, Args: (<Customer pk=1122334455>, Decimal('200.00'), <Logger TestCreateNewCustomer (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=1>)
# Issued at: 2025-01-25 18:52:16.234317
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=1>)
StoreHelper.customer_add_deposit(*(<Customer pk=1122334455>, Decimal('200.00'), <Logger TestCreateNewCustomer (DEBUG)>), **{})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'nodeposit', 'first_name': 'No', 'last_name': 'Deposit', 'email': 'nodeposit@example.com', 'balance': Decimal('0.00'), 'card_number': '0987654321', 'logger': <Logger TestCreateNewCustomer (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=0987654321>)
# Issued at: 2025-01-25 18:52:16.278101
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=0987654321>)
StoreHelper.create_new_customer(*(), **{'username': 'nodeposit', 'first_name': 'No', 'last_name': 'Deposit', 'email': 'nodeposit@example.com', 'balance': Decimal('0.00'), 'card_number': '0987654321', 'logger': <Logger TestCreateNewCustomer (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'duplicate', 'first_name': 'Duplicate', 'last_name': 'Test', 'email': 'duplicate@example.com', 'balance': Decimal('50.00'), 'card_number': '1234567890', 'logger': <Logger TestCreateNewCustomer (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890>)
# Issued at: 2025-01-25 18:52:16.351761
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890>)
StoreHelper.create_new_customer(*(), **{'username': 'duplicate', 'first_name': 'Duplicate', 'last_name': 'Test', 'email': 'duplicate@example.com', 'balance': Decimal('50.00'), 'card_number': '1234567890', 'logger': <Logger TestCreateNewCustomer (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser', 'first_name': 'Test', 'last_name': 'User', 'email': 'test@example.com', 'balance': Decimal('100.00'), 'card_number': '1234567890', 'logger': <Logger TestCreateNewCustomer (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890>)
# Issued at: 2025-01-25 18:52:16.495893
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser', 'first_name': 'Test', 'last_name': 'User', 'email': 'test@example.com', 'balance': Decimal('100.00'), 'card_number': '1234567890', 'logger': <Logger TestCreateNewCustomer (DEBUG)>})

# Command: customer_add_deposit, Args: (<Customer pk=1234567890>, Decimal('50.123456789'), <Logger TestCustomerAddDeposit (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=5>)
# Issued at: 2025-01-25 18:52:16.593391
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=5>)
StoreHelper.customer_add_deposit(*(<Customer pk=1234567890>, Decimal('50.123456789'), <Logger TestCustomerAddDeposit (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer pk=1234567890>, Decimal('9999999.99'), <Logger TestCustomerAddDeposit (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=8>)
# Issued at: 2025-01-25 18:52:16.674585
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=8>)
StoreHelper.customer_add_deposit(*(<Customer pk=1234567890>, Decimal('9999999.99'), <Logger TestCustomerAddDeposit (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer pk=1234567890>, Decimal('50.00'), <Logger TestCustomerAddDeposit (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=10>)
# Issued at: 2025-01-25 18:52:16.750586
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=10>)
StoreHelper.customer_add_deposit(*(<Customer pk=1234567890>, Decimal('50.00'), <Logger TestCustomerAddDeposit (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer pk=1234567890>, Decimal('25.00'), <Logger TestCustomerAddDeposit (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=11>)
# Issued at: 2025-01-25 18:52:16.792747
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=11>)
StoreHelper.customer_add_deposit(*(<Customer pk=1234567890>, Decimal('25.00'), <Logger TestCustomerAddDeposit (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer pk=1234567890>, Decimal('50.00'), <Logger TestCustomerAddDeposit (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=14>)
# Issued at: 2025-01-25 18:52:16.902178
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=14>)
StoreHelper.customer_add_deposit(*(<Customer pk=1234567890>, Decimal('50.00'), <Logger TestCustomerAddDeposit (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer pk=1234567890>, Decimal('100.00'), <Logger TestCustomerAddDeposit (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=19>)
# Issued at: 2025-01-25 18:52:17.075591
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=19>)
StoreHelper.customer_add_deposit(*(<Customer pk=1234567890>, Decimal('100.00'), <Logger TestCustomerAddDeposit (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer pk=1234567890>, Decimal('50.00'), <Logger TestCustomerAddDeposit (INFO)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=22>)
# Issued at: 2025-01-25 18:52:17.163606
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=22>)
StoreHelper.customer_add_deposit(*(<Customer pk=1234567890>, Decimal('50.00'), <Logger TestCustomerAddDeposit (INFO)>), **{})

# Command: customer_add_deposit, Args: (<Customer pk=1234567890>, Decimal('50.005'), <Logger TestCustomerAddDeposit (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=24>)
# Issued at: 2025-01-25 18:52:17.273665
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=24>)
StoreHelper.customer_add_deposit(*(<Customer pk=1234567890>, Decimal('50.005'), <Logger TestCustomerAddDeposit (DEBUG)>), **{})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:52:17.428412
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:52:17.510648
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:52:17.584466
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=18>)
# Issued at: 2025-01-25 18:52:17.891060
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=18>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=19>)
# Issued at: 2025-01-25 18:52:18.213469
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=19>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=20>)
# Issued at: 2025-01-25 18:52:18.547350
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=20>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 8, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=24>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
# Issued at: 2025-01-25 18:52:18.630465
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 8, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=24>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
# Issued at: 2025-01-25 18:52:18.788671
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
# Issued at: 2025-01-25 18:52:18.932815
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=3>)
# Issued at: 2025-01-25 18:52:19.085847
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=3>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=4>)
# Issued at: 2025-01-25 18:52:19.248536
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=4>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:52:19.357437
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:52:19.430467
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:52:19.514887
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=21>)
# Issued at: 2025-01-25 18:52:19.830343
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=21>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=22>)
# Issued at: 2025-01-25 18:52:20.138925
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=22>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=23>)
# Issued at: 2025-01-25 18:52:20.436673
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=23>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 10, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=28>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
# Issued at: 2025-01-25 18:52:20.513173
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 10, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=28>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=5>)
# Issued at: 2025-01-25 18:52:20.670081
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=5>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=6>)
# Issued at: 2025-01-25 18:52:20.832983
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=6>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=7>)
# Issued at: 2025-01-25 18:52:20.991226
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=7>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=28>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
# Issued at: 2025-01-25 18:52:21.067024
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=28>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:52:21.165166
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:52:21.237319
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:52:21.321906
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=24>)
# Issued at: 2025-01-25 18:52:21.716024
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=24>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=25>)
# Issued at: 2025-01-25 18:52:22.044390
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=25>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=26>)
# Issued at: 2025-01-25 18:52:22.366095
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=26>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=32>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
# Issued at: 2025-01-25 18:52:22.448123
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=32>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:52:22.620231
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:52:22.696640
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:52:22.779355
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=27>)
# Issued at: 2025-01-25 18:52:23.084571
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=27>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=28>)
# Issued at: 2025-01-25 18:52:23.557296
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=28>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=29>)
# Issued at: 2025-01-25 18:52:23.864699
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=29>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 3, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=36>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
# Issued at: 2025-01-25 18:52:23.943413
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 3, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=36>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 3, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=36>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
# Issued at: 2025-01-25 18:52:24.008456
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 3, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=36>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 5, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=8>)
# Issued at: 2025-01-25 18:52:24.179703
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=8>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000003', 'quantity': 5, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:52:24.289320
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:52:24.368844
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:52:24.441964
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=30>)
# Issued at: 2025-01-25 18:52:24.789712
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=30>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=31>)
# Issued at: 2025-01-25 18:52:25.116175
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=31>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=32>)
# Issued at: 2025-01-25 18:52:25.442005
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=32>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 3, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=40>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
# Issued at: 2025-01-25 18:52:25.529396
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 3, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=40>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=9>)
# Issued at: 2025-01-25 18:52:25.766491
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=9>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=10>)
# Issued at: 2025-01-25 18:52:26.005157
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=10>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=11>)
# Issued at: 2025-01-25 18:52:26.330390
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=11>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=40>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
# Issued at: 2025-01-25 18:52:26.402240
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=40>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=12>)
# Issued at: 2025-01-25 18:52:26.567951
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=12>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=13>)
# Issued at: 2025-01-25 18:52:26.712643
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=13>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:52:26.808808
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:52:26.880891
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:52:26.968916
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=33>)
# Issued at: 2025-01-25 18:52:27.288517
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=33>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=34>)
# Issued at: 2025-01-25 18:52:27.607917
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=34>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=35>)
# Issued at: 2025-01-25 18:52:27.929057
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=35>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=44>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=12>)
# Issued at: 2025-01-25 18:52:27.998188
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=12>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=44>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=14>)
# Issued at: 2025-01-25 18:52:28.163593
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=14>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=15>)
# Issued at: 2025-01-25 18:52:28.319912
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=15>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=16>)
# Issued at: 2025-01-25 18:52:28.494289
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=16>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=17>)
# Issued at: 2025-01-25 18:52:28.659194
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=17>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=18>)
# Issued at: 2025-01-25 18:52:28.808125
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=18>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:52:28.979504
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:52:29.069716
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:52:29.142648
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:52:29.230112
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:52:29.302995
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=36>)
# Issued at: 2025-01-25 18:52:29.639462
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=36>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=37>)
# Issued at: 2025-01-25 18:52:29.960853
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=37>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=38>)
# Issued at: 2025-01-25 18:52:30.276176
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=38>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=39>)
# Issued at: 2025-01-25 18:52:30.627190
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=39>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=40>)
# Issued at: 2025-01-25 18:52:31.113422
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=40>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=48>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=13>)
# Issued at: 2025-01-25 18:52:31.360084
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=13>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=48>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=48>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=14>)
# Issued at: 2025-01-25 18:52:31.491627
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=14>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=48>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=48>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=15>)
# Issued at: 2025-01-25 18:52:31.603521
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=15>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=48>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=48>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=16>)
# Issued at: 2025-01-25 18:52:31.741044
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=16>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=48>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=48>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=17>)
# Issued at: 2025-01-25 18:52:31.865108
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=17>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=48>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=19>)
# Issued at: 2025-01-25 18:52:32.079974
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=19>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:52:32.192720
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:52:32.267779
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:52:32.353001
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:52:32.432765
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:52:32.506517
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=41>)
# Issued at: 2025-01-25 18:52:32.824076
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=41>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=42>)
# Issued at: 2025-01-25 18:52:33.140975
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=42>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=43>)
# Issued at: 2025-01-25 18:52:33.470391
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=43>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=44>)
# Issued at: 2025-01-25 18:52:33.777107
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=44>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=45>)
# Issued at: 2025-01-25 18:52:34.087995
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=45>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=54>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=18>)
# Issued at: 2025-01-25 18:52:34.172927
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=18>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=54>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=54>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=19>)
# Issued at: 2025-01-25 18:52:34.254181
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=19>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=54>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=54>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=20>)
# Issued at: 2025-01-25 18:52:34.319974
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=20>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=54>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=20>)
# Issued at: 2025-01-25 18:52:34.470927
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=20>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:52:34.581838
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:52:34.668543
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:52:34.735987
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:52:34.814987
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:52:34.889894
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=46>)
# Issued at: 2025-01-25 18:52:35.190130
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=46>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=47>)
# Issued at: 2025-01-25 18:52:35.512167
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=47>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=48>)
# Issued at: 2025-01-25 18:52:35.859924
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=48>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=49>)
# Issued at: 2025-01-25 18:52:36.265174
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=49>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=50>)
# Issued at: 2025-01-25 18:52:36.604167
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=50>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=60>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=21>)
# Issued at: 2025-01-25 18:52:36.692031
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=21>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=60>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=60>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=22>)
# Issued at: 2025-01-25 18:52:36.756177
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=22>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=60>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=60>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=23>)
# Issued at: 2025-01-25 18:52:36.839072
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=23>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=60>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=60>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=24>)
# Issued at: 2025-01-25 18:52:36.922048
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=24>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=60>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=60>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=25>)
# Issued at: 2025-01-25 18:52:36.991215
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=25>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=60>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=21>)
# Issued at: 2025-01-25 18:52:37.149179
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=21>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=22>)
# Issued at: 2025-01-25 18:52:37.315866
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=22>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=23>)
# Issued at: 2025-01-25 18:52:37.475226
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=23>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:52:37.570713
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:52:37.652132
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:52:37.731708
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:52:37.802299
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:52:37.901347
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=51>)
# Issued at: 2025-01-25 18:52:38.216380
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=51>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=52>)
# Issued at: 2025-01-25 18:52:38.573248
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=52>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=53>)
# Issued at: 2025-01-25 18:52:38.893289
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=53>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=54>)
# Issued at: 2025-01-25 18:52:39.233522
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=54>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=55>)
# Issued at: 2025-01-25 18:52:39.543334
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=55>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=66>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=26>)
# Issued at: 2025-01-25 18:52:39.648928
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=26>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=66>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=66>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=27>)
# Issued at: 2025-01-25 18:52:39.722876
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=27>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=66>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=66>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=28>)
# Issued at: 2025-01-25 18:52:39.801484
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=28>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=66>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=24>)
# Issued at: 2025-01-25 18:52:39.953176
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=24>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger test_logger (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 18:54:12.088679
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger test_logger (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('1.5'), 'logger': <Logger test_logger (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 18:54:12.426868
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('1.5'), 'logger': <Logger test_logger (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger test_logger (ERROR)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 18:54:12.696757
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger test_logger (ERROR)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Updated Product', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.05'), 'logger': <Logger test_logger (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 18:54:12.745368
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Updated Product', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.05'), 'logger': <Logger test_logger (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
# Issued at: 2025-01-25 18:54:13.050993
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
# Issued at: 2025-01-25 18:54:13.393741
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
# Issued at: 2025-01-25 18:54:13.669361
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
# Issued at: 2025-01-25 18:54:13.959149
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
StoreHelper.get_or_create_product(*(), **{'ean': '1234567890123', 'name': 'New Product', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 18:54:14.104801
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '1234567890123', 'quantity': 20, 'purchase_price': Decimal('7.50'), 'auth_user': <User pk=3>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
# Issued at: 2025-01-25 18:54:14.352926
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
# Issued at: 2025-01-25 18:54:14.607829
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=16>)
# Issued at: 2025-01-25 18:54:14.899564
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=16>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 18:54:15.044886
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=6>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': False})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=17>)
# Issued at: 2025-01-25 18:54:15.284564
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=17>)
StoreHelper.get_or_create_product(*(), **{'ean': '4014400927139', 'name': 'Test Product', 'resell_price': Decimal('10.99'), 'discount': Decimal('0.10'), 'logger': <Logger TestRestockProduct (DEBUG)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=7>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': True}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
# Issued at: 2025-01-25 18:54:15.442682
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
StoreHelper.restock_product(*(), **{'ean': '4014400927139', 'quantity': 10, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=7>, 'logger': <Logger TestRestockProduct (DEBUG)>, 'used_store_equity': True})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testdeposit', 'first_name': 'Test', 'last_name': 'Deposit', 'email': 'deposit@example.com', 'balance': Decimal('0.00'), 'card_number': '1122334455', 'logger': <Logger TestCreateNewCustomer (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1122334455>)
# Issued at: 2025-01-25 18:54:15.578519
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1122334455>)
StoreHelper.create_new_customer(*(), **{'username': 'testdeposit', 'first_name': 'Test', 'last_name': 'Deposit', 'email': 'deposit@example.com', 'balance': Decimal('0.00'), 'card_number': '1122334455', 'logger': <Logger TestCreateNewCustomer (DEBUG)>})

# Command: customer_add_deposit, Args: (<Customer pk=1122334455>, Decimal('200.00'), <Logger TestCreateNewCustomer (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=1>)
# Issued at: 2025-01-25 18:54:15.614263
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=1>)
StoreHelper.customer_add_deposit(*(<Customer pk=1122334455>, Decimal('200.00'), <Logger TestCreateNewCustomer (DEBUG)>), **{})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'nodeposit', 'first_name': 'No', 'last_name': 'Deposit', 'email': 'nodeposit@example.com', 'balance': Decimal('0.00'), 'card_number': '0987654321', 'logger': <Logger TestCreateNewCustomer (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=0987654321>)
# Issued at: 2025-01-25 18:54:15.673875
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=0987654321>)
StoreHelper.create_new_customer(*(), **{'username': 'nodeposit', 'first_name': 'No', 'last_name': 'Deposit', 'email': 'nodeposit@example.com', 'balance': Decimal('0.00'), 'card_number': '0987654321', 'logger': <Logger TestCreateNewCustomer (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'duplicate', 'first_name': 'Duplicate', 'last_name': 'Test', 'email': 'duplicate@example.com', 'balance': Decimal('50.00'), 'card_number': '1234567890', 'logger': <Logger TestCreateNewCustomer (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890>)
# Issued at: 2025-01-25 18:54:15.753961
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890>)
StoreHelper.create_new_customer(*(), **{'username': 'duplicate', 'first_name': 'Duplicate', 'last_name': 'Test', 'email': 'duplicate@example.com', 'balance': Decimal('50.00'), 'card_number': '1234567890', 'logger': <Logger TestCreateNewCustomer (DEBUG)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser', 'first_name': 'Test', 'last_name': 'User', 'email': 'test@example.com', 'balance': Decimal('100.00'), 'card_number': '1234567890', 'logger': <Logger TestCreateNewCustomer (DEBUG)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890>)
# Issued at: 2025-01-25 18:54:15.901859
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser', 'first_name': 'Test', 'last_name': 'User', 'email': 'test@example.com', 'balance': Decimal('100.00'), 'card_number': '1234567890', 'logger': <Logger TestCreateNewCustomer (DEBUG)>})

# Command: customer_add_deposit, Args: (<Customer pk=1234567890>, Decimal('50.123456789'), <Logger TestCustomerAddDeposit (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=5>)
# Issued at: 2025-01-25 18:54:15.998589
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=5>)
StoreHelper.customer_add_deposit(*(<Customer pk=1234567890>, Decimal('50.123456789'), <Logger TestCustomerAddDeposit (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer pk=1234567890>, Decimal('9999999.99'), <Logger TestCustomerAddDeposit (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=8>)
# Issued at: 2025-01-25 18:54:16.087312
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=8>)
StoreHelper.customer_add_deposit(*(<Customer pk=1234567890>, Decimal('9999999.99'), <Logger TestCustomerAddDeposit (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer pk=1234567890>, Decimal('50.00'), <Logger TestCustomerAddDeposit (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=10>)
# Issued at: 2025-01-25 18:54:16.133092
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=10>)
StoreHelper.customer_add_deposit(*(<Customer pk=1234567890>, Decimal('50.00'), <Logger TestCustomerAddDeposit (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer pk=1234567890>, Decimal('25.00'), <Logger TestCustomerAddDeposit (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=11>)
# Issued at: 2025-01-25 18:54:16.163251
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=11>)
StoreHelper.customer_add_deposit(*(<Customer pk=1234567890>, Decimal('25.00'), <Logger TestCustomerAddDeposit (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer pk=1234567890>, Decimal('50.00'), <Logger TestCustomerAddDeposit (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=14>)
# Issued at: 2025-01-25 18:54:16.258019
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=14>)
StoreHelper.customer_add_deposit(*(<Customer pk=1234567890>, Decimal('50.00'), <Logger TestCustomerAddDeposit (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer pk=1234567890>, Decimal('100.00'), <Logger TestCustomerAddDeposit (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=19>)
# Issued at: 2025-01-25 18:54:16.406893
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=19>)
StoreHelper.customer_add_deposit(*(<Customer pk=1234567890>, Decimal('100.00'), <Logger TestCustomerAddDeposit (DEBUG)>), **{})

# Command: customer_add_deposit, Args: (<Customer pk=1234567890>, Decimal('50.00'), <Logger TestCustomerAddDeposit (INFO)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=22>)
# Issued at: 2025-01-25 18:54:16.471200
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=22>)
StoreHelper.customer_add_deposit(*(<Customer pk=1234567890>, Decimal('50.00'), <Logger TestCustomerAddDeposit (INFO)>), **{})

# Command: customer_add_deposit, Args: (<Customer pk=1234567890>, Decimal('50.005'), <Logger TestCustomerAddDeposit (DEBUG)>), Kwargs: {}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=24>)
# Issued at: 2025-01-25 18:54:16.526184
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerDeposit pk=24>)
StoreHelper.customer_add_deposit(*(<Customer pk=1234567890>, Decimal('50.005'), <Logger TestCustomerAddDeposit (DEBUG)>), **{})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:54:16.682736
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:54:16.761425
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:54:16.830129
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=18>)
# Issued at: 2025-01-25 18:54:17.183017
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=18>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=19>)
# Issued at: 2025-01-25 18:54:17.493975
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=19>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=20>)
# Issued at: 2025-01-25 18:54:17.885201
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=20>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 8, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=24>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
# Issued at: 2025-01-25 18:54:17.991423
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 8, 'purchase_price': Decimal('7.00'), 'auth_user': <User pk=24>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
# Issued at: 2025-01-25 18:54:18.295663
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
# Issued at: 2025-01-25 18:54:18.444235
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=3>)
# Issued at: 2025-01-25 18:54:18.613264
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=3>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=4>)
# Issued at: 2025-01-25 18:54:18.776970
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=4>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000003', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:54:18.885241
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:54:18.992904
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:54:19.066398
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=21>)
# Issued at: 2025-01-25 18:54:19.405343
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=21>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=22>)
# Issued at: 2025-01-25 18:54:19.731208
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=22>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=23>)
# Issued at: 2025-01-25 18:54:20.075566
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=23>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 10, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=28>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
# Issued at: 2025-01-25 18:54:20.154992
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 10, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=28>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=5>)
# Issued at: 2025-01-25 18:54:20.313111
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=5>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=6>)
# Issued at: 2025-01-25 18:54:20.458919
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=6>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=7>)
# Issued at: 2025-01-25 18:54:20.614485
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=7>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=28>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
# Issued at: 2025-01-25 18:54:20.686525
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=28>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:54:20.808177
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:54:20.888706
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:54:20.964340
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=24>)
# Issued at: 2025-01-25 18:54:21.272241
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=24>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=25>)
# Issued at: 2025-01-25 18:54:21.583048
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=25>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=26>)
# Issued at: 2025-01-25 18:54:21.935187
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=26>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=32>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
# Issued at: 2025-01-25 18:54:22.075039
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=32>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:54:22.369884
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:54:22.502829
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:54:22.580620
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=27>)
# Issued at: 2025-01-25 18:54:22.907630
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=27>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=28>)
# Issued at: 2025-01-25 18:54:23.239976
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=28>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=29>)
# Issued at: 2025-01-25 18:54:23.546527
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=29>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 3, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=36>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
# Issued at: 2025-01-25 18:54:23.629891
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 3, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=36>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 3, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=36>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
# Issued at: 2025-01-25 18:54:23.699748
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 3, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=36>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 5, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=8>)
# Issued at: 2025-01-25 18:54:23.883098
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=8>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000003', 'quantity': 5, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:54:23.995015
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:54:24.274660
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:54:24.352517
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=30>)
# Issued at: 2025-01-25 18:54:24.657279
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=30>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=31>)
# Issued at: 2025-01-25 18:54:24.992135
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=31>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=32>)
# Issued at: 2025-01-25 18:54:25.306191
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=32>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 3, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=40>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
# Issued at: 2025-01-25 18:54:25.376644
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 3, 'purchase_price': Decimal('4.00'), 'auth_user': <User pk=40>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=9>)
# Issued at: 2025-01-25 18:54:25.540403
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=9>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=10>)
# Issued at: 2025-01-25 18:54:25.705704
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=10>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=11>)
# Issued at: 2025-01-25 18:54:25.864324
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=11>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=40>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
# Issued at: 2025-01-25 18:54:25.936383
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.00'), 'auth_user': <User pk=40>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=12>)
# Issued at: 2025-01-25 18:54:26.105311
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=12>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=13>)
# Issued at: 2025-01-25 18:54:26.241347
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=13>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000002', 'quantity': 1, 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
# Issued at: 2025-01-25 18:54:26.331258
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012341>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test1@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
# Issued at: 2025-01-25 18:54:26.420191
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012342>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test2@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012342', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
# Issued at: 2025-01-25 18:54:26.494689
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=123456789012343>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test3@test.com', 'balance': Decimal('200.00'), 'card_number': '123456789012343', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=33>)
# Issued at: 2025-01-25 18:54:26.797795
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=33>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=34>)
# Issued at: 2025-01-25 18:54:27.103617
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=34>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=35>)
# Issued at: 2025-01-25 18:54:27.409140
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=35>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.00'), 'discount': Decimal('0.00'), 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=44>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=12>)
# Issued at: 2025-01-25 18:54:27.539531
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=12>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.00'), 'auth_user': <User pk=44>, 'logger': <Logger TestRestockAndPurchase (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=14>)
# Issued at: 2025-01-25 18:54:27.831391
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=14>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=15>)
# Issued at: 2025-01-25 18:54:28.070697
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=15>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=16>)
# Issued at: 2025-01-25 18:54:28.236862
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=16>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=17>)
# Issued at: 2025-01-25 18:54:28.398312
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=17>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=18>)
# Issued at: 2025-01-25 18:54:28.566934
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=18>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '123456789012341', 'logger': <Logger TestRestockAndPurchase (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:54:28.720078
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:54:28.796978
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:54:28.879217
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:54:28.951687
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:54:29.040346
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=36>)
# Issued at: 2025-01-25 18:54:29.369268
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=36>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=37>)
# Issued at: 2025-01-25 18:54:29.698754
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=37>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=38>)
# Issued at: 2025-01-25 18:54:30.017067
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=38>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=39>)
# Issued at: 2025-01-25 18:54:30.359798
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=39>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=40>)
# Issued at: 2025-01-25 18:54:30.686079
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=40>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=48>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=13>)
# Issued at: 2025-01-25 18:54:30.791309
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=13>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=48>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=48>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=14>)
# Issued at: 2025-01-25 18:54:30.871826
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=14>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=48>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=48>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=15>)
# Issued at: 2025-01-25 18:54:30.942434
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=15>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=48>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=48>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=16>)
# Issued at: 2025-01-25 18:54:31.011518
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=16>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=48>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=48>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=17>)
# Issued at: 2025-01-25 18:54:31.091805
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=17>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=48>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=19>)
# Issued at: 2025-01-25 18:54:31.274501
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=19>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:54:31.387476
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:54:31.464463
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:54:31.551327
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:54:31.635340
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:54:31.704209
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=41>)
# Issued at: 2025-01-25 18:54:32.032680
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=41>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=42>)
# Issued at: 2025-01-25 18:54:32.434322
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=42>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=43>)
# Issued at: 2025-01-25 18:54:32.767759
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=43>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=44>)
# Issued at: 2025-01-25 18:54:33.083747
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=44>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=45>)
# Issued at: 2025-01-25 18:54:33.401724
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=45>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=54>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=18>)
# Issued at: 2025-01-25 18:54:33.477240
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=18>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=54>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=54>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=19>)
# Issued at: 2025-01-25 18:54:33.559342
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=19>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=54>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=54>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=20>)
# Issued at: 2025-01-25 18:54:33.627328
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=20>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=54>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=20>)
# Issued at: 2025-01-25 18:54:33.789489
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=20>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:54:33.890828
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:54:33.971654
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:54:34.043211
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:54:34.123351
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:54:34.201608
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=46>)
# Issued at: 2025-01-25 18:54:34.530503
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=46>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=47>)
# Issued at: 2025-01-25 18:54:34.860577
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=47>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=48>)
# Issued at: 2025-01-25 18:54:35.265203
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=48>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=49>)
# Issued at: 2025-01-25 18:54:35.616627
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=49>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=50>)
# Issued at: 2025-01-25 18:54:35.929251
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=50>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=60>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=21>)
# Issued at: 2025-01-25 18:54:36.022029
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=21>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=60>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=60>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=22>)
# Issued at: 2025-01-25 18:54:36.092260
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=22>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=60>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=60>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=23>)
# Issued at: 2025-01-25 18:54:36.245374
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=23>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=60>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=60>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=24>)
# Issued at: 2025-01-25 18:54:36.463656
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=24>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=60>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=60>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=25>)
# Issued at: 2025-01-25 18:54:36.619843
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=25>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=60>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=21>)
# Issued at: 2025-01-25 18:54:36.812978
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=21>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=22>)
# Issued at: 2025-01-25 18:54:37.034364
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=22>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=23>)
# Issued at: 2025-01-25 18:54:37.196963
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=23>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:54:37.314458
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:54:37.392620
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:54:37.465102
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:54:37.534763
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:54:37.603962
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=51>)
# Issued at: 2025-01-25 18:54:37.916256
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=51>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=52>)
# Issued at: 2025-01-25 18:54:38.299265
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=52>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=53>)
# Issued at: 2025-01-25 18:54:38.689750
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=53>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=54>)
# Issued at: 2025-01-25 18:54:39.016829
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=54>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=55>)
# Issued at: 2025-01-25 18:54:39.349173
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=55>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=66>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=26>)
# Issued at: 2025-01-25 18:54:39.441766
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=26>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=66>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=66>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=27>)
# Issued at: 2025-01-25 18:54:39.508731
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=27>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=66>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=66>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=28>)
# Issued at: 2025-01-25 18:54:39.589170
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=28>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=66>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=24>)
# Issued at: 2025-01-25 18:54:39.748150
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=24>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:55:41.086867
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:55:41.146124
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:55:41.213101
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:55:41.273336
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:55:41.334054
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 18:55:41.716079
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 18:55:42.038060
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 18:55:42.372599
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 18:55:42.704507
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 18:55:43.031923
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 18:55:43.136084
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 18:55:43.204726
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
# Issued at: 2025-01-25 18:55:43.304192
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
# Issued at: 2025-01-25 18:55:43.376315
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
# Issued at: 2025-01-25 18:55:43.454808
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
# Issued at: 2025-01-25 18:55:43.637065
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:55:43.729486
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:55:43.802043
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:55:43.883238
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:55:43.952359
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:55:44.019302
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 18:55:44.322083
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 18:55:44.694736
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 18:55:45.068048
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 18:55:45.387453
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
# Issued at: 2025-01-25 18:55:45.719121
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
# Issued at: 2025-01-25 18:55:45.803578
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
# Issued at: 2025-01-25 18:55:45.882416
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
# Issued at: 2025-01-25 18:55:45.960580
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
# Issued at: 2025-01-25 18:55:46.117761
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:55:46.214576
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:55:46.288392
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:55:46.371278
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:55:46.445145
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:55:46.528731
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
# Issued at: 2025-01-25 18:55:46.850877
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
# Issued at: 2025-01-25 18:55:47.153471
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
# Issued at: 2025-01-25 18:55:47.472817
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
# Issued at: 2025-01-25 18:55:47.781844
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
# Issued at: 2025-01-25 18:55:48.114412
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
# Issued at: 2025-01-25 18:55:48.198729
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
# Issued at: 2025-01-25 18:55:48.286388
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
# Issued at: 2025-01-25 18:55:48.369338
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=12>)
# Issued at: 2025-01-25 18:55:48.436296
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=12>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=13>)
# Issued at: 2025-01-25 18:55:48.518117
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=13>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=3>)
# Issued at: 2025-01-25 18:55:48.683508
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=3>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=4>)
# Issued at: 2025-01-25 18:55:48.850881
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=4>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=5>)
# Issued at: 2025-01-25 18:55:49.231152
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=5>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:55:49.420823
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:55:49.547098
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:55:49.626312
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:55:49.707070
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:55:49.788905
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=16>)
# Issued at: 2025-01-25 18:55:50.335633
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=16>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=17>)
# Issued at: 2025-01-25 18:55:50.665387
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=17>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=18>)
# Issued at: 2025-01-25 18:55:50.983412
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=18>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=19>)
# Issued at: 2025-01-25 18:55:51.312298
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=19>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=20>)
# Issued at: 2025-01-25 18:55:51.657701
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=20>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=19>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=14>)
# Issued at: 2025-01-25 18:55:51.739700
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=14>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=19>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=19>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=15>)
# Issued at: 2025-01-25 18:55:51.805771
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=15>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=19>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=19>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=16>)
# Issued at: 2025-01-25 18:55:51.883730
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=16>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=19>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=6>)
# Issued at: 2025-01-25 18:55:52.034820
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=6>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:56:23.423730
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:56:23.483536
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:56:23.547743
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:56:23.608382
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:56:23.670225
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
# Issued at: 2025-01-25 18:56:23.971215
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=1>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
# Issued at: 2025-01-25 18:56:24.449204
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=2>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
# Issued at: 2025-01-25 18:56:24.937221
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=3>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
# Issued at: 2025-01-25 18:56:25.263724
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=4>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
# Issued at: 2025-01-25 18:56:25.657727
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=5>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
# Issued at: 2025-01-25 18:56:25.741795
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=1>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
# Issued at: 2025-01-25 18:56:25.830792
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=2>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
# Issued at: 2025-01-25 18:56:25.899326
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=3>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
# Issued at: 2025-01-25 18:56:25.980021
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=4>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
# Issued at: 2025-01-25 18:56:26.045915
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=5>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=1>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
# Issued at: 2025-01-25 18:56:26.229032
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=1>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:56:26.338876
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:56:26.421942
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:56:26.497381
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:56:26.565939
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:56:26.639068
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
# Issued at: 2025-01-25 18:56:26.963403
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=6>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
# Issued at: 2025-01-25 18:56:27.285277
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=7>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
# Issued at: 2025-01-25 18:56:27.612028
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=8>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
# Issued at: 2025-01-25 18:56:27.982779
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=9>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
# Issued at: 2025-01-25 18:56:28.329726
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=10>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
# Issued at: 2025-01-25 18:56:28.419036
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=6>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
# Issued at: 2025-01-25 18:56:28.485560
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=7>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
# Issued at: 2025-01-25 18:56:28.556187
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=8>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=7>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
# Issued at: 2025-01-25 18:56:28.691927
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=2>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:56:28.803307
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:56:28.969549
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:56:29.145297
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:56:29.307045
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:56:29.379614
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
# Issued at: 2025-01-25 18:56:29.689430
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=11>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
# Issued at: 2025-01-25 18:56:30.010414
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=12>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
# Issued at: 2025-01-25 18:56:30.339207
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=13>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
# Issued at: 2025-01-25 18:56:30.661702
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=14>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
# Issued at: 2025-01-25 18:56:30.986157
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=15>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
# Issued at: 2025-01-25 18:56:31.063905
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=9>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 1, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
# Issued at: 2025-01-25 18:56:31.142317
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=10>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
# Issued at: 2025-01-25 18:56:31.222856
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=11>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('6.29000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=12>)
# Issued at: 2025-01-25 18:56:31.291097
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=12>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=13>)
# Issued at: 2025-01-25 18:56:31.361448
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=13>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 5, 'purchase_price': Decimal('4.38999999999999968025576890795491635799407958984375'), 'auth_user': <User pk=13>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=3>)
# Issued at: 2025-01-25 18:56:31.513399
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=3>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=4>)
# Issued at: 2025-01-25 18:56:31.666822
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=4>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=5>)
# Issued at: 2025-01-25 18:56:31.825492
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=5>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 1, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
# Issued at: 2025-01-25 18:56:31.935579
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123451>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser1', 'first_name': 'Test1', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
# Issued at: 2025-01-25 18:56:32.007354
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123452>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser2', 'first_name': 'Test2', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123452', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
# Issued at: 2025-01-25 18:56:32.089269
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123453>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser3', 'first_name': 'Test3', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123453', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
# Issued at: 2025-01-25 18:56:32.160579
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123454>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser4', 'first_name': 'Test4', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123454', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: create_new_customer, Args: (), Kwargs: {'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
# Issued at: 2025-01-25 18:56:32.245904
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <Customer pk=1234567890123455>)
StoreHelper.create_new_customer(*(), **{'username': 'testuser5', 'first_name': 'Test5', 'last_name': 'User', 'email': 'test@test.com', 'balance': Decimal('100.00'), 'card_number': '1234567890123455', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=16>)
# Issued at: 2025-01-25 18:56:32.577353
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=16>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000001', 'name': 'Testproduct1', 'resell_price': Decimal('11.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=17>)
# Issued at: 2025-01-25 18:56:32.908147
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=17>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000002', 'name': 'Testproduct2', 'resell_price': Decimal('12.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=18>)
# Issued at: 2025-01-25 18:56:33.238918
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=18>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000003', 'name': 'Testproduct3', 'resell_price': Decimal('13.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=19>)
# Issued at: 2025-01-25 18:56:33.546269
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=19>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000004', 'name': 'Testproduct4', 'resell_price': Decimal('14.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: get_or_create_product, Args: (), Kwargs: {'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=20>)
# Issued at: 2025-01-25 18:56:33.914816
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <StoreProduct pk=20>)
StoreHelper.get_or_create_product(*(), **{'ean': '100000000005', 'name': 'Testproduct5', 'resell_price': Decimal('15.99'), 'discount': Decimal('0.00'), 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=19>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=14>)
# Issued at: 2025-01-25 18:56:34.120787
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=14>)
StoreHelper.restock_product(*(), **{'ean': '100000000001', 'quantity': 3, 'purchase_price': Decimal('3.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=19>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=19>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=15>)
# Issued at: 2025-01-25 18:56:34.187356
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=15>)
StoreHelper.restock_product(*(), **{'ean': '100000000002', 'quantity': 5, 'purchase_price': Decimal('5.79000000000000003552713678800500929355621337890625'), 'auth_user': <User pk=19>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: restock_product, Args: (), Kwargs: {'ean': '100000000003', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=19>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False}, Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=16>)
# Issued at: 2025-01-25 18:56:34.256306
# Result: (<WebResponse status_code=201, "text/html; charset=utf-8">, <ProductRestock pk=16>)
StoreHelper.restock_product(*(), **{'ean': '100000000003', 'quantity': 2, 'purchase_price': Decimal('7.9900000000000002131628207280300557613372802734375'), 'auth_user': <User pk=19>, 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>, 'used_store_equity': False})

# Command: customer_purchase, Args: (), Kwargs: {'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>}, Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=6>)
# Issued at: 2025-01-25 18:56:34.423750
# Result: (<WebResponse status_code=200, "text/html; charset=utf-8">, <CustomerPurchase pk=6>)
StoreHelper.customer_purchase(*(), **{'ean': '100000000001', 'quantity': 2, 'card_number': '1234567890123451', 'logger': <Logger TestSetupForMultipleUsersAndProducts (INFO)>})

