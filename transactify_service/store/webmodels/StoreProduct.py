from typing import Iterable
from django.db import models
from decimal import Decimal
import logging
logger = logging.getLogger('StoreProduct')
class StoreProduct(models.Model):
    """Represents a product bound to a specific store."""
    ean = models.CharField(primary_key=True, unique=True, null=False)  # EAN code
    name = models.CharField(max_length=100, default="Generic Product")
    stock_quantity = models.PositiveIntegerField(default=0) #(auto calculate)
    discount = models.DecimalField(max_digits=3, default = 0, decimal_places=2) # In percent
    product_fill_amout = models.DecimalField(max_digits=5, default = 0, decimal_places=2)
    product_calories = models.DecimalField(max_digits=5, default = 0, decimal_places=2)

    # The price the product was purchased for
    resell_price = models.DecimalField(max_digits=10, default = 0, decimal_places=2)
    # The final price after discount
    final_price = models.DecimalField(max_digits=10, default = 0, decimal_places=2)
    # The date the product was added
    added_at = models.DateTimeField(auto_now_add=True)

    # The total revenue generated by the product
    total_revenue = models.DecimalField(max_digits=10, default = 0, decimal_places=2) #(auto calculate)
    # Total orders
    total_orders = models.PositiveIntegerField(default=0)   #(auto calculate)



    @property
    def get_final_price(self):
        rsp: Decimal = Decimal(self.resell_price * (1 - self.discount))
        # Quantize the result to two decimal places
        return rsp.quantize(Decimal("0.01"), rounding="ROUND_HALF_UP")
    
    # overwriting the save method to update the final price
    def save(self, *args, **kwargs):
        self.final_price = self.get_final_price
        super().save(*args, **kwargs)

    def get_top_selling_products(limit: int) -> Iterable['StoreProduct']:
        """Return the top selling products"""
        from store.webmodels.CustomerPurchase import CustomerPurchase
        store_product = StoreProduct.objects.order_by('-total_orders')[:limit]
        top_selling_products = []
        for product in store_product:
            purchases = CustomerPurchase.get_all_purchases(product)
            top_selling_products.append({
                'name': product.name,
                'price': product.final_price,
                'last_purchase': purchases[0].purchase_date,
                'total_orders': product.total_orders,
                'total_revenue': product.total_revenue,
                'total_profit':  CustomerPurchase.total_profit(product)
            })
        return top_selling_products
    


    def __str__(self):
        return f"{self.name} ({self.ean}) [{self.stock_quantity}]"


