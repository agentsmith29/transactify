"""
Django settings for transactify_service project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import sys
import logging
import logging.config
from rich.logging import RichHandler

from config import CONFIG

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {'rich': {'datefmt': '[%X]', 'format':'[%(name)s] %(message)s'}},
    'handlers': {
        'store_logs_db': {
            'level': 'DEBUG',
            'class': 'store.StoreLogsDBHandler.LogDBHandler',
        },
        'richconsole': {
            'level': 'DEBUG',
            'class': 'rich.logging.RichHandler',
            'formatter': 'rich',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'rich',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'root': {
            'handlers': ['richconsole'],
            'level': 'INFO',
            'propagate': False,
        },
        CONFIG.webservice.SERVICE_NAME: {
            'handlers': ['store_logs_db'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
    
}
logging.config.dictConfig(LOGGING)
logger = logging.getLogger(f"root.settings")                    
logger.debug("Logging configured.")




# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

ASGI_APPLICATION = "transactify_terminal.asgi:application"

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = CONFIG.django.SECRET_KEY

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = CONFIG.django.DEBUG


ALLOWED_HOSTS = [
    CONFIG.container.HOSTNAME,
    CONFIG.container.CONTAINER_NAME,
    #
    CONFIG.webservice.SERVICE_NAME,
    CONFIG.webservice.SERVICE_WEB_HOST,
    #
    'localhost', '127.0.0.1'
] 
logger.info(f"Allowed hosts: {ALLOWED_HOSTS}.".replace('[','').replace(']',''))


# Application definition

INSTALLED_APPS = [
    'channels',
    'daphne',
    'rest_framework',
    #
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    #
    'transactify_service',
    'store',
    'api',
    #
    'django_fastdev'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CSRF_TRUSTED_ORIGINS = [
    "http://127.0.0.1",
    "http://localhost",
    "http://127.0.0.1:8000",
    "http://localhost:8000",
    f"http://{CONFIG.webservice.SERVICE_WEB_HOST}",
    f"http://{CONFIG.webservice.SERVICE_WEB_HOST}:{CONFIG.webservice.SERVICE_WEB_PORT}",
    f"https://{CONFIG.webservice.SERVICE_WEB_HOST}",
    f"https://{CONFIG.webservice.SERVICE_WEB_HOST}:{CONFIG.webservice.SERVICE_WEB_PORT}",
]
CSRF_FAILURE_VIEW = "transactify_service.views.custom_csrf_failure_view"


ROOT_URLCONF = 'transactify_service.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'transactify_service.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': CONFIG.database.NAME,
        'USER': CONFIG.database.USER,
        'PASSWORD': CONFIG.database.PASSWORD,
        'HOST': CONFIG.database.HOST,
        'PORT': CONFIG.database.PORT,
    },
}

logger.info(f"Database settings: {DATABASES}.")

# Use in-memory SQLite for testing
if 'test' in sys.argv:
    DATABASES['default'] = {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'test_db',
        'USER': 'USER',
        'PASSWORD': 'PASSWORD',
        'HOST':'192.168.1.190',
        'PORT': 5432,
    }
# Important, to make the correct database routing work
#DATABASE_ROUTERS = ['transactify_service.db_router.MultiDatabaseRouter']


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = CONFIG.django.STATIC_URL
STATIC_ROOT = CONFIG.django.STATIC_ROOT
logger.debug(f"Static files settings: {STATIC_URL}, {STATIC_ROOT}.")
#print(STATIC_ROOT)
#print(STATIC_URL)

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


REST_FRAMEWORK = {
    # Custom exception handler to always return a JSON response
    'EXCEPTION_HANDLER': 'transactify_service.APIResponse.custom_exception_handler',
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'api.authentication.APIKeyAuthentication',
        'rest_framework.authentication.SessionAuthentication',  # Optional: Keep session auth for logged-in users
    ],
}


# Login and redirect URLs
#LOGIN_REDIRECT_URL = STORE_NAME + '/dashboard/'  # Redirect after login
#LOGOUT_REDIRECT_URL = STORE_NAME +'/'  # Redirect after logout
#LOGIN_URL = '/'  # Login page

LOGIN_REDIRECT_URL = f"/{CONFIG.webservice.SERVICE_NAME}/dashboard/"    # Redirect to the dashboard after login
LOGOUT_REDIRECT_URL = f"/{CONFIG.webservice.SERVICE_NAME}/"             # Redirect to the store's root after logout
LOGIN_URL = f"/{CONFIG.webservice.SERVICE_NAME}/login/"                 # URL of the login page
